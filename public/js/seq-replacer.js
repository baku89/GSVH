var $console, $progPano, $progSeq, $statPano, $statSeq, TAG_WIDTH, bFlip, basename, changedList, convertLatLng, destDir, fileList, gsvh, gsvp, img, load, onComplete, outCanvas, outCtx, panoJson, sisyphus, srcCanvas, srcCtx, srcDir, ss, start, startTime, tagCanvas, tagCtx;

$console = null;

$progPano = null;

$statPano = null;

$progSeq = null;

$statSeq = null;

srcDir = "";

destDir = "";

fileList = null;

gsvh = null;

basename = null;

sisyphus = null;

gsvp = null;

startTime = null;

changedList = [];

ss = new google.maps.StreetViewService();

tagCanvas = tagCtx = null;

bFlip = false;

img = null;

srcCanvas = outCanvas = tagCanvas = null;

srcCtx = outCtx = tagCanvas = null;

TAG_WIDTH = 1664;

panoJson = {};

$(function() {
  $console = $('#console');
  $progPano = $('#prog-pano');
  $progSeq = $('#prog-seq');
  $statPano = $('#stat-pano');
  $statSeq = $('#stat-seq');
  sisyphus = $('#replace-proxy').sisyphus();
  $('#decode').on('click', start);
  $('[name=file]').on('change', function() {
    $('[name=source]').val($('[name=file]').val());
    return sisyphus.saveAllData();
  });
  gsvp = new GSVPANO.PanoLoader({
    zoom: parseInt($('[name=zoom]').val())
  });
  gsvp.onProgress = function(p) {
    $statPano.html(p + "%");
    return $progPano.val(p);
  };
  img = new Image();
  srcCanvas = document.createElement('canvas');
  outCanvas = document.createElement('canvas');
  tagCanvas = $('#tag')[0];
  srcCtx = srcCanvas.getContext('2d');
  outCtx = outCanvas.getContext('2d');
  return tagCtx = tagCanvas.getContext('2d');
});

start = function() {
  var f, files, zoom;
  srcDir = $('[name=source]').val();
  if (srcDir === "") {
    alert("please select source directory");
    return;
  }
  files = fs.readdirSync(srcDir);
  fileList = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = files.length; j < len; j++) {
      f = files[j];
      if (/.png$/.test(f) && f.substr(0, 4) !== "tag_") {
        results.push(f);
      }
    }
    return results;
  })();
  basename = path.basename(srcDir);
  zoom = parseInt($('[name=zoom').val());
  gsvp.setZoom(zoom);
  return load();
};

load = function() {
  var bChanged, filename, idx, loadImg, onLoadImg, pano, saveAndNext;
  startTime = new Date();
  bChanged = false;
  idx = 0;
  filename = "";
  pano = null;
  bFlip = false;
  console.log(fileList);
  loadImg = function() {
    filename = fileList[idx];
    return img.src = "file://" + srcDir + "/" + filename;
  };
  onLoadImg = function() {
    var h, headingOffset, i, j, latLng, pixel, pt, ref, w, x;
    w = img.width;
    h = img.height;
    srcCanvas.width = img.width;
    srcCanvas.height = img.height;
    srcCtx.drawImage(img, 0, 0);
    headingOffset = 0;
    x = 0;
    for (i = j = 0, ref = TAG_WIDTH - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      pixel = srcCtx.getImageData(i, h - TAG_HEIGHT + 3, 1, 1).data;
      if (pixel[0] >= 128) {
        x = i;
        headingOffset = (x / TAG_WIDTH) * 360;
        break;
      }
    }
    pt = {
      x: (TAG_WIDTH + x - 3) % TAG_WIDTH,
      y: h - TAG_HEIGHT + 10
    };
    console.log(pt);
    pixel = srcCtx.getImageData(pt.x, pt.y, 1, 1).data;
    if (pixel[0] > 128) {
      bFlip = true;
      x = TAG_WIDTH - (x + 12);
      headingOffset = (x / TAG_WIDTH) * 360;
    } else {
      bFlip = false;
    }
    tagCanvas.width = TAG_WIDTH;
    tagCanvas.height = TAG_HEIGHT;
    if (bFlip) {
      tagCtx.save();
      tagCtx.translate(TAG_WIDTH, 0);
      tagCtx.scale(-1, 1);
      tagCtx.drawImage(img, 0, h - TAG_HEIGHT, TAG_WIDTH, TAG_HEIGHT, x, 0, TAG_WIDTH, TAG_HEIGHT);
      tagCtx.drawImage(img, 0, h - TAG_HEIGHT, TAG_WIDTH, TAG_HEIGHT, x - TAG_WIDTH, 0, TAG_WIDTH, TAG_HEIGHT);
      tagCtx.restore();
    } else {
      tagCtx.drawImage(img, 0, h - TAG_HEIGHT, TAG_WIDTH, TAG_HEIGHT, -x, 0, TAG_WIDTH, TAG_HEIGHT);
      tagCtx.drawImage(img, 0, h - TAG_HEIGHT, TAG_WIDTH, TAG_HEIGHT, -x + TAG_WIDTH, 0, TAG_WIDTH, TAG_HEIGHT);
    }
    console.log(bFlip, x);
    pano = CanvasMatrixCode.decode(tagCanvas, 0, 10, TAG_WIDTH, TAG_HEIGHT - 10);
    if (pano === null) {
      saveAndNext();
      return;
    }
    console.log(pano);
    latLng = convertLatLng(pano.latLng);
    pano.latLng = {
      lat: latLng.lat(),
      lng: latLng.lng()
    };
    return ss.getPanoramaById(pano.id, function(data, status) {
      if (status === google.maps.StreetViewStatus.OK) {
        pano.changed = false;
        return saveAndNext();
      } else {
        bChanged = true;
        return searchNearestPano(latLng, function(newId, newLatLng, dist) {
          console.log(newLatLng, newId, dist);
          pano.changed = true;
          pano.id = newId;
          pano.latLng = {
            lat: newLatLng.lat(),
            lng: newLatLng.lng()
          };
          console.log("changed:" + filename + ", nearest pano: " + pano.id + " -> " + newId + ", distance from original: " + dist);
          return saveAndNext();
        });
      }
    });
  };
  saveAndNext = function() {
    panoJson[filename] = pano;
    if (++idx < fileList.length) {
      return loadImg();
    } else {
      return onComplete();
    }
  };
  img.onload = onLoadImg;
  return loadImg();
};

convertLatLng = function(latLngStr) {
  var result;
  if (latLngStr.lat != null) {
    return latLngStr;
  } else {
    result = /([\-0-9.]+), ([\-0-9.]+)/.exec(latLngStr);
    return new google.maps.LatLng(result[1], result[2]);
  }
};

onComplete = function() {
  var txt;
  console.log(panoJson);
  txt = JSON.stringify(panoJson);
  fs.writeFileSync(srcDir + "/_pano-list.json", txt);
  return notifier.notify({
    title: "Proxy Replacer",
    message: "All done!",
    sound: true
  });
};

//# sourceMappingURL=data:application/json;base64,