var $autosearch, $status, API_KEY, FPS, SUFFIX, VERSION, bLinkUpdate, clear, cntMarker, exportJson, list, load, map, onChangePanoId, onLinksChanged, onPositionChanged, prevId, restoreSettings, settings, storage, svp, undo, updateSettings, updateStatus, urlReg;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

VERSION = '0.1';

SUFFIX = 'pip';

FPS = 24.0;

storage = localStorage;

settings = {};

map = null;

svp = null;

urlReg = /!1s(.*)!2e/;

list = [];

$status = null;

$autosearch = null;

prevId = '';

cntMarker = null;

bLinkUpdate = false;

restoreSettings = function() {
  var $elm;
  $elm = $('nav');
  $('[name=url]').val(storage['pip-url']);
  return $('[name=autosearch').val(storage['pip-autosearch']);
};

updateSettings = function() {
  var $elm, key, results, val;
  $elm = $('#nav');
  $autosearch = $('[name=autosearch');
  settings.url = $('[name=url]').val();
  settings.autosearch = $('[name=autosearch]').prop('checked');
  results = [];
  for (key in settings) {
    val = settings[key];
    results.push(storage[SUFFIX + "-" + key] = val);
  }
  return results;
};

$(function() {
  var options;
  $status = $('#status');
  $('#laod').on('click', load);
  $('#clear').on('click', clear);
  $('#export').on('click', exportJson);
  $('#undo').on('click', undo);
  $('input, textarea').on('change', updateSettings);
  restoreSettings();
  options = {
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  map = new google.maps.Map($('#map')[0], options);
  options = {
    enableCloseButton: false
  };
  svp = new google.maps.StreetViewPanorama($('#svp')[0], options);
  cntMarker = new google.maps.Marker({
    map: map,
    icon: 'http://www.googlemapsmarkers.com/v1/009900'
  });
  google.maps.event.addListener(svp, 'pano_changed', onChangePanoId);
  google.maps.event.addListener(svp, 'position_changed', onPositionChanged);
  return google.maps.event.addListener(svp, 'links_changed', onLinksChanged);
});

clear = function() {
  list = [];
  prevId = '';
  return updateStatus();
};

exportJson = function() {
  var json;
  json = JSON.stringify(list);
  return $('#json').html(json);
};

load = function() {
  var panoId, result;
  updateSettings();
  result = urlReg.exec(settings.url);
  panoId = result[1];
  return svp.setPano(panoId);
};

undo = function() {
  return null;
};

updateStatus = function() {
  return $status.html("count: " + list.length + "<br>duration: " + ((list.length / FPS).toPrecision(2)));
};

onChangePanoId = function() {
  return null;
};

onPositionChanged = function() {
  return null;
};

onLinksChanged = function() {
  var id, l, links, marker, nextId, pos;
  pos = svp.getPosition();
  id = svp.getPano();
  list.push(id);
  links = svp.getLinks();
  if (bLinkUpdate) {
    bLinkUpdate = false;
  } else {
    links = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = links.length; i < len; i++) {
        l = links[i];
        if (l.pano !== prevId) {
          results.push(l);
        }
      }
      return results;
    })();
    console.log(links);
    bLinkUpdate = true;
    svp.setLinks(links);
    return;
  }
  marker = new google.maps.Marker({
    position: pos,
    map: map,
    title: "" + (list.length - 1)
  });
  map.setCenter(pos);
  cntMarker.setPosition(pos);
  updateStatus();
  nextId = void 0;
  if ($autosearch.prop('checked')) {
    if (links.length === 1) {
      nextId = links[0].pano;
    }
  }
  prevId = svp.getPano();
  if (nextId != null) {
    return svp.setPano(nextId);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhbm9pZC1wYXJzZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsK1BBQUE7O0FBQUEsT0FBQSxHQUFVLHlDQUFWLENBQUE7O0FBQUEsT0FDQSxHQUFVLEtBRFYsQ0FBQTs7QUFBQSxNQUVBLEdBQVMsS0FGVCxDQUFBOztBQUFBLEdBR0EsR0FBTSxJQUhOLENBQUE7O0FBQUEsT0FNQSxHQUFVLFlBTlYsQ0FBQTs7QUFBQSxRQVFBLEdBQVcsRUFSWCxDQUFBOztBQUFBLEdBVUEsR0FBTSxJQVZOLENBQUE7O0FBQUEsR0FXQSxHQUFNLElBWE4sQ0FBQTs7QUFBQSxNQWFBLEdBQVMsWUFiVCxDQUFBOztBQUFBLElBZUEsR0FBTyxFQWZQLENBQUE7O0FBQUEsT0FrQkEsR0FBVSxJQWxCVixDQUFBOztBQUFBLFdBbUJBLEdBQWMsSUFuQmQsQ0FBQTs7QUFBQSxNQXFCQSxHQUFTLEVBckJULENBQUE7O0FBQUEsU0F1QkEsR0FBWSxJQXZCWixDQUFBOztBQUFBLFdBMEJBLEdBQWMsS0ExQmQsQ0FBQTs7QUFBQSxlQWlDQSxHQUFrQixTQUFBLEdBQUE7QUFDakIsTUFBQSxJQUFBO0FBQUEsRUFBQSxJQUFBLEdBQU8sQ0FBQSxDQUFFLEtBQUYsQ0FBUCxDQUFBO0FBQUEsRUFFQSxDQUFBLENBQUUsWUFBRixDQUFlLENBQUMsR0FBaEIsQ0FBb0IsT0FBUSxDQUFBLFNBQUEsQ0FBNUIsQ0FGQSxDQUFBO1NBR0EsQ0FBQSxDQUFFLGtCQUFGLENBQXFCLENBQUMsR0FBdEIsQ0FBMEIsT0FBUSxDQUFBLGdCQUFBLENBQWxDLEVBSmlCO0FBQUEsQ0FqQ2xCLENBQUE7O0FBQUEsY0F5Q0EsR0FBaUIsU0FBQSxHQUFBO0FBQ2hCLE1BQUEsdUJBQUE7QUFBQSxFQUFBLElBQUEsR0FBTyxDQUFBLENBQUUsTUFBRixDQUFQLENBQUE7QUFBQSxFQUNBLFdBQUEsR0FBYyxDQUFBLENBQUUsa0JBQUYsQ0FEZCxDQUFBO0FBQUEsRUFHQSxRQUFRLENBQUMsR0FBVCxHQUFlLENBQUEsQ0FBRSxZQUFGLENBQWUsQ0FBQyxHQUFoQixDQUFBLENBSGYsQ0FBQTtBQUFBLEVBSUEsUUFBUSxDQUFDLFVBQVQsR0FBc0IsQ0FBQSxDQUFFLG1CQUFGLENBQXNCLENBQUMsSUFBdkIsQ0FBNEIsU0FBNUIsQ0FKdEIsQ0FBQTtBQU1BO09BQUEsZUFBQTt3QkFBQTtBQUNDLGlCQUFBLE9BQVEsQ0FBRyxNQUFELEdBQVEsR0FBUixHQUFXLEdBQWIsQ0FBUixHQUE4QixJQUE5QixDQUREO0FBQUE7aUJBUGdCO0FBQUEsQ0F6Q2pCLENBQUE7O0FBQUEsQ0FzREEsQ0FBRSxTQUFBLEdBQUE7QUFDRCxNQUFBLE9BQUE7QUFBQSxFQUFBLE9BQUEsR0FBVSxDQUFBLENBQUUsU0FBRixDQUFWLENBQUE7QUFBQSxFQUVBLENBQUEsQ0FBRSxPQUFGLENBQVUsQ0FBQyxFQUFYLENBQWMsT0FBZCxFQUF1QixJQUF2QixDQUZBLENBQUE7QUFBQSxFQUdBLENBQUEsQ0FBRSxRQUFGLENBQVcsQ0FBQyxFQUFaLENBQWUsT0FBZixFQUF3QixLQUF4QixDQUhBLENBQUE7QUFBQSxFQUlBLENBQUEsQ0FBRSxTQUFGLENBQVksQ0FBQyxFQUFiLENBQWdCLE9BQWhCLEVBQXlCLFVBQXpCLENBSkEsQ0FBQTtBQUFBLEVBS0EsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLEVBQVgsQ0FBYyxPQUFkLEVBQXVCLElBQXZCLENBTEEsQ0FBQTtBQUFBLEVBTUEsQ0FBQSxDQUFFLGlCQUFGLENBQW9CLENBQUMsRUFBckIsQ0FBd0IsUUFBeEIsRUFBa0MsY0FBbEMsQ0FOQSxDQUFBO0FBQUEsRUFRQSxlQUFBLENBQUEsQ0FSQSxDQUFBO0FBQUEsRUFVQSxPQUFBLEdBQ0M7QUFBQSxJQUFBLElBQUEsRUFBTSxFQUFOO0FBQUEsSUFDQSxTQUFBLEVBQVcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FEakM7R0FYRCxDQUFBO0FBQUEsRUFjQSxHQUFBLEdBQVUsSUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQVosQ0FBaUIsQ0FBQSxDQUFFLE1BQUYsQ0FBVSxDQUFBLENBQUEsQ0FBM0IsRUFBK0IsT0FBL0IsQ0FkVixDQUFBO0FBQUEsRUFnQkEsT0FBQSxHQUNDO0FBQUEsSUFBQSxpQkFBQSxFQUFtQixLQUFuQjtHQWpCRCxDQUFBO0FBQUEsRUFtQkEsR0FBQSxHQUFVLElBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBWixDQUFnQyxDQUFBLENBQUUsTUFBRixDQUFVLENBQUEsQ0FBQSxDQUExQyxFQUE4QyxPQUE5QyxDQW5CVixDQUFBO0FBQUEsRUFxQkEsU0FBQSxHQUFnQixJQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBWixDQUNmO0FBQUEsSUFBQSxHQUFBLEVBQUssR0FBTDtBQUFBLElBQ0EsSUFBQSxFQUFNLDRDQUROO0dBRGUsQ0FyQmhCLENBQUE7QUFBQSxFQXlCQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFsQixDQUE4QixHQUE5QixFQUFtQyxjQUFuQyxFQUFtRCxjQUFuRCxDQXpCQSxDQUFBO0FBQUEsRUEwQkEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBbEIsQ0FBOEIsR0FBOUIsRUFBbUMsa0JBQW5DLEVBQXVELGlCQUF2RCxDQTFCQSxDQUFBO1NBMkJBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQWxCLENBQThCLEdBQTlCLEVBQW1DLGVBQW5DLEVBQW9ELGNBQXBELEVBNUJDO0FBQUEsQ0FBRixDQXREQSxDQUFBOztBQUFBLEtBdUZBLEdBQVEsU0FBQSxHQUFBO0FBQ1AsRUFBQSxJQUFBLEdBQU8sRUFBUCxDQUFBO0FBQUEsRUFDQSxNQUFBLEdBQVMsRUFEVCxDQUFBO1NBRUEsWUFBQSxDQUFBLEVBSE87QUFBQSxDQXZGUixDQUFBOztBQUFBLFVBNEZBLEdBQWEsU0FBQSxHQUFBO0FBQ1osTUFBQSxJQUFBO0FBQUEsRUFBQSxJQUFBLEdBQU8sSUFBSSxDQUFDLFNBQUwsQ0FBZ0IsSUFBaEIsQ0FBUCxDQUFBO1NBQ0EsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLElBQVgsQ0FBaUIsSUFBakIsRUFGWTtBQUFBLENBNUZiLENBQUE7O0FBQUEsSUFpR0EsR0FBTyxTQUFBLEdBQUE7QUFDTixNQUFBLGNBQUE7QUFBQSxFQUFBLGNBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxFQUVBLE1BQUEsR0FBUyxNQUFNLENBQUMsSUFBUCxDQUFhLFFBQVEsQ0FBQyxHQUF0QixDQUZULENBQUE7QUFBQSxFQUdBLE1BQUEsR0FBUyxNQUFPLENBQUEsQ0FBQSxDQUhoQixDQUFBO1NBS0EsR0FBRyxDQUFDLE9BQUosQ0FBYSxNQUFiLEVBTk07QUFBQSxDQWpHUCxDQUFBOztBQUFBLElBMEdBLEdBQU8sU0FBQSxHQUFBO1NBQ04sS0FETTtBQUFBLENBMUdQLENBQUE7O0FBQUEsWUFxSEEsR0FBZSxTQUFBLEdBQUE7U0FDZCxPQUFPLENBQUMsSUFBUixDQUFhLFNBQUEsR0FBVSxJQUFJLENBQUMsTUFBZixHQUFzQixnQkFBdEIsR0FBcUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFMLEdBQWMsR0FBZixDQUFtQixDQUFDLFdBQXBCLENBQWdDLENBQWhDLENBQUQsQ0FBbEQsRUFEYztBQUFBLENBckhmLENBQUE7O0FBQUEsY0E0SEEsR0FBaUIsU0FBQSxHQUFBO0FBQ2hCLFNBQU8sSUFBUCxDQURnQjtBQUFBLENBNUhqQixDQUFBOztBQUFBLGlCQWdJQSxHQUFvQixTQUFBLEdBQUE7QUFDbkIsU0FBTyxJQUFQLENBRG1CO0FBQUEsQ0FoSXBCLENBQUE7O0FBQUEsY0FtSUEsR0FBaUIsU0FBQSxHQUFBO0FBSWhCLE1BQUEsaUNBQUE7QUFBQSxFQUFBLEdBQUEsR0FBTSxHQUFHLENBQUMsV0FBSixDQUFBLENBQU4sQ0FBQTtBQUFBLEVBQ0EsRUFBQSxHQUFLLEdBQUcsQ0FBQyxPQUFKLENBQUEsQ0FETCxDQUFBO0FBQUEsRUFTQSxJQUFJLENBQUMsSUFBTCxDQUFXLEVBQVgsQ0FUQSxDQUFBO0FBQUEsRUFXQSxLQUFBLEdBQVEsR0FBRyxDQUFDLFFBQUosQ0FBQSxDQVhSLENBQUE7QUFjQSxFQUFBLElBQUksV0FBSjtBQUNDLElBQUEsV0FBQSxHQUFjLEtBQWQsQ0FERDtHQUFBLE1BQUE7QUFHQyxJQUFBLEtBQUE7O0FBQVM7V0FBQSx1Q0FBQTtxQkFBQTtZQUFzQixDQUFDLENBQUMsSUFBRixLQUFVO0FBQWhDLHVCQUFBLEVBQUE7U0FBQTtBQUFBOztRQUFULENBQUE7QUFBQSxJQUVBLE9BQU8sQ0FBQyxHQUFSLENBQVksS0FBWixDQUZBLENBQUE7QUFBQSxJQUdBLFdBQUEsR0FBYyxJQUhkLENBQUE7QUFBQSxJQUlBLEdBQUcsQ0FBQyxRQUFKLENBQWMsS0FBZCxDQUpBLENBQUE7QUFLQSxVQUFBLENBUkQ7R0FkQTtBQUFBLEVBeUJBLE1BQUEsR0FBYSxJQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBWixDQUNaO0FBQUEsSUFBQSxRQUFBLEVBQVUsR0FBVjtBQUFBLElBQ0EsR0FBQSxFQUFLLEdBREw7QUFBQSxJQUVBLEtBQUEsRUFBTyxFQUFBLEdBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTCxHQUFjLENBQWYsQ0FGVDtHQURZLENBekJiLENBQUE7QUFBQSxFQTZCQSxHQUFHLENBQUMsU0FBSixDQUFlLEdBQWYsQ0E3QkEsQ0FBQTtBQUFBLEVBK0JBLFNBQVMsQ0FBQyxXQUFWLENBQXVCLEdBQXZCLENBL0JBLENBQUE7QUFBQSxFQWlDQSxZQUFBLENBQUEsQ0FqQ0EsQ0FBQTtBQUFBLEVBcUNBLE1BQUEsR0FBUyxNQXJDVCxDQUFBO0FBdUNBLEVBQUEsSUFBRyxXQUFXLENBQUMsSUFBWixDQUFpQixTQUFqQixDQUFIO0FBQ0MsSUFBQSxJQUFHLEtBQUssQ0FBQyxNQUFOLEtBQWdCLENBQW5CO0FBQ0MsTUFBQSxNQUFBLEdBQVMsS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLElBQWxCLENBREQ7S0FERDtHQXZDQTtBQUFBLEVBMkNBLE1BQUEsR0FBUyxHQUFHLENBQUMsT0FBSixDQUFBLENBM0NULENBQUE7QUE4Q0EsRUFBQSxJQUFHLGNBQUg7V0FDQyxHQUFHLENBQUMsT0FBSixDQUFhLE1BQWIsRUFERDtHQWxEZ0I7QUFBQSxDQW5JakIsQ0FBQSIsImZpbGUiOiJwYW5vaWQtcGFyc2VyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiQVBJX0tFWSA9IFwiQUl6YVN5QlEyZHpEZnlGOFkwRHdlLVE2Snp4NF9HNjJBTnJUb3RRXCJcblZFUlNJT04gPSAnMC4xJ1xuU1VGRklYID0gJ3BpcCdcbkZQUyA9IDI0LjBcblxuXG5zdG9yYWdlID0gbG9jYWxTdG9yYWdlXG5cbnNldHRpbmdzID0ge31cblxubWFwID0gbnVsbFxuc3ZwID0gbnVsbFxuXG51cmxSZWcgPSAvITFzKC4qKSEyZS9cblxubGlzdCA9IFtdXG5cbiMganFcbiRzdGF0dXMgPSBudWxsXG4kYXV0b3NlYXJjaCA9IG51bGxcblxucHJldklkID0gJydcblxuY250TWFya2VyID0gbnVsbFxuXG4jIGJVbmRvID0gZmFsc2VcbmJMaW5rVXBkYXRlID0gZmFsc2VcblxuXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgZnVuY1xuXG5yZXN0b3JlU2V0dGluZ3MgPSAtPlxuXHQkZWxtID0gJCgnbmF2JylcblxuXHQkKCdbbmFtZT11cmxdJykudmFsIHN0b3JhZ2VbJ3BpcC11cmwnXVxuXHQkKCdbbmFtZT1hdXRvc2VhcmNoJykudmFsIHN0b3JhZ2VbJ3BpcC1hdXRvc2VhcmNoJ11cblxuXHRcblxudXBkYXRlU2V0dGluZ3MgPSAtPlxuXHQkZWxtID0gJCgnI25hdicpXG5cdCRhdXRvc2VhcmNoID0gJCgnW25hbWU9YXV0b3NlYXJjaCcpXG5cblx0c2V0dGluZ3MudXJsID0gJCgnW25hbWU9dXJsXScpLnZhbCgpXG5cdHNldHRpbmdzLmF1dG9zZWFyY2ggPSAkKCdbbmFtZT1hdXRvc2VhcmNoXScpLnByb3AoJ2NoZWNrZWQnKVxuXG5cdGZvciBrZXksIHZhbCBvZiBzZXR0aW5nc1xuXHRcdHN0b3JhZ2VbXCIje1NVRkZJWH0tI3trZXl9XCJdID0gdmFsXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgaW5pdFxuXG4kIC0+XG5cdCRzdGF0dXMgPSAkKCcjc3RhdHVzJylcblxuXHQkKCcjbGFvZCcpLm9uICdjbGljaycsIGxvYWRcblx0JCgnI2NsZWFyJykub24gJ2NsaWNrJywgY2xlYXJcblx0JCgnI2V4cG9ydCcpLm9uICdjbGljaycsIGV4cG9ydEpzb25cblx0JCgnI3VuZG8nKS5vbiAnY2xpY2snLCB1bmRvXG5cdCQoJ2lucHV0LCB0ZXh0YXJlYScpLm9uICdjaGFuZ2UnLCB1cGRhdGVTZXR0aW5nc1xuXG5cdHJlc3RvcmVTZXR0aW5ncygpXG5cblx0b3B0aW9ucyA9IFxuXHRcdHpvb206IDE2XG5cdFx0bWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUFxuXG5cdG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoICQoJyNtYXAnKVswXSwgb3B0aW9ucylcblxuXHRvcHRpb25zID1cblx0XHRlbmFibGVDbG9zZUJ1dHRvbjogZmFsc2VcblxuXHRzdnAgPSBuZXcgZ29vZ2xlLm1hcHMuU3RyZWV0Vmlld1Bhbm9yYW1hKCAkKCcjc3ZwJylbMF0sIG9wdGlvbnMgKVxuXG5cdGNudE1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXJcblx0XHRtYXA6IG1hcFxuXHRcdGljb246ICdodHRwOi8vd3d3Lmdvb2dsZW1hcHNtYXJrZXJzLmNvbS92MS8wMDk5MDAnXG5cblx0Z29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoc3ZwLCAncGFub19jaGFuZ2VkJywgb25DaGFuZ2VQYW5vSWQpXG5cdGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKHN2cCwgJ3Bvc2l0aW9uX2NoYW5nZWQnLCBvblBvc2l0aW9uQ2hhbmdlZClcblx0Z29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoc3ZwLCAnbGlua3NfY2hhbmdlZCcsIG9uTGlua3NDaGFuZ2VkKVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIGFjdGlvblxuXG5jbGVhciA9IC0+XG5cdGxpc3QgPSBbXVxuXHRwcmV2SWQgPSAnJ1xuXHR1cGRhdGVTdGF0dXMoKVxuXG5leHBvcnRKc29uID0gLT5cblx0anNvbiA9IEpTT04uc3RyaW5naWZ5KCBsaXN0IClcblx0JCgnI2pzb24nKS5odG1sKCBqc29uIClcblxuXG5sb2FkID0gLT5cblx0dXBkYXRlU2V0dGluZ3MoKVxuXG5cdHJlc3VsdCA9IHVybFJlZy5leGVjKCBzZXR0aW5ncy51cmwgKVxuXHRwYW5vSWQgPSByZXN1bHRbMV1cblx0XG5cdHN2cC5zZXRQYW5vKCBwYW5vSWQgKVxuXG5cbnVuZG8gPSAtPlxuXHRudWxsXG5cdCMgbGlzdC5wb3AoKVxuXHQjIHN2cC5zZXRQYW5vKCBsaXN0WyBsaXN0Lmxlbmd0aCAtIDEgXSApXG5cblx0IyBpZiAkYXV0b3NlYXJjaC5wcm9wKCdjaGVja2VkJylcblx0IyBcdCRhdXRvc2VhcmNoLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSlcblxuXHQjIHVwZGF0ZVN0YXR1cygpXG5cblxudXBkYXRlU3RhdHVzID0gLT5cblx0JHN0YXR1cy5odG1sKFwiY291bnQ6ICN7bGlzdC5sZW5ndGh9PGJyPmR1cmF0aW9uOiAjeyhsaXN0Lmxlbmd0aCAvIEZQUykudG9QcmVjaXNpb24oMil9XCIpXG5cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBldnRcblxub25DaGFuZ2VQYW5vSWQgPSAtPlxuXHRyZXR1cm4gbnVsbFxuXG5cbm9uUG9zaXRpb25DaGFuZ2VkID0gLT5cblx0cmV0dXJuIG51bGxcblxub25MaW5rc0NoYW5nZWQgPSAtPlxuXHQjIGlmIGJVbmRvXG5cdCMgXHRiVW5kbyA9IGZhbHNlXG5cdCMgXHRyZXR1cm5cblx0cG9zID0gc3ZwLmdldFBvc2l0aW9uKClcblx0aWQgPSBzdnAuZ2V0UGFubygpXG5cblx0IyBpZiBsaXN0LmluZGV4T2YoIGlkICkgIT0gLTFcblx0IyBcdGlmICFjb25maXJtKCdBbHJlYWR5IHNhbWUgcGFubyBpZCBhZGRlZC4gQ29udGludWU/Jylcblx0IyBcdFx0YlVuZG8gPSB0cnVlXG5cdCMgXHRcdG1hcC5zZXRQYW5vKCBsaXN0W2xpc3QubGVuZ3RoLTFdIClcblx0IyBcdFx0cmV0dXJuXG5cblx0bGlzdC5wdXNoKCBpZCApXG5cblx0bGlua3MgPSBzdnAuZ2V0TGlua3MoKVxuXG5cdCMgc2V0IGxpbmtzXG5cdGlmIChiTGlua1VwZGF0ZSlcblx0XHRiTGlua1VwZGF0ZSA9IGZhbHNlXG5cdGVsc2Vcblx0XHRsaW5rcyA9IChsIGZvciBsIGluIGxpbmtzIHdoZW4gbC5wYW5vICE9IHByZXZJZClcblxuXHRcdGNvbnNvbGUubG9nIGxpbmtzXG5cdFx0YkxpbmtVcGRhdGUgPSB0cnVlXG5cdFx0c3ZwLnNldExpbmtzKCBsaW5rcyApXG5cdFx0cmV0dXJuXG5cblx0IyBhZGQgbWFya2VyXG5cdG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXJcblx0XHRwb3NpdGlvbjogcG9zXG5cdFx0bWFwOiBtYXBcblx0XHR0aXRsZTogXCIje2xpc3QubGVuZ3RoIC0gMX1cIlxuXHRtYXAuc2V0Q2VudGVyKCBwb3MgKVxuXG5cdGNudE1hcmtlci5zZXRQb3NpdGlvbiggcG9zIClcblxuXHR1cGRhdGVTdGF0dXMoKVxuXG5cblx0IyBhdXRvc2VyYWNoXG5cdG5leHRJZCA9IHVuZGVmaW5lZFxuXG5cdGlmICRhdXRvc2VhcmNoLnByb3AoJ2NoZWNrZWQnKVxuXHRcdGlmIGxpbmtzLmxlbmd0aCA9PSAxXG5cdFx0XHRuZXh0SWQgPSBsaW5rc1swXS5wYW5vXG5cblx0cHJldklkID0gc3ZwLmdldFBhbm8oKVxuXHQjIGJVbmRvID0gZmFsc2VcblxuXHRpZiBuZXh0SWQ/XG5cdFx0c3ZwLnNldFBhbm8oIG5leHRJZCApXG5cblxuIl19