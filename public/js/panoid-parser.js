var $panoIdList, API_KEY, SUFFIX, VERSION, loadStreeView, map, onChangePanoId, restoreSettings, settings, storage, svp, updateSettings, urlReg;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

VERSION = '0.1';

SUFFIX = 'pip';

storage = localStorage;

settings = {};

map = null;

svp = null;

urlReg = /!1s(.*)!2e/;

$panoIdList = null;

restoreSettings = function() {
  var $elm;
  $elm = $('nav');
  return $('[name=url]').val(storage['pip-url']);
};

updateSettings = function() {
  var $elm, key, results, val;
  $elm = $('#nav');
  settings.url = $('[name=url]').val();
  results = [];
  for (key in settings) {
    val = settings[key];
    results.push(storage[SUFFIX + "-" + key] = val);
  }
  return results;
};

$(function() {
  var options;
  $panoIdList = $('#panoid-list');
  $('#laod-sv').on('click', loadStreeView);
  $('input, textarea').on('change', updateSettings);
  restoreSettings();
  options = {
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  map = new google.maps.Map($('#map')[0], options);
  options = {
    enableCloseButton: false
  };
  svp = new google.maps.StreetViewPanorama($('#svp')[0], options);
  return google.maps.event.addListener(svp, 'pano_changed', onChangePanoId);
});

loadStreeView = function() {
  var panoId, result;
  updateSettings();
  result = urlReg.exec(settings.url);
  panoId = result[1];
  return svp.setPano(panoId);
};

onChangePanoId = function() {
  return $panoIdList.append(svp.getPano() + "<br>");
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhbm9pZC1wYXJzZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsMElBQUE7O0FBQUEsT0FBQSxHQUFVLHlDQUFWLENBQUE7O0FBQUEsT0FDQSxHQUFVLEtBRFYsQ0FBQTs7QUFBQSxNQUVBLEdBQVMsS0FGVCxDQUFBOztBQUFBLE9BS0EsR0FBVSxZQUxWLENBQUE7O0FBQUEsUUFPQSxHQUFXLEVBUFgsQ0FBQTs7QUFBQSxHQVNBLEdBQU0sSUFUTixDQUFBOztBQUFBLEdBVUEsR0FBTSxJQVZOLENBQUE7O0FBQUEsTUFZQSxHQUFTLFlBWlQsQ0FBQTs7QUFBQSxXQWNBLEdBQWMsSUFkZCxDQUFBOztBQUFBLGVBbUJBLEdBQWtCLFNBQUEsR0FBQTtBQUNqQixNQUFBLElBQUE7QUFBQSxFQUFBLElBQUEsR0FBTyxDQUFBLENBQUUsS0FBRixDQUFQLENBQUE7U0FFQSxDQUFBLENBQUUsWUFBRixDQUFlLENBQUMsR0FBaEIsQ0FBb0IsT0FBUSxDQUFBLFNBQUEsQ0FBNUIsRUFIaUI7QUFBQSxDQW5CbEIsQ0FBQTs7QUFBQSxjQTBCQSxHQUFpQixTQUFBLEdBQUE7QUFDaEIsTUFBQSx1QkFBQTtBQUFBLEVBQUEsSUFBQSxHQUFPLENBQUEsQ0FBRSxNQUFGLENBQVAsQ0FBQTtBQUFBLEVBRUEsUUFBUSxDQUFDLEdBQVQsR0FBZSxDQUFBLENBQUUsWUFBRixDQUFlLENBQUMsR0FBaEIsQ0FBQSxDQUZmLENBQUE7QUFJQTtPQUFBLGVBQUE7d0JBQUE7QUFDQyxpQkFBQSxPQUFRLENBQUcsTUFBRCxHQUFRLEdBQVIsR0FBVyxHQUFiLENBQVIsR0FBOEIsSUFBOUIsQ0FERDtBQUFBO2lCQUxnQjtBQUFBLENBMUJqQixDQUFBOztBQUFBLENBa0NBLENBQUUsU0FBQSxHQUFBO0FBRUQsTUFBQSxPQUFBO0FBQUEsRUFBQSxXQUFBLEdBQWMsQ0FBQSxDQUFFLGNBQUYsQ0FBZCxDQUFBO0FBQUEsRUFFQSxDQUFBLENBQUUsVUFBRixDQUFhLENBQUMsRUFBZCxDQUFpQixPQUFqQixFQUEwQixhQUExQixDQUZBLENBQUE7QUFBQSxFQUdBLENBQUEsQ0FBRSxpQkFBRixDQUFvQixDQUFDLEVBQXJCLENBQXdCLFFBQXhCLEVBQWtDLGNBQWxDLENBSEEsQ0FBQTtBQUFBLEVBT0EsZUFBQSxDQUFBLENBUEEsQ0FBQTtBQUFBLEVBU0EsT0FBQSxHQUNDO0FBQUEsSUFBQSxJQUFBLEVBQU0sRUFBTjtBQUFBLElBQ0EsU0FBQSxFQUFXLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BRGpDO0dBVkQsQ0FBQTtBQUFBLEVBYUEsR0FBQSxHQUFVLElBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFaLENBQWlCLENBQUEsQ0FBRSxNQUFGLENBQVUsQ0FBQSxDQUFBLENBQTNCLEVBQStCLE9BQS9CLENBYlYsQ0FBQTtBQUFBLEVBZUEsT0FBQSxHQUNDO0FBQUEsSUFBQSxpQkFBQSxFQUFtQixLQUFuQjtHQWhCRCxDQUFBO0FBQUEsRUFrQkEsR0FBQSxHQUFVLElBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBWixDQUFnQyxDQUFBLENBQUUsTUFBRixDQUFVLENBQUEsQ0FBQSxDQUExQyxFQUE4QyxPQUE5QyxDQWxCVixDQUFBO1NBb0JBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQWxCLENBQThCLEdBQTlCLEVBQW1DLGNBQW5DLEVBQW1ELGNBQW5ELEVBdEJDO0FBQUEsQ0FBRixDQWxDQSxDQUFBOztBQUFBLGFBMkRBLEdBQWdCLFNBQUEsR0FBQTtBQUNmLE1BQUEsY0FBQTtBQUFBLEVBQUEsY0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLEVBRUEsTUFBQSxHQUFTLE1BQU0sQ0FBQyxJQUFQLENBQWEsUUFBUSxDQUFDLEdBQXRCLENBRlQsQ0FBQTtBQUFBLEVBSUEsTUFBQSxHQUFTLE1BQU8sQ0FBQSxDQUFBLENBSmhCLENBQUE7U0FNQSxHQUFHLENBQUMsT0FBSixDQUFhLE1BQWIsRUFQZTtBQUFBLENBM0RoQixDQUFBOztBQUFBLGNBb0VBLEdBQWlCLFNBQUEsR0FBQTtTQUVoQixXQUFXLENBQUMsTUFBWixDQUFvQixHQUFHLENBQUMsT0FBSixDQUFBLENBQUEsR0FBZ0IsTUFBcEMsRUFGZ0I7QUFBQSxDQXBFakIsQ0FBQSIsImZpbGUiOiJwYW5vaWQtcGFyc2VyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiQVBJX0tFWSA9IFwiQUl6YVN5QlEyZHpEZnlGOFkwRHdlLVE2Snp4NF9HNjJBTnJUb3RRXCJcblZFUlNJT04gPSAnMC4xJ1xuU1VGRklYID0gJ3BpcCdcblxuXG5zdG9yYWdlID0gbG9jYWxTdG9yYWdlXG5cbnNldHRpbmdzID0ge31cblxubWFwID0gbnVsbFxuc3ZwID0gbnVsbFxuXG51cmxSZWcgPSAvITFzKC4qKSEyZS9cblxuJHBhbm9JZExpc3QgPSBudWxsXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgaW5pdFxuXG5yZXN0b3JlU2V0dGluZ3MgPSAtPlxuXHQkZWxtID0gJCgnbmF2JylcblxuXHQkKCdbbmFtZT11cmxdJykudmFsIHN0b3JhZ2VbJ3BpcC11cmwnXVxuXG5cdFxuXG51cGRhdGVTZXR0aW5ncyA9IC0+XG5cdCRlbG0gPSAkKCcjbmF2JylcblxuXHRzZXR0aW5ncy51cmwgPSAkKCdbbmFtZT11cmxdJykudmFsKClcblxuXHRmb3Iga2V5LCB2YWwgb2Ygc2V0dGluZ3Ncblx0XHRzdG9yYWdlW1wiI3tTVUZGSVh9LSN7a2V5fVwiXSA9IHZhbFxuXG4kIC0+XG5cblx0JHBhbm9JZExpc3QgPSAkKCcjcGFub2lkLWxpc3QnKVxuXG5cdCQoJyNsYW9kLXN2Jykub24gJ2NsaWNrJywgbG9hZFN0cmVlVmlld1xuXHQkKCdpbnB1dCwgdGV4dGFyZWEnKS5vbiAnY2hhbmdlJywgdXBkYXRlU2V0dGluZ3NcblxuXG5cblx0cmVzdG9yZVNldHRpbmdzKClcblxuXHRvcHRpb25zID0gXG5cdFx0em9vbTogMTZcblx0XHRtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQXG5cblx0bWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCggJCgnI21hcCcpWzBdLCBvcHRpb25zKVxuXG5cdG9wdGlvbnMgPVxuXHRcdGVuYWJsZUNsb3NlQnV0dG9uOiBmYWxzZVxuXG5cdHN2cCA9IG5ldyBnb29nbGUubWFwcy5TdHJlZXRWaWV3UGFub3JhbWEoICQoJyNzdnAnKVswXSwgb3B0aW9ucyApXG5cblx0Z29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoc3ZwLCAncGFub19jaGFuZ2VkJywgb25DaGFuZ2VQYW5vSWQpXG5cblxubG9hZFN0cmVlVmlldyA9IC0+XG5cdHVwZGF0ZVNldHRpbmdzKClcblxuXHRyZXN1bHQgPSB1cmxSZWcuZXhlYyggc2V0dGluZ3MudXJsIClcblxuXHRwYW5vSWQgPSByZXN1bHRbMV1cblx0XG5cdHN2cC5zZXRQYW5vKCBwYW5vSWQgKVxuXG5vbkNoYW5nZVBhbm9JZCA9IC0+XG5cblx0JHBhbm9JZExpc3QuYXBwZW5kKCBzdnAuZ2V0UGFubygpICsgXCI8YnI+XCIgKSJdfQ==