var $autosearch, $status, API_KEY, FPS, SUFFIX, VERSION, bLinkUpdate, clear, cntMarker, exportJson, list, load, map, onChangePanoId, onLinksChanged, onPositionChanged, prevId, restoreSettings, settings, storage, svp, undo, updateSettings, updateStatus, urlReg;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

VERSION = '0.1';

SUFFIX = 'pip';

FPS = 24.0;

storage = localStorage;

settings = {};

map = null;

svp = null;

urlReg = /!1s(.*)!2e/;

list = [];

$status = null;

$autosearch = null;

prevId = '';

cntMarker = null;

bLinkUpdate = false;

restoreSettings = function() {
  var $elm;
  $elm = $('nav');
  $('[name=url]').val(storage['pip-url']);
  return $('[name=autosearch').val(storage['pip-autosearch']);
};

updateSettings = function() {
  var $elm, key, results, val;
  $elm = $('#nav');
  $autosearch = $('[name=autosearch');
  settings.url = $('[name=url]').val();
  settings.autosearch = $('[name=autosearch]').prop('checked');
  results = [];
  for (key in settings) {
    val = settings[key];
    results.push(storage[SUFFIX + "-" + key] = val);
  }
  return results;
};

$(function() {
  var options;
  $status = $('#status');
  $('#laod').on('click', load);
  $('#clear').on('click', clear);
  $('#export').on('click', exportJson);
  $('#undo').on('click', undo);
  $('input, textarea').on('change', updateSettings);
  restoreSettings();
  options = {
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  map = new google.maps.Map($('#map')[0], options);
  options = {
    enableCloseButton: false
  };
  svp = new google.maps.StreetViewPanorama($('#svp')[0], options);
  cntMarker = new google.maps.Marker({
    map: map,
    icon: 'http://www.googlemapsmarkers.com/v1/009900'
  });
  google.maps.event.addListener(svp, 'pano_changed', onChangePanoId);
  google.maps.event.addListener(svp, 'position_changed', onPositionChanged);
  return google.maps.event.addListener(svp, 'links_changed', onLinksChanged);
});

clear = function() {
  list = [];
  prevId = '';
  return updateStatus();
};

exportJson = function() {
  var json;
  json = JSON.stringify(list);
  return $('#json').html(json);
};

load = function() {
  var panoId, result;
  updateSettings();
  result = urlReg.exec(settings.url);
  panoId = result[1];
  return svp.setPano(panoId);
};

undo = function() {
  return null;
};

updateStatus = function() {
  return $status.html("count: " + list.length + "<br>duration: " + ((list.length / FPS).toPrecision(2)));
};

onChangePanoId = function() {
  return null;
};

onPositionChanged = function() {
  return null;
};

onLinksChanged = function() {
  var id, l, links, marker, nextId, pos;
  links = svp.getLinks();
  if (!bLinkUpdate) {
    links = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = links.length; i < len; i++) {
        l = links[i];
        if (l.pano !== prevId) {
          results.push(l);
        }
      }
      return results;
    })();
    bLinkUpdate = true;
    svp.setLinks(links);
    return;
  }
  bLinkUpdate = false;
  pos = svp.getPosition();
  id = svp.getPano();
  list.push(id);
  marker = new google.maps.Marker({
    position: pos,
    map: map,
    title: "" + (list.length - 1)
  });
  map.setCenter(pos);
  cntMarker.setPosition(pos);
  updateStatus();
  nextId = void 0;
  if ($autosearch.prop('checked')) {
    if (links.length === 1) {
      nextId = links[0].pano;
    }
  }
  prevId = svp.getPano();
  if (nextId != null) {
    return svp.setPano(nextId);
  }
};

//# sourceMappingURL=data:application/json;base64,