var $addList, $autosearch, $status, API_KEY, FPS, SUFFIX, VERSION, bLinkUpdate, clear, cntMarker, exportJson, list, load, map, onLinksChanged, prevDate, prevId, restoreSettings, service, settings, storage, svp, updateSettings, updateStatus, urlReg;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

VERSION = '0.1';

SUFFIX = 'pip';

FPS = 24.0;

storage = localStorage;

settings = {};

map = null;

svp = null;

urlReg = /!1s(.*)!2e/;

list = [];

$status = null;

$autosearch = null;

$addList = null;

prevId = '';

cntMarker = null;

bLinkUpdate = false;

prevDate = null;

service = new google.maps.StreetViewService();

restoreSettings = function() {
  var $elm;
  $elm = $('nav');
  $('[name=url]').val(storage['pip-url']);
  $('[name=addlist]').prop('checked', storage['pip-addlist']);
  return $('[name=autosearch').prop('checked', storage['pip-autosearch']);
};

updateSettings = function() {
  var $elm, key, val;
  $elm = $('#nav');
  settings.url = $('[name=url]').val();
  settings.addlist = $('[name=addlist]').prop('checked');
  settings.autosearch = $('[name=autosearch]').prop('checked');
  for (key in settings) {
    val = settings[key];
    storage[SUFFIX + "-" + key] = val;
  }
  return console.log(storage);
};

$(function() {
  var options;
  $status = $('#status');
  $autosearch = $('[name=autosearch');
  $addList = $('[name=addlist]');
  $('#laod').on('click', load);
  $('#clear').on('click', clear);
  $('#export').on('click', exportJson);
  $('input, textarea').on('change', updateSettings);
  restoreSettings();
  options = {
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  map = new google.maps.Map($('#map')[0], options);
  options = {
    enableCloseButton: false,
    imageDateControl: true
  };
  svp = new google.maps.StreetViewPanorama($('#svp')[0], options);
  cntMarker = new google.maps.Marker({
    map: map,
    icon: 'http://www.googlemapsmarkers.com/v1/009900'
  });
  return google.maps.event.addListener(svp, 'links_changed', onLinksChanged);
});

clear = function() {
  list = [];
  prevId = '';
  return updateStatus();
};

exportJson = function() {
  var json;
  json = JSON.stringify(list);
  return $('#json').html(json);
};

load = function() {
  var panoId, result;
  updateSettings();
  result = urlReg.exec(settings.url);
  panoId = result[1];
  return svp.setPano(panoId);
};

updateStatus = function() {
  return $status.html("count: " + list.length + "<br>duration: " + ((list.length / FPS).toPrecision(2)));
};

onLinksChanged = function() {
  var id, l, links, pos;
  links = svp.getLinks();
  if (!bLinkUpdate) {
    links = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = links.length; i < len; i++) {
        l = links[i];
        if (l.pano !== prevId) {
          results.push(l);
        }
      }
      return results;
    })();
    bLinkUpdate = true;
    svp.setLinks(links);
    return;
  }
  bLinkUpdate = false;
  pos = svp.getPosition();
  id = svp.getPano();
  return service.getPanoramaById(id, (function(_this) {
    return function(data, status) {
      var date, marker, nextId;
      if (status !== google.maps.StreetViewStatus.OK) {
        alert('cannot retrive pano id');
        return;
      }
      date = data.imageDate;
      console.log(date);
      if ((prevDate != null) && date !== prevDate) {
        if (!confirm('imageDate changed. continue?')) {
          prevDate = date;
          return;
        }
      }
      prevDate = date;
      map.setCenter(pos);
      cntMarker.setPosition(pos);
      if ($addList.prop('checked')) {
        list.push(id);
        marker = new google.maps.Marker({
          position: pos,
          map: map,
          title: "" + (list.length - 1)
        });
        updateStatus();
      }
      nextId = void 0;
      if ($autosearch.prop('checked')) {
        if (links.length === 1) {
          nextId = links[0].pano;
        }
      }
      prevId = svp.getPano();
      if (nextId != null) {
        return svp.setPano(nextId);
      }
    };
  })(this));
};

//# sourceMappingURL=data:application/json;base64,