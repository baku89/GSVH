var API_KEY, PROXY_HEIGHT, TAG_HEIGHT, V_SCALE, err, fs, gui, mkdirp, nativeMenuBar, notifier, path, saveCanvas, searchNearestPano, searchRadius, win;

fs = require('fs');

path = require('path');

gui = require('nw.gui');

mkdirp = require('mkdirp');

notifier = require('node-notifier');

TAG_HEIGHT = 40.0;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

PROXY_HEIGHT = 832.0;

V_SCALE = (TAG_HEIGHT + PROXY_HEIGHT) / PROXY_HEIGHT;

win = gui.Window.get();

nativeMenuBar = new gui.Menu({
  type: 'menubar'
});

try {
  nativeMenuBar.createMacBuiltin('gi-eye');
  win.menu = nativeMenuBar;
} catch (_error) {
  err = _error;
  console.log(err.message);
}

saveCanvas = function(canvas, dest) {
  var base64, dir;
  base64 = canvas.toDataURL().replace(/^data:image\/\w+;base64,/, "");
  dir = path.dirname(dest);
  return mkdirp(dir, function(err) {
    if (err) {
      return console.error(err);
    } else {
      return fs.writeFileSync(dest, base64, 'base64');
    }
  });
};

searchRadius = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 400, 800];

searchNearestPano = function(origin, callback) {
  var complete, i, j, len, r, radius, remain, result;
  radius = 1;
  result = [];
  remain = searchRadius.length;
  console.log("searchNearestPano: " + origin);
  for (i = j = 0, len = searchRadius.length; j < len; i = ++j) {
    r = searchRadius[i];
    console.log(r);
    setTimeout(function() {
      return ss.getPanoramaByLocation(origin, r, function(data, status) {
        if (status === google.maps.StreetViewStatus.OK) {
          data = {
            id: data.location.pano,
            latLng: data.location.latLng,
            distance: google.maps.geometry.spherical.computeDistanceBetween(origin, data.location.latLng)
          };
          result.push(data);
        }
        if (--remain === 0) {
          return complete();
        }
      });
    }, 50 * i);
  }
  return complete = function() {
    var k, latLng, len1, minDist, pano;
    minDist = 100000000;
    pano = null;
    latLng = null;
    for (k = 0, len1 = result.length; k < len1; k++) {
      r = result[k];
      if (r.distance < minDist) {
        minDist = r.distance;
        pano = r.id;
        latLng = r.latLng;
      }
    }
    return callback(pano, latLng, minDist);
  };
};

//# sourceMappingURL=data:application/json;base64,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QUFDLElBQVAsQ0FBYSxJQUFiLEVBTkQ7O1FBUUEsSUFBRyxFQUFFLE1BQUYsS0FBWSxDQUFmO2lCQUNDLFFBQUEsQ0FBQSxFQUREOztNQVRtQyxDQUFwQztJQURVLENBQVgsRUFhRSxFQUFBLEdBQUssQ0FiUDtBQUZEO1NBaUJBLFFBQUEsR0FBVyxTQUFBO0FBRVYsUUFBQTtJQUFBLE9BQUEsR0FBVTtJQUNWLElBQUEsR0FBTztJQUNQLE1BQUEsR0FBUztBQUVULFNBQUEsMENBQUE7O01BQ0MsSUFBRyxDQUFDLENBQUMsUUFBRixHQUFhLE9BQWhCO1FBQ0MsT0FBQSxHQUFVLENBQUMsQ0FBQztRQUNaLElBQUEsR0FBTyxDQUFDLENBQUM7UUFDVCxNQUFBLEdBQVMsQ0FBQyxDQUFDLE9BSFo7O0FBREQ7V0FNQSxRQUFBLENBQVMsSUFBVCxFQUFlLE1BQWYsRUFBdUIsT0FBdkI7RUFaVTtBQTFCUSIsImZpbGUiOiJjb21tb24uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJmcyBcdFx0PSByZXF1aXJlICdmcydcbnBhdGhcdD0gcmVxdWlyZSAncGF0aCdcbmd1aSBcdD0gcmVxdWlyZSAnbncuZ3VpJ1xubWtkaXJwIFx0PSByZXF1aXJlICdta2RpcnAnXG5ub3RpZmllcj0gcmVxdWlyZSAnbm9kZS1ub3RpZmllcidcblxuVEFHX0hFSUdIVCA9IDQwLjBcblxuQVBJX0tFWSA9IFwiQUl6YVN5QlEyZHpEZnlGOFkwRHdlLVE2Snp4NF9HNjJBTnJUb3RRXCJcblxuUFJPWFlfSEVJR0hUID0gODMyLjBcblZfU0NBTEUgPSAoVEFHX0hFSUdIVCArIFBST1hZX0hFSUdIVCkgLyBQUk9YWV9IRUlHSFRcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyB3aW5kb3cgc2V0dXBcblxud2luID0gZ3VpLldpbmRvdy5nZXQoKVxubmF0aXZlTWVudUJhciA9IG5ldyBndWkuTWVudSh7dHlwZTogJ21lbnViYXInfSlcblxudHJ5XG5cdG5hdGl2ZU1lbnVCYXIuY3JlYXRlTWFjQnVpbHRpbignZ2ktZXllJylcblx0d2luLm1lbnUgPSBuYXRpdmVNZW51QmFyXG5jYXRjaCBlcnJcblx0Y29uc29sZS5sb2cgZXJyLm1lc3NhZ2VcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuc2F2ZUNhbnZhcyA9IChjYW52YXMsIGRlc3QpIC0+XG5cdGJhc2U2NCA9IGNhbnZhcy50b0RhdGFVUkwoKS5yZXBsYWNlKC9eZGF0YTppbWFnZVxcL1xcdys7YmFzZTY0LC8sIFwiXCIpXG5cblx0ZGlyID0gcGF0aC5kaXJuYW1lKGRlc3QpXG5cblx0bWtkaXJwIGRpciwgKGVycikgLT5cblx0XHRpZiBlcnJcblx0XHRcdGNvbnNvbGUuZXJyb3IgZXJyXG5cdFx0ZWxzZVxuXHRcdFx0ZnMud3JpdGVGaWxlU3luYyhkZXN0LCBiYXNlNjQsICdiYXNlNjQnKVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIHNlYXJjaCBuZWFyZXN0IHBhbm9cbnNlYXJjaFJhZGl1cyA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAyMCwgMzAsIDQwLCA1MCwgNjAsIDcwLCA4MCwgOTAsIDEwMCwgMjAwLCA0MDAsIDgwMF1cbnNlYXJjaE5lYXJlc3RQYW5vID0gKG9yaWdpbiwgY2FsbGJhY2spIC0+XG5cblx0cmFkaXVzID0gMVxuXG5cdHJlc3VsdCA9IFtdXG5cdHJlbWFpbiA9IHNlYXJjaFJhZGl1cy5sZW5ndGhcblxuXHRjb25zb2xlLmxvZyBcInNlYXJjaE5lYXJlc3RQYW5vOiAje29yaWdpbn1cIlxuXG5cdGZvciByLCBpIGluIHNlYXJjaFJhZGl1c1xuXHRcdGNvbnNvbGUubG9nIHJcblx0XHRzZXRUaW1lb3V0IC0+XG5cdFx0XHRzcy5nZXRQYW5vcmFtYUJ5TG9jYXRpb24gb3JpZ2luLCByLCAoZGF0YSwgc3RhdHVzKSAtPlxuXHRcdFx0XHRpZiBzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuU3RyZWV0Vmlld1N0YXR1cy5PS1xuXHRcdFx0XHRcdGRhdGEgPVxuXHRcdFx0XHRcdFx0aWQ6IGRhdGEubG9jYXRpb24ucGFub1xuXHRcdFx0XHRcdFx0bGF0TG5nOiBkYXRhLmxvY2F0aW9uLmxhdExuZ1xuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGdvb2dsZS5tYXBzLmdlb21ldHJ5LnNwaGVyaWNhbC5jb21wdXRlRGlzdGFuY2VCZXR3ZWVuKG9yaWdpbiwgZGF0YS5sb2NhdGlvbi5sYXRMbmcpXG5cblx0XHRcdFx0XHRyZXN1bHQucHVzaCggZGF0YSApXG5cblx0XHRcdFx0aWYgLS1yZW1haW4gPT0gMFxuXHRcdFx0XHRcdGNvbXBsZXRlKClcblxuXHRcdCwgNTAgKiBpXG5cblx0Y29tcGxldGUgPSAtPlxuXHRcdFxuXHRcdG1pbkRpc3QgPSAxMDAwMDAwMDBcblx0XHRwYW5vID0gbnVsbFxuXHRcdGxhdExuZyA9IG51bGxcblxuXHRcdGZvciByIGluIHJlc3VsdFxuXHRcdFx0aWYgci5kaXN0YW5jZSA8IG1pbkRpc3Rcblx0XHRcdFx0bWluRGlzdCA9IHIuZGlzdGFuY2Vcblx0XHRcdFx0cGFubyA9IHIuaWRcblx0XHRcdFx0bGF0TG5nID0gci5sYXRMbmdcblxuXHRcdGNhbGxiYWNrKHBhbm8sIGxhdExuZywgbWluRGlzdCkiXX0=