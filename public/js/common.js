var API_KEY, PROXY_HEIGHT, TAG_HEIGHT, V_SCALE, err, fs, gui, mkdirp, nativeMenuBar, notifier, path, saveCanvas, searchNearestPano, searchRadius, win;

fs = require('fs');

path = require('path');

gui = require('nw.gui');

mkdirp = require('mkdirp');

notifier = require('node-notifier');

TAG_HEIGHT = 40.0;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

PROXY_HEIGHT = 832.0;

V_SCALE = (TAG_HEIGHT + PROXY_HEIGHT) / PROXY_HEIGHT;

win = gui.Window.get();

nativeMenuBar = new gui.Menu({
  type: 'menubar'
});

try {
  nativeMenuBar.createMacBuiltin('gi-eye');
  win.menu = nativeMenuBar;
} catch (_error) {
  err = _error;
  console.log(err.message);
}

saveCanvas = function(canvas, dest) {
  var base64, dir;
  base64 = canvas.toDataURL().replace(/^data:image\/\w+;base64,/, "");
  dir = path.dirname(dest);
  return mkdirp(dir, function(err) {
    if (err) {
      return console.error(err);
    } else {
      return fs.writeFileSync(dest, base64, 'base64');
    }
  });
};

searchRadius = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100];

searchNearestPano = function(origin, callback) {
  var complete, i, j, len, r, radius, remain, result;
  radius = 1;
  result = [];
  remain = searchRadius.length;
  console.log("searchNearestPano: " + origin);
  for (i = j = 0, len = searchRadius.length; j < len; i = ++j) {
    r = searchRadius[i];
    console.log(r);
    setTimeout(function() {
      return ss.getPanoramaByLocation(origin, r, function(data, status) {
        if (status === google.maps.StreetViewStatus.OK) {
          data = {
            id: data.location.pano,
            latLng: data.location.latLng,
            distance: google.maps.geometry.spherical.computeDistanceBetween(origin, data.location.latLng)
          };
          result.push(data);
        }
        if (--remain === 0) {
          return complete();
        }
      });
    }, 50 * i);
  }
  return complete = function() {
    var k, latLng, len1, minDist, pano;
    minDist = 100000000;
    pano = null;
    latLng = null;
    for (k = 0, len1 = result.length; k < len1; k++) {
      r = result[k];
      if (r.distance < minDist) {
        minDist = r.distance;
        pano = r.id;
        latLng = r.latLng;
      }
    }
    return callback(pano, latLng, minDist);
  };
};

//# sourceMappingURL=data:application/json;base64,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dUIsT0FBdkIsRUFaVTtFQUFBLEVBMUJRO0FBQUEsQ0F4Q3BCLENBQUEiLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiZnMgXHRcdD0gcmVxdWlyZSAnZnMnXG5wYXRoXHQ9IHJlcXVpcmUgJ3BhdGgnXG5ndWkgXHQ9IHJlcXVpcmUgJ253Lmd1aSdcbm1rZGlycCBcdD0gcmVxdWlyZSAnbWtkaXJwJ1xubm90aWZpZXI9IHJlcXVpcmUgJ25vZGUtbm90aWZpZXInXG5cblRBR19IRUlHSFQgPSA0MC4wXG5cbkFQSV9LRVkgPSBcIkFJemFTeUJRMmR6RGZ5RjhZMER3ZS1RNkp6eDRfRzYyQU5yVG90UVwiXG5cblBST1hZX0hFSUdIVCA9IDgzMi4wXG5WX1NDQUxFID0gKFRBR19IRUlHSFQgKyBQUk9YWV9IRUlHSFQpIC8gUFJPWFlfSEVJR0hUXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgd2luZG93IHNldHVwXG5cbndpbiA9IGd1aS5XaW5kb3cuZ2V0KClcbm5hdGl2ZU1lbnVCYXIgPSBuZXcgZ3VpLk1lbnUoe3R5cGU6ICdtZW51YmFyJ30pXG5cbnRyeVxuXHRuYXRpdmVNZW51QmFyLmNyZWF0ZU1hY0J1aWx0aW4oJ2dpLWV5ZScpXG5cdHdpbi5tZW51ID0gbmF0aXZlTWVudUJhclxuY2F0Y2ggZXJyXG5cdGNvbnNvbGUubG9nIGVyci5tZXNzYWdlXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnNhdmVDYW52YXMgPSAoY2FudmFzLCBkZXN0KSAtPlxuXHRiYXNlNjQgPSBjYW52YXMudG9EYXRhVVJMKCkucmVwbGFjZSgvXmRhdGE6aW1hZ2VcXC9cXHcrO2Jhc2U2NCwvLCBcIlwiKVxuXG5cdGRpciA9IHBhdGguZGlybmFtZShkZXN0KVxuXG5cdG1rZGlycCBkaXIsIChlcnIpIC0+XG5cdFx0aWYgZXJyXG5cdFx0XHRjb25zb2xlLmVycm9yIGVyclxuXHRcdGVsc2Vcblx0XHRcdGZzLndyaXRlRmlsZVN5bmMoZGVzdCwgYmFzZTY0LCAnYmFzZTY0JylcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBzZWFyY2ggbmVhcmVzdCBwYW5vXG5zZWFyY2hSYWRpdXMgPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMjAsIDMwLCA0MCwgNTAsIDYwLCA3MCwgODAsIDkwLCAxMDBdXG5zZWFyY2hOZWFyZXN0UGFubyA9IChvcmlnaW4sIGNhbGxiYWNrKSAtPlxuXG5cdHJhZGl1cyA9IDFcblxuXHRyZXN1bHQgPSBbXVxuXHRyZW1haW4gPSBzZWFyY2hSYWRpdXMubGVuZ3RoXG5cblx0Y29uc29sZS5sb2cgXCJzZWFyY2hOZWFyZXN0UGFubzogI3tvcmlnaW59XCJcblxuXHRmb3IgciwgaSBpbiBzZWFyY2hSYWRpdXNcblx0XHRjb25zb2xlLmxvZyByXG5cdFx0c2V0VGltZW91dCAtPlxuXHRcdFx0c3MuZ2V0UGFub3JhbWFCeUxvY2F0aW9uIG9yaWdpbiwgciwgKGRhdGEsIHN0YXR1cykgLT5cblx0XHRcdFx0aWYgc3RhdHVzID09IGdvb2dsZS5tYXBzLlN0cmVldFZpZXdTdGF0dXMuT0tcblx0XHRcdFx0XHRkYXRhID1cblx0XHRcdFx0XHRcdGlkOiBkYXRhLmxvY2F0aW9uLnBhbm9cblx0XHRcdFx0XHRcdGxhdExuZzogZGF0YS5sb2NhdGlvbi5sYXRMbmdcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiBnb29nbGUubWFwcy5nZW9tZXRyeS5zcGhlcmljYWwuY29tcHV0ZURpc3RhbmNlQmV0d2VlbihvcmlnaW4sIGRhdGEubG9jYXRpb24ubGF0TG5nKVxuXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goIGRhdGEgKVxuXG5cdFx0XHRcdGlmIC0tcmVtYWluID09IDBcblx0XHRcdFx0XHRjb21wbGV0ZSgpXG5cblx0XHQsIDUwICogaVxuXG5cdGNvbXBsZXRlID0gLT5cblx0XHRcblx0XHRtaW5EaXN0ID0gMTAwMDAwMDAwXG5cdFx0cGFubyA9IG51bGxcblx0XHRsYXRMbmcgPSBudWxsXG5cblx0XHRmb3IgciBpbiByZXN1bHRcblx0XHRcdGlmIHIuZGlzdGFuY2UgPCBtaW5EaXN0XG5cdFx0XHRcdG1pbkRpc3QgPSByLmRpc3RhbmNlXG5cdFx0XHRcdHBhbm8gPSByLmlkXG5cdFx0XHRcdGxhdExuZyA9IHIubGF0TG5nXG5cblx0XHRjYWxsYmFjayhwYW5vLCBsYXRMbmcsIG1pbkRpc3QpIl19