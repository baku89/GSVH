var API_KEY, GSVHyperlapse, TAG_HEIGHT, getFollowedPath, pointOnLine,
  slice = [].slice;

Number.prototype.toRad = function() {
  return this * Math.PI / 180;
};

Number.prototype.toDeg = function() {
  return this * 180 / Math.PI;
};

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

TAG_HEIGHT = 40;

pointOnLine = function(t, a, b) {
  var lat1, lat2, lng1, lng2, x, y;
  lat1 = a.lat().toRad();
  lng1 = a.lng().toRad();
  lat2 = b.lat().toRad();
  lng2 = b.lng().toRad();
  x = lat1 + t * (lat2 - lat1);
  y = lng1 + t * (lng2 - lng1);
  return new google.maps.LatLng(x.toDeg(), y.toDeg());
};

getFollowedPath = function(m, a, b) {
  var d, t;
  d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
  if (m < 0 || d < m) {
    alert("error getFolowedPath");
  }
  t = m / d;
  return pointOnLine(t, a, b);
};

function uniqueID(){
	var randam = Math.floor(Math.random()*1000)
	var date = new Date();
	var time = date.getTime();
	return randam + time.toString();
};

GSVHyperlapse = (function() {
  var _class;

  GSVHyperlapse.API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

  GSVHyperlapse.DIST_BETWEEN_PTS = 5;

  GSVHyperlapse.MAX_PTS = 100;

  GSVHyperlapse.dirService = new google.maps.DirectionsService({});

  GSVHyperlapse.dirRegex = /dir\/([0-9.-]*),([0-9.-]*)\/([0-9.-]*),([0-9.-]*)\/@([0-9.-]*),([0-9.-]*),([0-9]*)z\/data=(.*)$/;

  GSVHyperlapse.dataRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/g;

  GSVHyperlapse.dataLatLngRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/;

  GSVHyperlapse.ldr = new GSVPANO.PanoLoader();

  GSVHyperlapse.ldrStack = [];

  _class = GSVHyperlapse;

  GSVHyperlapse.onError = function(err) {
    return alert("error");
  };

  GSVHyperlapse.onMessage = function() {
    return null;
  };

  GSVHyperlapse.onPanoramaLoad = function() {
    return null;
  };

  GSVHyperlapse.onAnalyzeComplete = function() {
    return null;
  };

  GSVHyperlapse.onProgress = function() {
    return null;
  };

  GSVHyperlapse.onCancel = function() {
    return null;
  };

  function GSVHyperlapse(args) {
    this.url = args.url;
    this.name = args.name;
    this.step = parseFloat(args.step);
    this.quality = args.zoom;
    this.bCancel = false;
    this.bWaiting = false;
    this.searchRadius = args.searchRadius;
    this.uniqueId = uniqueID();
    if (args.travelMode === 'driving') {
      this.travelMode = google.maps.DirectionsTravelMode.DRIVING;
    } else if (args.travelMode === 'walking') {
      this.travelMode = google.maps.DirectionsTravelMode.WALKING;
    }
  }

  GSVHyperlapse.prototype.setMap = function(elm) {
    return this.mapElm = elm;
  };

  GSVHyperlapse.prototype.cancel = function() {
    this.bCancel = true;
    if (!this.bWaiting) {
      return _class.onCancel.call(this);
    }
  };

  GSVHyperlapse.prototype.trace = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, ["[" + this.name + "]"].concat(slice.call(args)));
  };

  GSVHyperlapse.prototype.traceBold = function(str) {
    return console.log("%c[" + this.name + "] " + str + " --------------------", "color:orange;font-weight:bold;");
  };

  GSVHyperlapse.prototype.createFromDirection = function(url) {
    var i, m, r, req, result, wp;
    this.traceBold("createFromDirection");
    result = _class.dirRegex.exec(url);
    if (result == null) {
      alert("cannot parse url");
      return;
    }
    this.origin = new google.maps.LatLng(result[1], result[2]);
    this.destination = new google.maps.LatLng(result[3], result[4]);
    this.centroid = new google.maps.LatLng(result[5], result[6]);
    this.zoom = parseInt(result[7]);
    this.trace("origin: " + this.origin, "destination: " + this.destination);
    req = {
      origin: this.origin,
      destination: this.destination,
      travelMode: this.travelMode
    };
    this.waypoints = [];
    if ((result = result[8].match(GSVHyperlapse.dataRegex)) != null) {
      for (i in result) {
        r = result[i];
        m = GSVHyperlapse.dataLatLngRegex.exec(r);
        wp = new google.maps.LatLng(m[2], m[1]);
        this.waypoints.push({
          location: wp.toString(),
          stopover: false
        });
      }
      this.trace("num of waypoints:", this.waypoints.length);
      req.waypoints = this.waypoints;
    }
    this.trace("request:", req);
    return GSVHyperlapse.dirService.route(req, (function(_this) {
      return function(res, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          return _this.create(res);
        } else {
          return _class.onMessage.call(_this, "cannot get route.");
        }
      };
    })(this));
  };

  GSVHyperlapse.prototype.create = function(res) {
    this.bWaiting = true;
    this.traceBold("create");
    this.map = new google.maps.Map(this.mapElm, {
      center: this.centroid,
      zoom: this.zoom,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    return this.analyze(res);
  };

  GSVHyperlapse.prototype.analyze = function(res) {
    var a, b, d, i, j, m, path, pt, r, ref, route;
    if (this.bCancel) {
      _class.onCancel.call(this);
      return;
    }
    this.traceBold("analyze");
    _class.onMessage.call(this, "analyzing route..");
    this.trace(res.routes);
    this.rawPts = [];
    route = res.routes[0];
    path = route.overview_path;
    _class.onMessage.call(this, "<strong>path length: " + (parseInt(google.maps.geometry.spherical.computeLength(path))) + "(m), step: " + this.step + "(m), search radius: " + this.searchRadius + " (m)</strong>");
    d = 0;
    r = 0;
    m = 0;
    a = b = null;
    this.trace("total distance:", totalDist);
    for (i = j = 0, ref = path.length - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      a = path[i];
      b = path[i + 1];
      d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
      m = -r + this.step;
      if (d < m) {
        r += d;
      } else {
        while (m < d) {
          pt = getFollowedPath(m, a, b);
          this.rawPts.push(pt);
          m += this.step;
        }
        r = this.step - (m - d);
      }
    }
    this.trace("points:", this.rawPts.length);
    this.traceBold("fetch panoramas");
    this.map.fitBounds(route.bounds);
    path = new google.maps.Polyline({
      path: path,
      strokeColor: '#000000',
      strokeOpacity: 1.0,
      strokeWeight: 2
    });
    path.setMap(this.map);
    _class.onMessage.call(this, "num of waypoints: " + this.rawPts.length);
    return this.getPanoInfoOnWay();
  };

  GSVHyperlapse.prototype.getPanoInfoOnWay = function() {
    var idx, onError, onLoad, prevId;
    if (this.bCancel) {
      _class.onCancel.call(this);
      return;
    }
    _class.onMessage.call(this, "retriving pano id..");
    idx = 0;
    this.panoList = [];
    onError = (function(_this) {
      return function(msg) {
        return null;
      };
    })(this);
    onLoad = (function(_this) {
      return function() {
        var id, marker, pano, prevId;
        if (_this.bCancel) {
          _class.onCancel.call(_this);
          return;
        }
        id = _this.loader.id;
        _class.onProgress.call(_this, idx, _this.rawPts.length);
        if ((id != null) && id !== prevId) {
          pano = {
            id: id,
            rotation: _this.loader.rotation,
            pitch: _this.loader.pitch,
            lat: _this.loader.location.lat(),
            lng: _this.loader.location.lng()
          };
          _this.panoList.push(pano);
          marker = new google.maps.Marker({
            position: _this.loader.location,
            map: _this.map,
            title: "" + idx
          });
          prevId = id;
        }
        if (++idx < _this.rawPts.length) {
          return _this.loader.load(_this.rawPts[idx], onLoad);
        } else {
          _class.onMessage.call(_this, "total pano id: " + _this.panoList.length);
          _this.bWaiting = false;
          _class.onProgress.call(_this, idx, _this.rawPts.length);
          return _class.onAnalyzeComplete.call(_this);
        }
      };
    })(this);
    this.loader = new GSVPANO.PanoLoader({
      zoom: this.quality,
      searchRadius: this.searchRadius
    });
    this.loader.onError = onError;
    this.loader.onNoPanoramaData = onError;
    this.bWaiting = true;
    prevId = '';
    return this.loader.load(this.rawPts[idx], onLoad);
  };

  GSVHyperlapse.prototype.compose = function() {
    var idx, onCompose, writeToTag;
    if (this.panoList.length === 0) {
      _class.onMessage.call(this, "there is no pano id");
      return;
    }
    this.tagCanvas = document.createElement('canvas');
    this.tagCanvas.width = this.loader.width;
    this.tagCanvas.height = TAG_HEIGHT;
    this.tagCtx = this.tagCanvas.getContext('2d');
    this.glsl = Glsl({
      canvas: document.createElement('canvas'),
      fragment: document.getElementById("pano-rotation").textContent,
      variables: {
        rotation: 0.0,
        pitch: 0.0,
        original: this.loader.canvas,
        tag: this.tagCanvas
      }
    });
    this.glsl.setSize(this.loader.width, this.loader.height + TAG_HEIGHT);
    _class.onMessage.call(this, "composing panorama.. size:" + this.loader.width + "x" + this.loader.height);
    writeToTag = (function(_this) {
      return function(name, value, x, y) {
        _this.tagCtx.fillStyle = '#ffffff';
        _this.tagCtx.fillText(value, x + 40, y);
        _this.tagCtx.fillStyle = '#ff0000';
        return _this.tagCtx.fillText(name, x, y);
      };
    })(this);
    onCompose = (function(_this) {
      return function() {
        var cursor;
        console.log(idx);
        if (_this.bCancel) {
          _class.onCancel.call(_this);
          return;
        }
        _this.tagCtx.fillStyle = '#000000';
        _this.tagCtx.fillRect(0, 0, _this.tagCanvas.width, _this.tagCanvas.height);
        _this.tagCtx.fillStyle = '#ffffff';
        _this.tagCtx.font = '12px Arial';
        cursor = 0;
        writeToTag("uid", "" + _this.uniqueId, cursor++ * 0xff, 36);
        writeToTag("lat", "" + (_this.panoList[idx].lng.toPrecision(17)), cursor++ * 0xff, 36);
        writeToTag("lng", "" + (_this.panoList[idx].lng.toPrecision(17)), cursor++ * 0xff, 36);
        writeToTag("hdng", "" + 0., cursor++ * 0xff, 36);
        writeToTag("pitch", "" + 0., cursor++ * 0xff, 36);
        writeToTag("date", "2014-04", cursor++ * 0xff, 36);
        cursor = 0;
        writeToTag("zoom", "" + _this.quality, cursor++ * 0xff, 18);
        $('body').append(_this.tagCanvas);
        _this.glsl.set('rotation', _this.panoList[idx].rotation);
        _this.glsl.set('pitch', _this.panoList[idx].pitch);
        _this.glsl.syncAll();
        _this.glsl.render();
        console.log(_this.loader.rotation, _this.loader.pitch);
        _class.onProgress.call(_this, idx, _this.panoList.length);
        _class.onPanoramaLoad.call(_this, idx, _this.glsl.canvas);
        if (++idx < _this.panoList.length) {
          return setTimeout(function() {
            return _this.loader.composePanorama(_this.panoList[idx].id);
          }, 100);
        } else {
          _this.bWaiting = false;
          _this.traceBold("complete");
          _this.trace("total panorama:", _this.panoList.length);
          _class.onProgress.call(_this, idx, _this.panoList.length);
          return _class.onMessage.call(_this, "complete - total: " + _this.panoList.length + ", duration: " + (_this.panoList.length / 24));
        }
      };
    })(this);
    this.loader.onError = function(msg) {
      return console.log(msg);
    };
    this.loader.onPanoramaLoad = onCompose;
    this.loader.onNoPanoramaData = function(status) {
      return console.log(status);
    };
    idx = 0;
    this.bWaiting = true;
    return this.loader.composePanorama(this.panoList[idx].id);
  };

  return GSVHyperlapse;

})();

//# sourceMappingURL=data:application/json;base64,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QUF0QyxHQUFtRCxDQUFDLEtBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixHQUFtQixFQUFwQixDQUE1RSxFQVhEO1NBeENXO01BQUEsRUFBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0E5QlosQ0FBQTtBQUFBLElBbUZBLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixHQUFrQixTQUFDLEdBQUQsR0FBQTthQUNqQixPQUFPLENBQUMsR0FBUixDQUFZLEdBQVosRUFEaUI7SUFBQSxDQW5GbEIsQ0FBQTtBQUFBLElBcUZBLElBQUMsQ0FBQSxNQUFNLENBQUMsY0FBUixHQUF5QixTQXJGekIsQ0FBQTtBQUFBLElBc0ZBLElBQUMsQ0FBQSxNQUFNLENBQUMsZ0JBQVIsR0FBMkIsU0FBQyxNQUFELEdBQUE7YUFDMUIsT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFaLEVBRDBCO0lBQUEsQ0F0RjNCLENBQUE7QUFBQSxJQXlGQSxHQUFBLEdBQU0sQ0F6Rk4sQ0FBQTtBQUFBLElBMEZBLElBQUMsQ0FBQSxRQUFELEdBQVksSUExRlosQ0FBQTtXQTRGQSxJQUFDLENBQUEsTUFBTSxDQUFDLGVBQVIsQ0FBeUIsSUFBQyxDQUFBLFFBQVMsQ0FBQSxHQUFBLENBQUksQ0FBQyxFQUF4QyxFQTlGUTtFQUFBLENBbFFULENBQUE7O3VCQUFBOztJQXpDRCxDQUFBIiwiZmlsZSI6IkdTVkh5cGVybGFwc2UuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJOdW1iZXIucHJvdG90eXBlLnRvUmFkID0gKCkgLT4gQCAqIE1hdGguUEkgLyAxODBcblxuTnVtYmVyLnByb3RvdHlwZS50b0RlZyA9ICgpIC0+IEAgKiAxODAgLyBNYXRoLlBJXG5cbkFQSV9LRVkgPSBcIkFJemFTeUJRMmR6RGZ5RjhZMER3ZS1RNkp6eDRfRzYyQU5yVG90UVwiXG5cblRBR19IRUlHSFQgPSA0MFxuXG5wb2ludE9uTGluZSA9ICh0LCBhLCBiKSAtPlxuXHRsYXQxID0gYS5sYXQoKS50b1JhZCgpXG5cdGxuZzEgPSBhLmxuZygpLnRvUmFkKClcblxuXHRsYXQyID0gYi5sYXQoKS50b1JhZCgpXG5cdGxuZzIgPSBiLmxuZygpLnRvUmFkKClcblxuXHR4ID0gbGF0MSArIHQgKiAobGF0MiAtIGxhdDEpO1xuXHR5ID0gbG5nMSArIHQgKiAobG5nMiAtIGxuZzEpO1xuXG5cdHJldHVybiBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHgudG9EZWcoKSwgeS50b0RlZygpKVxuXG5nZXRGb2xsb3dlZFBhdGggPSAobSwgYSwgYikgLT5cblx0ZCA9IGdvb2dsZS5tYXBzLmdlb21ldHJ5LnNwaGVyaWNhbC5jb21wdXRlRGlzdGFuY2VCZXR3ZWVuKGEsIGIpXG5cblx0aWYgbSA8IDAgfHwgZCA8IG1cblx0XHRhbGVydChcImVycm9yIGdldEZvbG93ZWRQYXRoXCIpXG5cblx0dCA9IG0gLyBkXG5cblx0cmV0dXJuIHBvaW50T25MaW5lKHQsIGEsIGIpXG5cbiMgaHR0cDovL2hpZGVpY2hpLmNvbS9hcmNoaXZlcy85NFxuYGZ1bmN0aW9uIHVuaXF1ZUlEKCl7XG5cdHZhciByYW5kYW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwMClcblx0dmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHR2YXIgdGltZSA9IGRhdGUuZ2V0VGltZSgpO1xuXHRyZXR1cm4gcmFuZGFtICsgdGltZS50b1N0cmluZygpO1xufWBcblxuY2xhc3MgR1NWSHlwZXJsYXBzZVxuXG5cdCMgY29uc3Rcblx0QEFQSV9LRVkgPSBcIkFJemFTeUJRMmR6RGZ5RjhZMER3ZS1RNkp6eDRfRzYyQU5yVG90UVwiXG5cdEBESVNUX0JFVFdFRU5fUFRTID0gNVxuXHRATUFYX1BUUyA9IDEwMFxuXG5cdCMgc3RhdGljIHZhclxuXHRAZGlyU2VydmljZSA9IG5ldyBnb29nbGUubWFwcy5EaXJlY3Rpb25zU2VydmljZSh7fSlcblx0QGRpclJlZ2V4ID0gL2RpclxcLyhbMC05Li1dKiksKFswLTkuLV0qKVxcLyhbMC05Li1dKiksKFswLTkuLV0qKVxcL0AoWzAtOS4tXSopLChbMC05Li1dKiksKFswLTldKil6XFwvZGF0YT0oLiopJC9cblx0QGRhdGFSZWdleCA9IC8hMWQoWzAtOS4tXSopITJkKFswLTkuLV0qKS9nXG5cdEBkYXRhTGF0TG5nUmVnZXggPSAvITFkKFswLTkuLV0qKSEyZChbMC05Li1dKikvXG5cblx0IyBsb2FkZXJcblx0QGxkciA9IG5ldyBHU1ZQQU5PLlBhbm9Mb2FkZXIoKVxuXHRAbGRyU3RhY2sgPSBbXVxuXG5cdF9jbGFzcyA9IEBcblxuXHQjIGV2ZW50XG5cdEBvbkVycm9yIFx0XHRcdD0gKGVycikgLT4gYWxlcnQoXCJlcnJvclwiKVxuXHRAb25NZXNzYWdlXHRcdFx0PSAoKSAtPiBudWxsXG5cdEBvblBhbm9yYW1hTG9hZCBcdD0gKCkgLT4gbnVsbFxuXHRAb25BbmFseXplQ29tcGxldGVcdD0gKCkgLT4gbnVsbFxuXHRAb25Qcm9ncmVzc1x0XHRcdD0gKCkgLT4gbnVsbFxuXHRAb25DYW5jZWwgXHRcdFx0PSAoKSAtPiBudWxsXG5cblx0IyBjb25zdHJ1Y3RvclxuXHRjb25zdHJ1Y3RvcjogKGFyZ3MpIC0+XG5cdFx0QHVybCA9IGFyZ3MudXJsXG5cdFx0QG5hbWUgPSBhcmdzLm5hbWVcblx0XHRAc3RlcCA9IHBhcnNlRmxvYXQoIGFyZ3Muc3RlcCApXG5cdFx0QHF1YWxpdHkgPSBhcmdzLnpvb21cblx0XHRAYkNhbmNlbCA9IGZhbHNlXG5cdFx0QGJXYWl0aW5nID0gZmFsc2Vcblx0XHRAc2VhcmNoUmFkaXVzID0gYXJncy5zZWFyY2hSYWRpdXNcblx0XHRAdW5pcXVlSWQgPSB1bmlxdWVJRCgpXG5cblx0XHRpZiBhcmdzLnRyYXZlbE1vZGUgPT0gJ2RyaXZpbmcnXG5cdFx0XHRAdHJhdmVsTW9kZSA9IGdvb2dsZS5tYXBzLkRpcmVjdGlvbnNUcmF2ZWxNb2RlLkRSSVZJTkdcblx0XHRlbHNlIGlmIGFyZ3MudHJhdmVsTW9kZSA9PSAnd2Fsa2luZydcblx0XHRcdEB0cmF2ZWxNb2RlID0gZ29vZ2xlLm1hcHMuRGlyZWN0aW9uc1RyYXZlbE1vZGUuV0FMS0lOR1xuXG5cdHNldE1hcDogKGVsbSkgLT5cblx0XHRAbWFwRWxtID0gZWxtXG5cblx0IyBtZXRob2RzXG5cdGNhbmNlbDogLT5cblx0XHRAYkNhbmNlbCA9IHRydWVcblx0XHRpZiAhQGJXYWl0aW5nXG5cdFx0XHRfY2xhc3Mub25DYW5jZWwuY2FsbCBAXG5cblx0dHJhY2U6IChhcmdzLi4uKSAtPlxuXHRcdGNvbnNvbGUubG9nIFwiWyN7QG5hbWV9XVwiLCBhcmdzLi4uXG5cblx0dHJhY2VCb2xkOiAoc3RyKSAtPlxuXHRcdGNvbnNvbGUubG9nIFwiJWNbI3tAbmFtZX1dICN7c3RyfSAtLS0tLS0tLS0tLS0tLS0tLS0tLVwiLCBcImNvbG9yOm9yYW5nZTtmb250LXdlaWdodDpib2xkO1wiXG5cblx0Y3JlYXRlRnJvbURpcmVjdGlvbjogKHVybCktPlxuXHRcdEB0cmFjZUJvbGQgXCJjcmVhdGVGcm9tRGlyZWN0aW9uXCJcblxuXHRcdCMgcGFyc2UgdXJsXG5cdFx0cmVzdWx0ID0gX2NsYXNzLmRpclJlZ2V4LmV4ZWMoIHVybCApXG5cblx0XHRpZiAhcmVzdWx0P1xuXHRcdFx0YWxlcnQgXCJjYW5ub3QgcGFyc2UgdXJsXCJcblx0XHRcdHJldHVyblxuXG5cdFx0QG9yaWdpbiAgICAgICAgID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyggcmVzdWx0WzFdLCByZXN1bHRbMl0gKVxuXHRcdEBkZXN0aW5hdGlvblx0PSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKCByZXN1bHRbM10sIHJlc3VsdFs0XSApXG5cdFx0QGNlbnRyb2lkICAgICAgID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyggcmVzdWx0WzVdLCByZXN1bHRbNl0gKVxuXHRcdEB6b29tICAgICAgICAgICA9IHBhcnNlSW50KHJlc3VsdFs3XSlcblxuXHRcdEB0cmFjZSBcIm9yaWdpbjogXCIgKyBAb3JpZ2luLCBcImRlc3RpbmF0aW9uOiBcIiArIEBkZXN0aW5hdGlvblxuXG5cdFx0cmVxID1cblx0XHRcdG9yaWdpbjogQG9yaWdpblxuXHRcdFx0ZGVzdGluYXRpb246IEBkZXN0aW5hdGlvblxuXHRcdFx0dHJhdmVsTW9kZTogQHRyYXZlbE1vZGVcblxuXHRcdCMgcGFyc2Ugd2F5cG9pbnQgZnJvbSBkYXRhXG5cdFx0QHdheXBvaW50cyA9IFtdXG5cdFx0XG5cdFx0aWYgKHJlc3VsdCA9IHJlc3VsdFs4XS5tYXRjaCggR1NWSHlwZXJsYXBzZS5kYXRhUmVnZXggKSk/XG5cdFx0XHRmb3IgaSwgciBvZiByZXN1bHRcblx0XHRcdFx0bSA9IEdTVkh5cGVybGFwc2UuZGF0YUxhdExuZ1JlZ2V4LmV4ZWMoIHIgKVxuXHRcdFx0XHR3cCA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoIG1bMl0sIG1bMV0gKVxuXHRcdFx0XHRAd2F5cG9pbnRzLnB1c2hcblx0XHRcdFx0XHRsb2NhdGlvbjogd3AudG9TdHJpbmcoKVxuXHRcdFx0XHRcdHN0b3BvdmVyOiBmYWxzZVxuXG5cdFx0XHRAdHJhY2UgXCJudW0gb2Ygd2F5cG9pbnRzOlwiLCBAd2F5cG9pbnRzLmxlbmd0aFxuXHRcdFx0cmVxLndheXBvaW50cyA9IEB3YXlwb2ludHNcblxuXHRcdEB0cmFjZSBcInJlcXVlc3Q6XCIsIHJlcVxuXG5cdFx0R1NWSHlwZXJsYXBzZS5kaXJTZXJ2aWNlLnJvdXRlIHJlcSwgKHJlcywgc3RhdHVzKSA9PlxuXHRcdFx0aWYgc3RhdHVzID09IGdvb2dsZS5tYXBzLkRpcmVjdGlvbnNTdGF0dXMuT0tcblx0XHRcdFx0QGNyZWF0ZShyZXMpXG5cdFx0XHRlbHNlXG5cdFx0XHRcdF9jbGFzcy5vbk1lc3NhZ2UuY2FsbCBALCBcImNhbm5vdCBnZXQgcm91dGUuXCJcdFx0XG5cblx0Y3JlYXRlOiAocmVzKS0+XG5cdFx0QGJXYWl0aW5nID0gdHJ1ZVxuXHRcdEB0cmFjZUJvbGQgXCJjcmVhdGVcIlxuXG5cdFx0IyBjcmVhdGUgbWFwXG5cdFx0QG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAgQG1hcEVsbSxcblx0XHRcdGNlbnRlcjogQGNlbnRyb2lkXG5cdFx0XHR6b29tOiBAem9vbVxuXHRcdFx0bWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUFxuXG5cdFx0QGFuYWx5emUocmVzKVxuXG5cdCMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0IyAyXG5cdGFuYWx5emU6IChyZXMpIC0+XG5cdFx0aWYgQGJDYW5jZWxcblx0XHRcdF9jbGFzcy5vbkNhbmNlbC5jYWxsIEBcblx0XHRcdHJldHVyblxuXHRcdEB0cmFjZUJvbGQgXCJhbmFseXplXCJcblxuXHRcdF9jbGFzcy5vbk1lc3NhZ2UuY2FsbCBALCBcImFuYWx5emluZyByb3V0ZS4uXCJcblxuXHRcdCMgZ2V0IHBvaW50c1xuXHRcdEB0cmFjZSByZXMucm91dGVzXG5cblx0XHRAcmF3UHRzID0gW11cblx0XHRyb3V0ZSA9IHJlcy5yb3V0ZXNbMF1cblx0XHRwYXRoID0gcm91dGUub3ZlcnZpZXdfcGF0aFxuXG5cdFx0IyBzaG93IGluZm9cblx0XHRfY2xhc3Mub25NZXNzYWdlLmNhbGwgQCwgXCI8c3Ryb25nPnBhdGggbGVuZ3RoOiAje3BhcnNlSW50KGdvb2dsZS5tYXBzLmdlb21ldHJ5LnNwaGVyaWNhbC5jb21wdXRlTGVuZ3RoKHBhdGgpKX0obSksIHN0ZXA6ICN7QHN0ZXB9KG0pLCBzZWFyY2ggcmFkaXVzOiAje0BzZWFyY2hSYWRpdXN9IChtKTwvc3Ryb25nPlwiXG5cdFx0XG5cblx0XHRkID0gMCAjIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYiAobSlcblx0XHRyID0gMCAjIGFsd2F5cyBtdXN0IGJlIDwgc3RlcFxuXHRcdG0gPSAwXG5cdFx0YSA9IGIgPSBudWxsXG5cblx0XHRAdHJhY2UgXCJ0b3RhbCBkaXN0YW5jZTpcIiwgdG90YWxEaXN0XG5cblx0XHQjIHJldHJpdmUgdG8gd2F5IHBvaW50c1xuXHRcdGZvciBpIGluIFswLi5wYXRoLmxlbmd0aC0yXVxuXG5cdFx0XHRhID0gcGF0aFtpXVxuXHRcdFx0YiA9IHBhdGhbaSsxXVxuXHRcdFx0ZCA9IGdvb2dsZS5tYXBzLmdlb21ldHJ5LnNwaGVyaWNhbC5jb21wdXRlRGlzdGFuY2VCZXR3ZWVuKGEsIGIpXG5cblx0XHRcdCMgb2Zmc2V0IC1yXG5cdFx0XHRtID0gLXIgKyBAc3RlcFxuXG5cdFx0XHRpZiBkIDwgbVxuXHRcdFx0XHRyICs9IGRcblx0XHRcdGVsc2Vcblx0XHRcdFx0IyBzdWJkaXZpZGVcblx0XHRcdFx0d2hpbGUgbSA8IGRcblx0XHRcdFx0XHRwdCA9IGdldEZvbGxvd2VkUGF0aChtLCBhLCBiKVxuXHRcdFx0XHRcdEByYXdQdHMucHVzaCggcHQgKVxuXHRcdFx0XHRcdG0gKz0gQHN0ZXBcblxuXHRcdFx0XHRyID0gQHN0ZXAgLSAobSAtIGQpXG5cblx0XHRAdHJhY2UgXCJwb2ludHM6XCIsIEByYXdQdHMubGVuZ3RoXG5cdFx0QHRyYWNlQm9sZCBcImZldGNoIHBhbm9yYW1hc1wiXG5cblx0XHQjIGZpdCBib3VuZCBhbmQgYWRkIHBvbHlsaW5lXG5cdFx0QG1hcC5maXRCb3VuZHMoIHJvdXRlLmJvdW5kcyApXG5cdFx0cGF0aCA9IG5ldyBnb29nbGUubWFwcy5Qb2x5bGluZVxuXHRcdFx0cGF0aDogcGF0aFxuXHRcdFx0I2dlb2Rlc2ljOiB0cnVlXG5cdFx0XHRzdHJva2VDb2xvcjogJyMwMDAwMDAnXG5cdFx0XHRzdHJva2VPcGFjaXR5OiAxLjBcblx0XHRcdHN0cm9rZVdlaWdodDogMlxuXG5cdFx0cGF0aC5zZXRNYXAoIEBtYXAgKVxuXG5cdFx0IyBwYXRoID0gbmV3IGdvb2dsZS5tYXBzLlBvbHlsaW5lXG5cdFx0IyBcdHBhdGg6IEByYXdQdHNcblx0XHQjIFx0I2dlb2Rlc2ljOiB0cnVlXG5cdFx0IyBcdHN0cm9rZUNvbG9yOiAnIzAwMDBGRidcblx0XHQjIFx0c3Ryb2tlT3BhY2l0eTogMS4wXG5cdFx0IyBcdHN0cm9rZVdlaWdodDogMlxuXG5cdFx0IyBmb3IgaSwgcHQgb2YgQHJhd1B0c1xuXHRcdCMgXHRtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyXG5cdFx0IyBcdFx0cG9zaXRpb246IHB0XG5cdFx0IyBcdFx0bWFwOiBAbWFwXG5cdFx0IyBcdFx0dGl0bGU6IFwiI3tpfVwiXG5cblx0XHRfY2xhc3Mub25NZXNzYWdlLmNhbGwgQCwgXCJudW0gb2Ygd2F5cG9pbnRzOiAje0ByYXdQdHMubGVuZ3RofVwiXG5cblx0XHQjIG5leHRcblx0XHRAZ2V0UGFub0luZm9PbldheSgpXG5cblx0IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQjIDNcblx0Z2V0UGFub0luZm9PbldheTogLT5cblx0XHRpZiBAYkNhbmNlbFxuXHRcdFx0X2NsYXNzLm9uQ2FuY2VsLmNhbGwgQFxuXHRcdFx0cmV0dXJuXG5cblx0XHQjIGdldCBwYW5vIGlkIGZvciBlYWNoIHJhd1B0cyBhbmQgbWVyZ2UgZGVwbGljYXRlZCBwYW5vSWRcblx0XHRfY2xhc3Mub25NZXNzYWdlLmNhbGwgQCwgXCJyZXRyaXZpbmcgcGFubyBpZC4uXCJcblxuXHRcdGlkeCA9IDBcblx0XHRAcGFub0xpc3QgPSBbXVxuXG5cdFx0b25FcnJvciA9IChtc2cpID0+XG5cdFx0XHRudWxsXG5cdFx0b25Mb2FkID0gPT5cblx0XHRcdGlmIEBiQ2FuY2VsXG5cdFx0XHRcdF9jbGFzcy5vbkNhbmNlbC5jYWxsIEBcblx0XHRcdFx0cmV0dXJuXG5cblx0XHRcdGlkID0gQGxvYWRlci5pZFxuXG5cdFx0XHRfY2xhc3Mub25Qcm9ncmVzcy5jYWxsIEAsIGlkeCwgQHJhd1B0cy5sZW5ndGhcblxuXHRcdFx0aWYgaWQ/ICYmIGlkICE9IHByZXZJZFxuXHRcdFx0XHRwYW5vID1cblx0XHRcdFx0XHRpZDogaWRcblx0XHRcdFx0XHRyb3RhdGlvbjogQGxvYWRlci5yb3RhdGlvblxuXHRcdFx0XHRcdHBpdGNoOiBAbG9hZGVyLnBpdGNoXG5cdFx0XHRcdFx0bGF0OiBAbG9hZGVyLmxvY2F0aW9uLmxhdCgpXG5cdFx0XHRcdFx0bG5nOiBAbG9hZGVyLmxvY2F0aW9uLmxuZygpXG5cdFx0XHRcdEBwYW5vTGlzdC5wdXNoKCBwYW5vIClcblxuXHRcdFx0XHRtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyXG5cdFx0XHRcdFx0cG9zaXRpb246IEBsb2FkZXIubG9jYXRpb25cblx0XHRcdFx0XHRtYXA6IEBtYXBcblx0XHRcdFx0XHR0aXRsZTogXCIje2lkeH1cIlxuXG5cdFx0XHRcdHByZXZJZCA9IGlkXG5cblx0XHRcdGlmICsraWR4IDwgQHJhd1B0cy5sZW5ndGhcblx0XHRcdFx0IyBuZXh0XG5cdFx0XHRcdEBsb2FkZXIubG9hZChAcmF3UHRzWyBpZHggXSwgb25Mb2FkKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRfY2xhc3Mub25NZXNzYWdlLmNhbGwgQCwgXCJ0b3RhbCBwYW5vIGlkOiAje0BwYW5vTGlzdC5sZW5ndGh9XCJcblx0XHRcdFx0QGJXYWl0aW5nID0gZmFsc2Vcblx0XHRcdFx0IyBjb25zb2xlLmxvZyBAcGFub0xpc3Rcblx0XHRcdFx0X2NsYXNzLm9uUHJvZ3Jlc3MuY2FsbCBALCBpZHgsIEByYXdQdHMubGVuZ3RoXG5cdFx0XHRcdF9jbGFzcy5vbkFuYWx5emVDb21wbGV0ZS5jYWxsIEBcblxuXG5cdFx0IyBpbml0IEdTVlBhbm9cblx0XHRAbG9hZGVyID0gbmV3IEdTVlBBTk8uUGFub0xvYWRlclxuXHRcdFx0em9vbTogQHF1YWxpdHlcblx0XHRcdHNlYXJjaFJhZGl1czogQHNlYXJjaFJhZGl1c1xuXG5cdFx0QGxvYWRlci5vbkVycm9yID0gb25FcnJvclxuXHRcdEBsb2FkZXIub25Ob1Bhbm9yYW1hRGF0YSA9IG9uRXJyb3JcblxuXHRcdEBiV2FpdGluZyA9IHRydWVcblx0XHRwcmV2SWQgPSAnJ1xuXG5cdFx0QGxvYWRlci5sb2FkKCBAcmF3UHRzWyBpZHggXSwgb25Mb2FkIClcblxuXHQjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCMgNFxuXHRjb21wb3NlOiAtPlxuXG5cdFx0aWYgQHBhbm9MaXN0Lmxlbmd0aCA9PSAwXG5cdFx0XHRfY2xhc3Mub25NZXNzYWdlLmNhbGwgQCwgXCJ0aGVyZSBpcyBubyBwYW5vIGlkXCJcblx0XHRcdHJldHVyblxuXG5cdFx0QHRhZ0NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG5cdFx0QHRhZ0NhbnZhcy53aWR0aCA9IEBsb2FkZXIud2lkdGhcblx0XHRAdGFnQ2FudmFzLmhlaWdodCA9IFRBR19IRUlHSFRcblx0XHRAdGFnQ3R4XHQ9IEB0YWdDYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG5cdFx0QGdsc2wgPSBHbHNsXG5cdFx0XHRjYW52YXM6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG5cdFx0XHRmcmFnbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYW5vLXJvdGF0aW9uXCIpLnRleHRDb250ZW50XG5cdFx0XHR2YXJpYWJsZXM6XG5cdFx0XHRcdHJvdGF0aW9uOiAwLjBcblx0XHRcdFx0cGl0Y2g6IDAuMFxuXHRcdFx0XHRvcmlnaW5hbDogQGxvYWRlci5jYW52YXNcblx0XHRcdFx0dGFnOiBAdGFnQ2FudmFzXG5cblx0XHRAZ2xzbC5zZXRTaXplKEBsb2FkZXIud2lkdGgsIEBsb2FkZXIuaGVpZ2h0ICsgVEFHX0hFSUdIVClcblxuXHRcdFxuXG5cdFx0X2NsYXNzLm9uTWVzc2FnZS5jYWxsIEAsIFwiY29tcG9zaW5nIHBhbm9yYW1hLi4gc2l6ZToje0Bsb2FkZXIud2lkdGh9eCN7QGxvYWRlci5oZWlnaHR9XCJcblxuXHRcdHdyaXRlVG9UYWcgPSAobmFtZSwgdmFsdWUsIHgsIHkpID0+XG5cdFx0XHRAdGFnQ3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJ1xuXHRcdFx0QHRhZ0N0eC5maWxsVGV4dCh2YWx1ZSwgeCArIDQwLCB5KVxuXHRcdFx0QHRhZ0N0eC5maWxsU3R5bGUgPSAnI2ZmMDAwMCdcblx0XHRcdEB0YWdDdHguZmlsbFRleHQobmFtZSwgeCwgeSlcblxuXHRcdG9uQ29tcG9zZSA9ID0+XG5cdFx0XHRjb25zb2xlLmxvZyBpZHhcblxuXHRcdFx0aWYgQGJDYW5jZWxcblx0XHRcdFx0X2NsYXNzLm9uQ2FuY2VsLmNhbGwgQFxuXHRcdFx0XHRyZXR1cm5cblxuXHRcdFx0IyBkcmF3IHRhZ1xuXHRcdFx0QHRhZ0N0eC5maWxsU3R5bGUgPSAnIzAwMDAwMCdcblx0XHRcdEB0YWdDdHguZmlsbFJlY3QoMCwgMCwgQHRhZ0NhbnZhcy53aWR0aCwgQHRhZ0NhbnZhcy5oZWlnaHQpXG5cblx0XHRcdEB0YWdDdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnXG5cdFx0XHRAdGFnQ3R4LmZvbnQgPSAnMTJweCBBcmlhbCdcblxuXHRcdFx0Y3Vyc29yID0gMFxuXG5cdFx0XHR3cml0ZVRvVGFnKFwidWlkXCIsICAgICBcIiN7QHVuaXF1ZUlkfVwiLCBjdXJzb3IrKyAqIDB4ZmYsIDM2KVx0XHRcdFx0XHRcdFx0XG5cdFx0XHR3cml0ZVRvVGFnKFwibGF0XCIsICAgICBcIiN7QHBhbm9MaXN0W2lkeF0ubG5nLnRvUHJlY2lzaW9uKDE3KX1cIiwgY3Vyc29yKysgKiAweGZmLCAzNilcdFxuXHRcdFx0d3JpdGVUb1RhZyhcImxuZ1wiLCAgICAgXCIje0BwYW5vTGlzdFtpZHhdLmxuZy50b1ByZWNpc2lvbigxNyl9XCIsIGN1cnNvcisrICogMHhmZiwgMzYpXHRcblx0XHRcdHdyaXRlVG9UYWcoXCJoZG5nXCIsIFx0ICBcIiN7MH1cIiwgY3Vyc29yKysgKiAweGZmLCAzNilcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHR3cml0ZVRvVGFnKFwicGl0Y2hcIiwgICBcIiN7MH1cIiwgY3Vyc29yKysgKiAweGZmLCAzNilcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHR3cml0ZVRvVGFnKFwiZGF0ZVwiLCAgICBcIjIwMTQtMDRcIiwgY3Vyc29yKysgKiAweGZmLCAzNilcdFxuXG5cdFx0XHRjdXJzb3IgPSAwXG5cdFx0XHR3cml0ZVRvVGFnKFwiem9vbVwiLCAgICAgXCIje0BxdWFsaXR5fVwiLCBjdXJzb3IrKyAqIDB4ZmYsIDE4KVxuXG5cblxuXHRcdFx0JCgnYm9keScpLmFwcGVuZCggQHRhZ0NhbnZhcyApXG5cblx0XHRcdEBnbHNsLnNldCgncm90YXRpb24nLCBAcGFub0xpc3RbaWR4XS5yb3RhdGlvbilcblx0XHRcdEBnbHNsLnNldCgncGl0Y2gnLCBAcGFub0xpc3RbaWR4XS5waXRjaClcblx0XHRcdEBnbHNsLnN5bmNBbGwoKVxuXHRcdFx0QGdsc2wucmVuZGVyKClcblxuXHRcdFx0Y29uc29sZS5sb2cgQGxvYWRlci5yb3RhdGlvbiwgQGxvYWRlci5waXRjaFxuXG5cdFx0XHRfY2xhc3Mub25Qcm9ncmVzcy5jYWxsIEAsIGlkeCwgQHBhbm9MaXN0Lmxlbmd0aFxuXHRcdFx0X2NsYXNzLm9uUGFub3JhbWFMb2FkLmNhbGwgQCwgaWR4LCBAZ2xzbC5jYW52YXNcblxuXHRcdFx0aWYgKytpZHggPCBAcGFub0xpc3QubGVuZ3RoXG5cdFx0XHRcdCMgbmV4dCBmcmFtZVxuXHRcdFx0XHRzZXRUaW1lb3V0ID0+XG5cdFx0XHRcdFx0QGxvYWRlci5jb21wb3NlUGFub3JhbWEoIEBwYW5vTGlzdFtpZHhdLmlkIClcblx0XHRcdFx0LCAxMDBcblx0XHRcdGVsc2Vcblx0XHRcdFx0QGJXYWl0aW5nID0gZmFsc2Vcblx0XHRcdFx0QHRyYWNlQm9sZCBcImNvbXBsZXRlXCJcblx0XHRcdFx0QHRyYWNlIFwidG90YWwgcGFub3JhbWE6XCIsIEBwYW5vTGlzdC5sZW5ndGhcblxuXHRcdFx0XHRfY2xhc3Mub25Qcm9ncmVzcy5jYWxsIEAsIGlkeCwgQHBhbm9MaXN0Lmxlbmd0aFxuXHRcdFx0XHRfY2xhc3Mub25NZXNzYWdlLmNhbGwgQCwgXCJjb21wbGV0ZSAtIHRvdGFsOiAje0BwYW5vTGlzdC5sZW5ndGh9LCBkdXJhdGlvbjogI3tAcGFub0xpc3QubGVuZ3RoIC8gMjR9XCJcblxuXHRcdEBsb2FkZXIub25FcnJvciA9IChtc2cpIC0+XG5cdFx0XHRjb25zb2xlLmxvZyBtc2dcblx0XHRAbG9hZGVyLm9uUGFub3JhbWFMb2FkID0gb25Db21wb3NlXG5cdFx0QGxvYWRlci5vbk5vUGFub3JhbWFEYXRhID0gKHN0YXR1cykgLT5cblx0XHRcdGNvbnNvbGUubG9nIHN0YXR1c1xuXG5cdFx0aWR4ID0gMFxuXHRcdEBiV2FpdGluZyA9IHRydWVcblxuXHRcdEBsb2FkZXIuY29tcG9zZVBhbm9yYW1hKCBAcGFub0xpc3RbaWR4XS5pZCApXG5cbiJdfQ==