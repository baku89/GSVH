var API_KEY, GSVHyperlapse, TAG_HEIGHT, getFollowedPath, pointOnLine,
  slice = [].slice;

Number.prototype.toRad = function() {
  return this * Math.PI / 180;
};

Number.prototype.toDeg = function() {
  return this * 180 / Math.PI;
};

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

TAG_HEIGHT = 40;

pointOnLine = function(t, a, b) {
  var lat1, lat2, lng1, lng2, x, y;
  lat1 = a.lat().toRad();
  lng1 = a.lng().toRad();
  lat2 = b.lat().toRad();
  lng2 = b.lng().toRad();
  x = lat1 + t * (lat2 - lat1);
  y = lng1 + t * (lng2 - lng1);
  return new google.maps.LatLng(x.toDeg(), y.toDeg());
};

getFollowedPath = function(m, a, b) {
  var d, t;
  d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
  if (m < 0 || d < m) {
    alert("error getFolowedPath");
  }
  t = m / d;
  return pointOnLine(t, a, b);
};

function uniqueID(){
	var randam = Math.floor(Math.random()*1000)
	var date = new Date();
	var time = date.getTime();
	return randam + time.toString();
};

GSVHyperlapse = (function() {
  var _class;

  GSVHyperlapse.API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

  GSVHyperlapse.DIST_BETWEEN_PTS = 5;

  GSVHyperlapse.MAX_PTS = 100;

  GSVHyperlapse.dirService = new google.maps.DirectionsService({});

  GSVHyperlapse.dirRegex = /dir\/([0-9.-]*),([0-9.-]*)\/([0-9.-]*),([0-9.-]*)\/@([0-9.-]*),([0-9.-]*),([0-9]*)z\/data=(.*)$/;

  GSVHyperlapse.dataRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/g;

  GSVHyperlapse.dataLatLngRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/;

  GSVHyperlapse.ldr = new GSVPANO.PanoLoader();

  GSVHyperlapse.ldrStack = [];

  _class = GSVHyperlapse;

  GSVHyperlapse.onError = function(err) {
    return alert("error");
  };

  GSVHyperlapse.onMessage = function() {
    return null;
  };

  GSVHyperlapse.onPanoramaLoad = function() {
    return null;
  };

  GSVHyperlapse.onAnalyzeComplete = function() {
    return null;
  };

  GSVHyperlapse.onProgress = function() {
    return null;
  };

  GSVHyperlapse.onCancel = function() {
    return null;
  };

  function GSVHyperlapse(args) {
    this.url = args.url;
    this.name = args.name;
    this.step = parseFloat(args.step);
    this.quality = args.zoom;
    this.bCancel = false;
    this.bWaiting = false;
    this.searchRadius = args.searchRadius;
    this.uniqueId = uniqueID();
    if (args.travelMode === 'driving') {
      this.travelMode = google.maps.DirectionsTravelMode.DRIVING;
    } else if (args.travelMode === 'walking') {
      this.travelMode = google.maps.DirectionsTravelMode.WALKING;
    }
  }

  GSVHyperlapse.prototype.setMap = function(elm) {
    return this.mapElm = elm;
  };

  GSVHyperlapse.prototype.cancel = function() {
    this.bCancel = true;
    if (!this.bWaiting) {
      return _class.onCancel.call(this);
    }
  };

  GSVHyperlapse.prototype.trace = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, ["[" + this.name + "]"].concat(slice.call(args)));
  };

  GSVHyperlapse.prototype.traceBold = function(str) {
    return console.log("%c[" + this.name + "] " + str + " --------------------", "color:orange;font-weight:bold;");
  };

  GSVHyperlapse.prototype.create = function() {
    var data, i, m, r, req, result, wp;
    this.bWaiting = true;
    this.traceBold("create");
    result = _class.dirRegex.exec(this.url);
    if (result == null) {
      alert("unco");
      _class.onMessage.call(this, "cannot parse url");
      return;
    }
    this.origin = new google.maps.LatLng(result[1], result[2]);
    this.destination = new google.maps.LatLng(result[3], result[4]);
    this.centroid = new google.maps.LatLng(result[5], result[6]);
    this.zoom = parseInt(result[7]);
    this.trace("origin: " + this.origin, "destination: " + this.destination);
    req = {
      origin: this.origin,
      destination: this.destination,
      travelMode: this.travelMode
    };
    this.waypoints = [];
    data = result[8];
    result = data.match(GSVHyperlapse.dataRegex);
    if (result != null) {
      for (i in result) {
        r = result[i];
        m = GSVHyperlapse.dataLatLngRegex.exec(r);
        wp = new google.maps.LatLng(m[2], m[1]);
        this.waypoints.push({
          location: wp.toString(),
          stopover: false
        });
      }
      this.trace("num of waypoints:", this.waypoints.length);
      req.waypoints = this.waypoints;
    }
    this.trace("request:", req);
    this.map = new google.maps.Map(this.mapElm, {
      center: this.centroid,
      zoom: this.zoom,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    return GSVHyperlapse.dirService.route(req, (function(_this) {
      return function(res, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          return _this.analyze(res);
        } else {
          return _class.onMessage.call(_this, "cannot get route.");
        }
      };
    })(this));
  };

  GSVHyperlapse.prototype.analyze = function(res) {
    var a, b, d, i, j, legs, m, path, pt, r, ref, route;
    if (this.bCancel) {
      _class.onCancel.call(this);
      return;
    }
    this.traceBold("analyze");
    _class.onMessage.call(this, "analyzing route..");
    this.trace(res.routes);
    this.rawPts = [];
    route = res.routes[0];
    path = route.overview_path;
    legs = route.legs;
    _class.onMessage.call(this, "<strong>path length: " + (parseInt(google.maps.geometry.spherical.computeLength(path))) + "(m), step: " + this.step + "(m), search radius: " + this.searchRadius + " (m)</strong>");
    d = 0;
    r = 0;
    m = 0;
    a = b = null;
    this.trace("total distance:", totalDist);
    for (i = j = 0, ref = path.length - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      a = path[i];
      b = path[i + 1];
      d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
      m = -r + this.step;
      if (d < m) {
        r += d;
      } else {
        while (m < d) {
          pt = getFollowedPath(m, a, b);
          this.rawPts.push(pt);
          m += this.step;
        }
        r = this.step - (m - d);
      }
    }
    this.trace("points:", this.rawPts.length);
    this.traceBold("fetch panoramas");
    this.map.fitBounds(route.bounds);
    path = new google.maps.Polyline({
      path: path,
      strokeColor: '#000000',
      strokeOpacity: 1.0,
      strokeWeight: 2
    });
    path.setMap(this.map);
    _class.onMessage.call(this, "num of waypoints: " + this.rawPts.length);
    return this.getPanoInfoOnWay();
  };

  GSVHyperlapse.prototype.getPanoInfoOnWay = function() {
    var idx, onError, onLoad, prevId;
    if (this.bCancel) {
      _class.onCancel.call(this);
      return;
    }
    this.loader = new GSVPANO.PanoLoader({
      zoom: this.quality,
      searchRadius: this.searchRadius
    });
    this.loader.onError = onError;
    this.loader.onNoPanoramaData = onError;
    _class.onMessage.call(this, "retriving pano id..");
    idx = 0;
    this.panoList = [];
    this.bWaiting = true;
    this.loader.load(this.rawPts[idx], onLoad);
    onError = (function(_this) {
      return function(msg) {
        return null;
      };
    })(this);
    prevId = '';
    return onLoad = (function(_this) {
      return function() {
        var id, marker, pano;
        if (_this.bCancel) {
          _class.onCancel.call(_this);
          return;
        }
        id = _this.loader.id;
        _class.onProgress.call(_this, idx, _this.rawPts.length);
        if ((id != null) && id !== prevId) {
          pano = {
            id: id,
            rotation: _this.loader.rotation,
            pitch: _this.loader.pitch,
            lat: _this.loader.location.lat(),
            lng: _this.loader.location.lng()
          };
          _this.panoList.push(pano);
          marker = new google.maps.Marker({
            position: _this.loader.location,
            map: _this.map,
            title: "" + idx
          });
          prevId = id;
        }
        if (++idx < _this.rawPts.length) {
          return _this.loader.load(_this.rawPts[idx], function() {
            return onLoad();
          });
        } else {
          _class.onMessage.call(_this, "total pano id: " + _this.panoList.length);
          _this.bWaiting = false;
          _class.onProgress.call(_this, idx, _this.rawPts.length);
          return _class.onAnalyzeComplete.call(_this);
        }
      };
    })(this);
  };

  GSVHyperlapse.prototype.compose = function() {
    var idx, onCompose, writeToTag;
    if (this.panoList.length === 0) {
      _class.onMessage.call(this, "there is no pano id");
      return;
    }
    this.tagCanvas = document.createElement('canvas');
    this.tagCanvas.width = this.loader.width;
    this.tagCanvas.height = TAG_HEIGHT;
    this.tagCtx = this.tagCanvas.getContext('2d');
    this.glsl = Glsl({
      canvas: document.createElement('canvas'),
      fragment: document.getElementById("pano-rotation").textContent,
      variables: {
        rotation: 0.0,
        pitch: 0.0,
        original: this.loader.canvas,
        tag: this.tagCanvas
      }
    });
    this.glsl.setSize(this.loader.width, this.loader.height + TAG_HEIGHT);
    _class.onMessage.call(this, "composing panorama.. size:" + this.loader.width + "x" + this.loader.height);
    this.loader.onError = function(msg) {
      return console.log(msg);
    };
    this.loader.onPanoramaLoad = onCompose;
    this.loader.onNoPanoramaData = function(status) {
      return console.log(status);
    };
    idx = 0;
    this.bWaiting = true;
    this.loader.composePanorama(this.panoList[idx].id);
    writeToTag = (function(_this) {
      return function(name, value, x, y) {
        _this.tagCtx.fillStyle = '#ffffff';
        _this.tagCtx.fillText(value, x + 40, y);
        _this.tagCtx.fillStyle = '#ff0000';
        return _this.tagCtx.fillText(name, x, y);
      };
    })(this);
    return onCompose = (function(_this) {
      return function() {
        var cursor;
        console.log(idx);
        if (_this.bCancel) {
          _class.onCancel.call(_this);
          return;
        }
        _this.tagCtx.fillStyle = '#000000';
        _this.tagCtx.fillRect(0, 0, _this.tagCanvas.width, _this.tagCanvas.height);
        _this.tagCtx.fillStyle = '#ffffff';
        _this.tagCtx.font = '12px Arial';
        cursor = 0;
        writeToTag("uid", "" + _this.uniqueId, cursor++ * 0xff, 36);
        writeToTag("lat", "" + (_this.panoList[idx].lng.toPrecision(17)), cursor++ * 0xff, 36);
        writeToTag("lng", "" + (_this.panoList[idx].lng.toPrecision(17)), cursor++ * 0xff, 36);
        writeToTag("hdng", "" + 0., cursor++ * 0xff, 36);
        writeToTag("pitch", "" + 0., cursor++ * 0xff, 36);
        writeToTag("date", "2014-04", cursor++ * 0xff, 36);
        cursor = 0;
        writeToTag("zoom", "" + _this.quality, cursor++ * 0xff, 18);
        $('body').append(_this.tagCanvas);
        _this.glsl.set('rotation', _this.panoList[idx].rotation);
        _this.glsl.set('pitch', _this.panoList[idx].pitch);
        _this.glsl.syncAll();
        _this.glsl.render();
        console.log(_this.loader.rotation, _this.loader.pitch);
        _class.onProgress.call(_this, idx, _this.panoList.length);
        _class.onPanoramaLoad.call(_this, idx, _this.glsl.canvas);
        if (++idx < _this.panoList.length) {
          return setTimeout(function() {
            return _this.loader.composePanorama(_this.panoList[idx].id);
          }, 100);
        } else {
          _this.bWaiting = false;
          _this.traceBold("complete");
          _this.trace("total panorama:", _this.panoList.length);
          _class.onProgress.call(_this, idx, _this.panoList.length);
          return _class.onMessage.call(_this, "complete - total: " + _this.panoList.length + ", duration: " + (_this.panoList.length / 24));
        }
      };
    })(this);
  };

  return GSVHyperlapse;

})();

//# sourceMappingURL=data:application/json;base64,