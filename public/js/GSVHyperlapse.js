var GSVHyperlapse, GSVHyperlapseHeading, GSVHyperlapseMethod, getFollowedPath, pointOnLine, uniqueID;

Number.prototype.toRad = function() {
  return this * Math.PI / 180;
};

Number.prototype.toDeg = function() {
  return this * 180 / Math.PI;
};

GSVHyperlapseHeading = {
  BACKWARD: "backward",
  LOOKAT: "lookat",
  NORTH: "north"
};

GSVHyperlapseMethod = {
  DRECTION: 'direction',
  PANOID: 'panoid'
};

pointOnLine = function(t, a, b) {
  var lat1, lat2, lng1, lng2, x, y;
  lat1 = a.lat().toRad();
  lng1 = a.lng().toRad();
  lat2 = b.lat().toRad();
  lng2 = b.lng().toRad();
  x = lat1 + t * (lat2 - lat1);
  y = lng1 + t * (lng2 - lng1);
  return new google.maps.LatLng(x.toDeg(), y.toDeg());
};

getFollowedPath = function(m, a, b) {
  var d, t;
  d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
  if (m < 0 || d < m) {
    alert("error getFolowedPath");
  }
  t = m / d;
  return pointOnLine(t, a, b);
};

uniqueID = function() {
  var date, randam, time;
  randam = Math.floor(Math.random() * 1000);
  date = new Date();
  time = date.getTime();
  return randam + time.toString();
};

GSVHyperlapse = (function() {
  GSVHyperlapse.DIST_BETWEEN_PTS = 5;

  GSVHyperlapse.MAX_PTS = 100;

  GSVHyperlapse.dirService = new google.maps.DirectionsService({});

  GSVHyperlapse.dirRegex = /dir\/([0-9.-]*),([0-9.-]*)\/([0-9.-]*),([0-9.-]*)\/@([0-9.-]*),([0-9.-]*),([0-9]*)z\/data=(.*)$/;

  GSVHyperlapse.dataRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/g;

  GSVHyperlapse.dataLatLngRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/;

  GSVHyperlapse.onError = function(err) {
    return alert("error");
  };

  GSVHyperlapse.onMessage = function() {
    return null;
  };

  GSVHyperlapse.onPanoramaLoad = function() {
    return null;
  };

  GSVHyperlapse.onAnalyzeComplete = function() {
    return null;
  };

  GSVHyperlapse.onComposeComplete = function() {
    return null;
  };

  GSVHyperlapse.onProgress = function() {
    return null;
  };

  GSVHyperlapse.onCancel = function() {
    return null;
  };

  function GSVHyperlapse(name, map) {
    this.name = name;
    this.bCancel = false;
    this.bWaiting = false;
    this.uid = uniqueID();
    this.panoList = [];
    this.client = new google.maps.StreetViewService();
    this.map = new google.maps.Map(map, {
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      zoom: 16
    });
  }

  GSVHyperlapse.prototype.cancel = function() {
    this.bCancel = true;
    if (!this.bWaiting) {
      return GSVHyperlapse.onCancel.call(this);
    }
  };

  GSVHyperlapse.prototype.createPanoData = function(res) {
    return {
      id: res.location.pano,
      rotation: res.tiles.centerHeading,
      pitch: res.tiles.originPitch,
      latLng: res.location.latLng,
      date: res.imageDate
    };
  };

  GSVHyperlapse.prototype.setParameters = function(params) {
    var result;
    this.method = params.method;
    this.travelMode = params.travelMode;
    this.step = parseFloat(params.step);
    this.searchRadius = parseFloat(params.searchRadius);
    this.headingMode = params.headingMode;
    this.zoom = params.zoom;
    if (this.headingMode === GSVHyperlapseHeading.LOOKAT) {
      result = /([0-9.]+), ([0-9.]+)/.exec(params.lookat);
      if (!(result != null)) {
        alert("lookat latLng cannot be parsed");
        return;
      }
      return this.lookat = new google.maps.LatLng(result[1], result[2]);
    } else if (this.haeadingMode === GSVHyperlapseHeading.BACKWARD) {
      if (this.panoList.length < 2) {
        alert("cannot solve backward heading because pano length is less than 2.");
      }
    }
  };

  GSVHyperlapse.prototype.createFromDirection = function(url) {
    var prevId, rawPts, requestRoute, retrivePanoData, routeRes, subdivideRoute;
    rawPts = [];
    routeRes = null;
    prevId = '';
    this.method = GSVHyperlapseMethod.DIRECTION;
    this.sourceUrl = url;
    requestRoute = (function(_this) {
      return function() {
        var center, destination, i, m, origin, r, req, result, waypoints, wp, zoom;
        result = GSVHyperlapse.dirRegex.exec(url);
        if (result == null) {
          alert("cannot parse url");
          return;
        }
        origin = new google.maps.LatLng(result[1], result[2]);
        destination = new google.maps.LatLng(result[3], result[4]);
        center = new google.maps.LatLng(result[5], result[6]);
        zoom = parseInt(result[7]);
        _this.map.setZoom(zoom);
        _this.map.setCenter(center);
        req = {
          origin: origin,
          destination: destination,
          travelMode: travelMode
        };
        waypoints = [];
        if ((result = result[8].match(GSVHyperlapse.dataRegex)) != null) {
          for (i in result) {
            r = result[i];
            m = GSVHyperlapse.dataLatLngRegex.exec(r);
            wp = new google.maps.LatLng(m[2], m[1]);
            waypoints.push({
              location: wp.toString(),
              stopover: false
            });
          }
          req.waypoints = waypoints;
        }
        return GSVHyperlapse.dirService.route(req, function(res, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            routeRes = res;
            return subdivideRoute();
          } else {
            return GSVHyperlapse.onMessage.call(_this, "cannot get route.");
          }
        });
      };
    })(this);
    subdivideRoute = (function(_this) {
      return function() {
        var a, b, d, i, j, m, path, pt, r, ref, route;
        if (_this.bCancel) {
          GSVHyperlapse.onCancel.call(_this);
          return;
        }
        GSVHyperlapse.onMessage.call(_this, "subdividing route..");
        route = routeRes.routes[0];
        path = route.overview_path;
        GSVHyperlapse.onMessage.call(_this, "path length: " + (parseInt(google.maps.geometry.spherical.computeLength(path))) + "(m), step: " + _this.step + "(m), search radius: " + _this.searchRadius + " (m)");
        d = 0;
        r = 0;
        m = 0;
        a = b = null;
        for (i = j = 0, ref = path.length - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          a = path[i];
          b = path[i + 1];
          d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
          m = -r + _this.step;
          if (d < m) {
            r += d;
          } else {
            while (m < d) {
              pt = getFollowedPath(m, a, b);
              rawPts.push(pt);
              m += _this.step;
            }
            r = _this.step - (m - d);
          }
        }
        _this.map.fitBounds(route.bounds);
        GSVHyperlapse.onMessage.call(_this, "number of waypoints: " + rawPts.length);
        return retrivePanoData();
      };
    })(this);
    retrivePanoData = (function(_this) {
      return function() {
        var idx, onLoad;
        GSVHyperlapse.onMessage.call(_this, "retriving pano id..");
        idx = 0;
        onLoad = function(res, status) {
          var marker, pano;
          if (_this.bCancel) {
            GSVHyperlapse.onCancel.call(_this);
            return;
          }
          if (status === google.maps.StreetViewStatus.OK) {
            pano = _this.createPanoData(res);
            if (pano.id !== prevId) {
              _this.panoList.push(pano);
              marker = new google.maps.Marker({
                position: pano.latLng,
                map: _this.map,
                title: "" + idx
              });
              prevId = pano.id;
              console.log(pano.id);
            }
          }
          GSVHyperlapse.onProgress.call(_this, idx, rawPts.length);
          if (++idx < rawPts.length) {
            return _this.client.getPanoramaByLocation(rawPts[idx], _this.searchRadius, onLoad);
          } else {
            console.log(_this.panoList);
            _this.bWaiting = false;
            GSVHyperlapse.onMessage.call(_this, "total pano id: " + _this.panoList.length);
            GSVHyperlapse.onProgress.call(_this, idx, rawPts.length);
            return GSVHyperlapse.onAnalyzeComplete.call(_this);
          }
        };
        _this.bWaiting = true;
        prevId = '';
        return _this.client.getPanoramaByLocation(rawPts[idx], _this.searchRadius, onLoad);
      };
    })(this);
    return requestRoute();
  };

  GSVHyperlapse.prototype.createFromPanoId = function(list) {
    var idx, onLoad;
    idx = 0;
    GSVHyperlapse.onMessage.call(this, "start compose..");
    GSVHyperlapse.onMessage.call(this, "eadingMode:" + this.headingMode);
    onLoad = (function(_this) {
      return function(res, status) {
        var marker, pano;
        if (idx === 0) {
          GSVHyperlapse.onMessage.call(_this, "analyzing..");
        }
        if (status === google.maps.StreetViewStatus.OK) {
          if (_this.bCancel) {
            GSVHyperlapse.onCancel.call(_this);
            return;
          }
          pano = _this.createPanoData(res);
          _this.panoList.push(pano);
          if (idx === 0) {
            _this.map.setCenter(pano.latLng);
            _this.map.setZoom(13);
          }
          marker = new google.maps.Marker({
            position: pano.latLng,
            map: _this.map,
            title: "" + idx
          });
          GSVHyperlapse.onProgress.call(_this, idx, list.length);
          if (++idx < list.length) {
            return _this.client.getPanoramaById(list[idx], onLoad);
          } else {
            _this.bWaiting = false;
            GSVHyperlapse.onMessage.call(_this, "total pano id: " + _this.panoList.length);
            GSVHyperlapse.onProgress.call(_this, idx, list.length);
            return GSVHyperlapse.onAnalyzeComplete.call(_this);
          }
        } else {
          return alert("error on createFromPanoId() : " + status);
        }
      };
    })(this);
    this.bWaiting = true;
    return this.client.getPanoramaById(list[idx], onLoad);
  };

  GSVHyperlapse.prototype.compose = function() {
    var idx, loader, onCompose;
    if (this.panoList.length === 0) {
      GSVHyperlapse.onMessage.call(this, "there is no pano id.");
      return;
    }
    loader = new GSVPANO.PanoLoader({
      zoom: this.zoom
    });
    GSVHyperlapse.onMessage.call(this, "composing panorama.. size:" + loader.width + "x" + loader.height);
    this.glsl = Glsl({
      canvas: document.createElement('canvas'),
      fragment: document.getElementById("pano-rotation").textContent,
      variables: {
        heading: 0.0,
        pitch: 0.0,
        original: loader.canvas
      }
    });
    this.glsl.setSize(loader.width, loader.height);
    onCompose = (function(_this) {
      return function() {
        var ajustHeading, ajustPitch, data, heading, i;
        if (_this.bCancel) {
          GSVHyperlapse.onCancel.call(_this);
          return;
        }
        heading = 0;
        ajustHeading = _this.panoList[idx].rotation;
        ajustPitch = 0;
        if (_this.headingMode === GSVHyperlapseHeading.BACKWARD) {
          i = idx === 0 ? 1 : idx;
          heading = google.maps.geometry.spherical.computeHeading(_this.panoList[i].latLng, _this.panoList[i - 1].latLng);
        } else if (_this.headingMode === GSVHyperlapseHeading.LOOKAT) {
          heading = google.maps.geometry.spherical.computeHeading(_this.panoList[idx].latLng, _this.lookat);
        }
        ajustHeading -= heading;
        _this.glsl.set('heading', ajustHeading.toRad());
        _this.glsl.set('pitch', ajustPitch.toRad());
        _this.glsl.syncAll();
        _this.glsl.render();
        data = {
          id: _this.panoList[idx].id,
          latLng: _this.panoList[idx].latLng,
          heading: heading,
          ajustHeading: ajustHeading,
          ajustPitch: ajustPitch
        };
        GSVHyperlapse.onProgress.call(_this, idx, _this.panoList.length);
        GSVHyperlapse.onPanoramaLoad.call(_this, idx, _this.glsl.canvas, data);
        if (++idx < _this.panoList.length) {
          return setTimeout(function() {
            return loader.composePanorama(_this.panoList[idx].id);
          }, 100);
        } else {
          _this.bWaiting = false;
          console.log("complete");
          GSVHyperlapse.onProgress.call(_this, idx, _this.panoList.length);
          GSVHyperlapse.onMessage.call(_this, "complete - total: " + _this.panoList.length + ", duration: " + (_this.panoList.length / 24));
          return GSVHyperlapse.onComposeComplete.call(_this);
        }
      };
    })(this);
    loader.onPanoramaLoad = onCompose;
    loader.onError = function(msg) {
      return alert("error onCompose() : " + msg);
    };
    loader.onNoPanoramaData = function(status) {
      return alert("error onNoPanoramaData() : " + status);
    };
    idx = 0;
    this.bWaiting = true;
    return loader.composePanorama(this.panoList[idx].id);
  };

  return GSVHyperlapse;

})();

//# sourceMappingURL=data:application/json;base64,