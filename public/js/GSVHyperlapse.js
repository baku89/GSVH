var API_KEY, GSVHyperlapse, getFollowedPath, pointOnLine,
  slice = [].slice;

Number.prototype.toRad = function() {
  return this * Math.PI / 180;
};

Number.prototype.toDeg = function() {
  return this * 180 / Math.PI;
};

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

pointOnLine = function(t, a, b) {
  var lat1, lat2, lng1, lng2, x, y;
  lat1 = a.lat().toRad();
  lng1 = a.lng().toRad();
  lat2 = b.lat().toRad();
  lng2 = b.lng().toRad();
  x = lat1 + t * (lat2 - lat1);
  y = lng1 + t * (lng2 - lng1);
  return new google.maps.LatLng(x.toDeg(), y.toDeg());
};

getFollowedPath = function(m, a, b) {
  var d, t;
  d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
  if (m < 0 || d < m) {
    alert("error getFolowedPath");
  }
  t = m / d;
  return pointOnLine(t, a, b);
};

GSVHyperlapse = (function() {
  var _class;

  GSVHyperlapse.API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

  GSVHyperlapse.DIST_BETWEEN_PTS = 5;

  GSVHyperlapse.MAX_PTS = 100;

  GSVHyperlapse.dirService = new google.maps.DirectionsService({});

  GSVHyperlapse.dirRegex = /dir\/([0-9.-]*),([0-9.-]*)\/([0-9.-]*),([0-9.-]*)\/@([0-9.-]*),([0-9.-]*),([0-9]*)z\/data=(.*)$/;

  GSVHyperlapse.dataRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/g;

  GSVHyperlapse.dataLatLngRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/;

  GSVHyperlapse.ldr = new GSVPANO.PanoLoader();

  GSVHyperlapse.ldrStack = [];

  _class = GSVHyperlapse;

  GSVHyperlapse.onError = function(err) {
    return alert("error");
  };

  GSVHyperlapse.onMessage = function() {
    return null;
  };

  GSVHyperlapse.onPanoramaLoad = function() {
    return null;
  };

  function GSVHyperlapse(args) {
    this.url = args.url;
    this.name = args.name;
    this.step = parseFloat(args.step);
    this.quality = args.quality;
    this.bCancel = false;
    if (args.travelMode === 'driving') {
      this.travelMode = google.maps.DirectionsTravelMode.DRIVING;
    } else if (args.travelMode === 'walking') {
      this.travelMode = google.maps.DirectionsTravelMode.WALKING;
    }
  }

  GSVHyperlapse.prototype.setMap = function(elm) {
    return this.mapElm = elm;
  };

  GSVHyperlapse.prototype.trace = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, ["[" + this.name + "]"].concat(slice.call(args)));
  };

  GSVHyperlapse.prototype.traceBold = function(str) {
    return console.log("%c[" + this.name + "] " + str + " --------------------", "color:orange;font-weight:bold;");
  };

  GSVHyperlapse.prototype.create = function() {
    var _self, data, i, m, r, req, result, wp;
    this.traceBold("create");
    result = _class.dirRegex.exec(this.url);
    if (result == null) {
      alert("unco");
      _class.onMessage.call(this, "cannot parse url");
      return;
    }
    this.origin = new google.maps.LatLng(result[1], result[2]);
    this.destination = new google.maps.LatLng(result[3], result[4]);
    this.centroid = new google.maps.LatLng(result[5], result[6]);
    this.zoom = parseInt(result[7]);
    this.trace("origin: " + this.origin, "destination: " + this.destination);
    req = {
      origin: this.origin,
      destination: this.destination,
      travelMode: this.travelMode
    };
    this.waypoints = [];
    data = result[8];
    result = data.match(GSVHyperlapse.dataRegex);
    if (result != null) {
      for (i in result) {
        r = result[i];
        m = GSVHyperlapse.dataLatLngRegex.exec(r);
        wp = new google.maps.LatLng(m[2], m[1]);
        this.waypoints.push({
          location: wp.toString(),
          stopover: false
        });
      }
      this.trace("num of waypoints:", this.waypoints.length);
      req.waypoints = this.waypoints;
    }
    this.trace("request:", req);
    _self = this;
    this.map = new google.maps.Map(this.mapElm, {
      center: this.centroid,
      zoom: this.zoom,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    return GSVHyperlapse.dirService.route(req, function(res, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        return _self.analyze(res);
      } else {
        return _class.onMessage.call(this, "cannot get route.");
      }
    });
  };

  GSVHyperlapse.prototype.analyze = function(res) {
    var a, b, d, i, j, k, legs, m, marker, path, pt, r, ref, ref1, ref2, route, self, totalDist;
    this.traceBold("analyze");
    _class.onMessage.call(this, "analyzing route..");
    this.trace(res.routes);
    this.rawPts = [];
    route = res.routes[0];
    path = route.overview_path;
    legs = route.legs;
    totalDist = 0;
    for (i = j = 0, ref = legs.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      totalDist += legs[i].distance.value;
    }
    d = 0;
    r = 0;
    m = 0;
    a = b = null;
    this.trace("total distance:", totalDist);
    for (i = k = 0, ref1 = path.length - 2; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
      a = path[i];
      b = path[i + 1];
      d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
      m = -r + this.step;
      if (d < m) {
        r += d;
      } else {
        while (m < d) {
          pt = getFollowedPath(m, a, b);
          this.rawPts.push(pt);
          m += this.step;
        }
        r = this.step - (m - d);
      }
    }
    this.trace("points:", this.rawPts.length);
    this.traceBold("fetch panoramas");
    this.map.fitBounds(route.bounds);
    ref2 = this.rawPts;
    for (i in ref2) {
      pt = ref2[i];
      marker = new google.maps.Marker({
        position: pt,
        map: this.map,
        title: "" + i
      });
    }
    this.loader = new GSVPANO.PanoLoader({
      zoom: this.quality
    });
    this.glsl = Glsl({
      canvas: document.createElement('canvas'),
      fragment: document.getElementById("pano-rotation").textContent,
      variables: {
        rotation: 0.0,
        pitch: 0.0,
        original: this.loader.canvas
      }
    });
    this.glsl.setSize(this.loader.width, this.loader.height);
    _class.onMessage.call(this, "composing panorama.. length:" + this.rawPts.length + " size:" + this.loader.width + "x" + this.loader.height);
    self = this;
    this.loader.onError = function(msg) {
      return _class.onMessage.call(this, "error");
    };
    this.loader.onPanoramaLoad = function() {
      return self.onLoadPanoImage.call(self);
    };
    this.prevId = "";
    this.index = 0;
    this.numPanorama = 0;
    return this.parsePoint();
  };

  GSVHyperlapse.prototype.parsePoint = function() {
    var self;
    if (this.bCancel) {
      return;
    }
    if (this.index === this.rawPts.length) {
      this.handleComplete();
      return;
    }
    self = this;
    this.trace(this.rawPts[this.index]);
    return this.loader.load(this.rawPts[this.index], function() {
      return self.onLoadPanoInfo.call(self);
    });
  };

  GSVHyperlapse.prototype.onLoadPanoInfo = function() {
    var id;
    id = this.loader.id;
    this.trace(this.loader.pitch, this.loader.rotation);
    if (this.prevId === id) {
      this.trace(this.index, " - skipped");
      this.index += 1;
      this.parsePoint();
    } else {
      this.trace(this.index, id);
      this.loader.composePanorama(id);
    }
    return this.prevId = id;
  };

  GSVHyperlapse.prototype.onLoadPanoImage = function() {
    var self;
    this.index += 1;
    this.glsl.set('rotation', this.loader.rotation);
    this.glsl.set('pitch', this.loader.pitch);
    this.glsl.syncAll();
    this.glsl.render();
    _class.onPanoramaLoad.call(this, this.glsl.canvas, this.index, this.rawPts.length);
    this.numPanorama += 1;
    self = this;
    return setTimeout(function() {
      return self.parsePoint();
    }, 100);
  };

  GSVHyperlapse.prototype.handleComplete = function() {
    this.traceBold("complete");
    this.trace("total panorama:", this.numPanorama);
    return _class.onMessage.call(this, "complete - total: " + this.numPanorama + ", duration: " + (this.numPanorama / 23.976));
  };

  return GSVHyperlapse;

})();

//# sourceMappingURL=data:application/json;base64,