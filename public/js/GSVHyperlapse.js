var GSVHyperlapse, GSVHyperlapseHeading, TAG_HEIGHT, getFollowedPath, pointOnLine, uniqueID;

Number.prototype.toRad = function() {
  return this * Math.PI / 180;
};

Number.prototype.toDeg = function() {
  return this * 180 / Math.PI;
};

TAG_HEIGHT = 40;

GSVHyperlapseHeading = {
  FORWARD: "forward",
  LOOKAT: "lookat",
  NORTH: "north"
};

pointOnLine = function(t, a, b) {
  var lat1, lat2, lng1, lng2, x, y;
  lat1 = a.lat().toRad();
  lng1 = a.lng().toRad();
  lat2 = b.lat().toRad();
  lng2 = b.lng().toRad();
  x = lat1 + t * (lat2 - lat1);
  y = lng1 + t * (lng2 - lng1);
  return new google.maps.LatLng(x.toDeg(), y.toDeg());
};

getFollowedPath = function(m, a, b) {
  var d, t;
  d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
  if (m < 0 || d < m) {
    alert("error getFolowedPath");
  }
  t = m / d;
  return pointOnLine(t, a, b);
};

uniqueID = function() {
  var date, randam, time;
  randam = Math.floor(Math.random() * 1000);
  date = new Date();
  time = date.getTime();
  return randam + time.toString();
};

GSVHyperlapse = (function() {
  var _class;

  GSVHyperlapse.DIST_BETWEEN_PTS = 5;

  GSVHyperlapse.MAX_PTS = 100;

  GSVHyperlapse.dirService = new google.maps.DirectionsService({});

  GSVHyperlapse.dirRegex = /dir\/([0-9.-]*),([0-9.-]*)\/([0-9.-]*),([0-9.-]*)\/@([0-9.-]*),([0-9.-]*),([0-9]*)z\/data=(.*)$/;

  GSVHyperlapse.dataRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/g;

  GSVHyperlapse.dataLatLngRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/;

  GSVHyperlapse.ldr = new GSVPANO.PanoLoader();

  GSVHyperlapse.ldrStack = [];

  _class = GSVHyperlapse;

  GSVHyperlapse.onError = function(err) {
    return alert("error");
  };

  GSVHyperlapse.onMessage = function() {
    return null;
  };

  GSVHyperlapse.onPanoramaLoad = function() {
    return null;
  };

  GSVHyperlapse.onAnalyzeComplete = function() {
    return null;
  };

  GSVHyperlapse.onComposeComplete = function() {
    return null;
  };

  GSVHyperlapse.onProgress = function() {
    return null;
  };

  GSVHyperlapse.onCancel = function() {
    return null;
  };

  function GSVHyperlapse(name, map) {
    this.name = name;
    this.bCancel = false;
    this.bWaiting = false;
    this.uniqueId = uniqueID();
    this.panoList = [];
    this.client = new google.maps.StreetViewService();
    this.map = new google.maps.Map(map, {
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      zoom: 16
    });
    this.report = {};
  }

  GSVHyperlapse.prototype.cancel = function() {
    this.bCancel = true;
    if (!this.bWaiting) {
      return _class.onCancel.call(this);
    }
  };

  GSVHyperlapse.prototype.createPanoData = function(res) {
    return {
      id: res.location.pano,
      rotation: res.tiles.centerHeading,
      pitch: res.tiles.originPitch,
      latLng: res.location.latLng,
      date: res.imageDate
    };
  };

  GSVHyperlapse.prototype.createFromDirection = function(url, args) {
    var prevId, rawPts, requestRoute, retrivePanoData, routeRes, searchRadius, step, subdivideRoute, travelMode;
    travelMode = args.travelMode;
    step = parseFloat(args.step);
    searchRadius = parseFloat(args.searchRadius);
    rawPts = [];
    routeRes = null;
    prevId = '';
    this.report.settings = "method: direction\nurl: " + url + "\nstep: " + step + "\nsearchRadius: " + searchRadius;
    requestRoute = (function(_this) {
      return function() {
        var center, destination, i, m, origin, r, req, result, waypoints, wp, zoom;
        result = _class.dirRegex.exec(url);
        if (result == null) {
          alert("cannot parse url");
          return;
        }
        origin = new google.maps.LatLng(result[1], result[2]);
        destination = new google.maps.LatLng(result[3], result[4]);
        center = new google.maps.LatLng(result[5], result[6]);
        zoom = parseInt(result[7]);
        _this.map.setZoom(zoom);
        _this.map.setCenter(center);
        req = {
          origin: origin,
          destination: destination,
          travelMode: travelMode
        };
        waypoints = [];
        if ((result = result[8].match(GSVHyperlapse.dataRegex)) != null) {
          for (i in result) {
            r = result[i];
            m = GSVHyperlapse.dataLatLngRegex.exec(r);
            wp = new google.maps.LatLng(m[2], m[1]);
            waypoints.push({
              location: wp.toString(),
              stopover: false
            });
          }
          req.waypoints = waypoints;
        }
        return GSVHyperlapse.dirService.route(req, function(res, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            routeRes = res;
            return subdivideRoute();
          } else {
            return _class.onMessage.call(_this, "cannot get route.");
          }
        });
      };
    })(this);
    subdivideRoute = (function(_this) {
      return function() {
        var a, b, d, i, j, m, path, pt, r, ref, route;
        if (_this.bCancel) {
          _class.onCancel.call(_this);
          return;
        }
        _class.onMessage.call(_this, "requesting route..");
        _class.onMessage.call(_this, "analyzing route..");
        route = routeRes.routes[0];
        path = route.overview_path;
        _class.onMessage.call(_this, "path length: " + (parseInt(google.maps.geometry.spherical.computeLength(path))) + "(m), step: " + step + "(m), search radius: " + searchRadius + " (m)");
        console.log(path);
        d = 0;
        r = 0;
        m = 0;
        a = b = null;
        for (i = j = 0, ref = path.length - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          a = path[i];
          b = path[i + 1];
          d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
          m = -r + step;
          if (d < m) {
            r += d;
          } else {
            while (m < d) {
              pt = getFollowedPath(m, a, b);
              rawPts.push(pt);
              m += step;
            }
            r = step - (m - d);
          }
        }
        _this.map.fitBounds(route.bounds);
        path = new google.maps.Polyline({
          path: path,
          geodesic: true,
          strokeColor: '#000000',
          strokeOpacity: 1.0,
          strokeWeight: 2
        });
        path.setMap(_this.map);
        _class.onMessage.call(_this, "num of waypoints: " + rawPts.length);
        return retrivePanoData();
      };
    })(this);
    retrivePanoData = (function(_this) {
      return function() {
        var idx, onLoad;
        _class.onMessage.call(_this, "retriving pano id..");
        idx = 0;
        onLoad = function(res, status) {
          var marker, pano;
          if (_this.bCancel) {
            _class.onCancel.call(_this);
            return;
          }
          if (status === google.maps.StreetViewStatus.OK) {
            pano = _this.createPanoData(res);
            if (pano.id !== prevId) {
              _this.panoList.push(pano);
              marker = new google.maps.Marker({
                position: pano.latLng,
                map: _this.map,
                title: "" + idx
              });
              prevId = pano.id;
              console.log(pano.id);
            }
          }
          _class.onProgress.call(_this, idx, rawPts.length);
          if (++idx < rawPts.length) {
            return _this.client.getPanoramaByLocation(rawPts[idx], searchRadius, onLoad);
          } else {
            console.log(_this.panoList);
            _this.bWaiting = false;
            _class.onMessage.call(_this, "total pano id: " + _this.panoList.length);
            _class.onProgress.call(_this, idx, rawPts.length);
            return _class.onAnalyzeComplete.call(_this);
          }
        };
        _this.bWaiting = true;
        prevId = '';
        return _this.client.getPanoramaByLocation(rawPts[idx], searchRadius, onLoad);
      };
    })(this);
    return requestRoute();
  };

  GSVHyperlapse.prototype.createFromPanoId = function(list) {
    var idx, onLoad;
    idx = 0;
    this.report.settings = "method: panoid";
    onLoad = (function(_this) {
      return function(res, status) {
        var marker, pano;
        if (idx === 0) {
          _class.onMessage.call(_this, "analyzing..");
        }
        if (status === google.maps.StreetViewStatus.OK) {
          if (_this.bCancel) {
            _class.onCancel.call(_this);
            return;
          }
          pano = _this.createPanoData(res);
          _this.panoList.push(pano);
          if (idx === 0) {
            _this.map.setCenter(pano.latLng);
            _this.map.setZoom(13);
          }
          marker = new google.maps.Marker({
            position: pano.latLng,
            map: _this.map,
            title: "" + idx
          });
          _class.onProgress.call(_this, idx, list.length);
          if (++idx < list.length) {
            return _this.client.getPanoramaById(list[idx], onLoad);
          } else {
            _this.bWaiting = false;
            _class.onMessage.call(_this, "total pano id: " + _this.panoList.length);
            _class.onProgress.call(_this, idx, list.length);
            return _class.onAnalyzeComplete.call(_this);
          }
        } else {
          return alert("error on createFromPanoId() : " + status);
        }
      };
    })(this);
    this.bWaiting = true;
    return this.client.getPanoramaById(list[idx], onLoad);
  };

  GSVHyperlapse.prototype.compose = function(params) {
    var headingMode, idx, loader, onCompose, pano, ref, ref1, writeToTag, zoom;
    if (this.panoList.length === 0) {
      _class.onMessage.call(this, "there is no pano id");
      return;
    }
    zoom = (ref = params.zoom) != null ? ref : 2;
    headingMode = (ref1 = params.heading) != null ? ref1 : GSVHyperlapseHeading.NORTH;
    console.log(headingMode, GSVHyperlapseHeading);
    switch (headingMode) {
      case GSVHyperlapseHeading.FORWARD:
        if (this.panoList.length < 2) {
          alert("cannot solve forward heading because pano length is less than 2.");
          return;
        }
    }
    loader = new GSVPANO.PanoLoader({
      zoom: zoom
    });
    this.report.panoIds = JSON.stringify((function() {
      var j, len, ref2, results;
      ref2 = this.panoList;
      results = [];
      for (j = 0, len = ref2.length; j < len; j++) {
        pano = ref2[j];
        results.push(pano.id);
      }
      return results;
    }).call(this));
    this.report.panoList = JSON.stringify(this.panoList);
    this.tagCanvas = document.createElement('canvas');
    this.tagCanvas.width = loader.width;
    this.tagCanvas.height = TAG_HEIGHT;
    this.tagCtx = this.tagCanvas.getContext('2d');
    this.glsl = Glsl({
      canvas: document.createElement('canvas'),
      fragment: document.getElementById("pano-rotation").textContent,
      variables: {
        heading: 0.0,
        pitch: 0.0,
        original: loader.canvas,
        tag: this.tagCanvas
      }
    });
    this.glsl.setSize(loader.width, loader.height + TAG_HEIGHT);
    _class.onMessage.call(this, "composing panorama.. size:" + loader.width + "x" + loader.height);
    writeToTag = (function(_this) {
      return function(name, value, x, y) {
        _this.tagCtx.fillStyle = '#ffffff';
        _this.tagCtx.fillText(value, x + 40, y);
        _this.tagCtx.fillStyle = '#ff0000';
        return _this.tagCtx.fillText(name, x, y);
      };
    })(this);
    onCompose = (function(_this) {
      return function() {
        var cursor, heading, i;
        if (_this.bCancel) {
          _class.onCancel.call(_this);
          return;
        }
        heading = _this.panoList[idx].rotation;
        switch (headingMode) {
          case GSVHyperlapseHeading.FORWARD:
            i = idx === 0 ? 1 : idx;
            heading += google.maps.geometry.spherical.computeHeading(_this.panoList[i].latLng, _this.panoList[i - 1].latLng);
            console.log(google.maps.geometry.spherical.computeHeading(_this.panoList[i].latLng, _this.panoList[i - 1].latLng));
        }
        _this.tagCtx.fillStyle = '#000000';
        _this.tagCtx.fillRect(0, 0, _this.tagCanvas.width, _this.tagCanvas.height);
        _this.tagCtx.fillStyle = '#ffffff';
        _this.tagCtx.font = '12px Arial';
        cursor = 0;
        writeToTag("uid", "" + _this.uniqueId, cursor++ * 0xff, 36);
        writeToTag("panoid", "" + _this.panoList[idx].id, cursor++ * 0xff, 36);
        writeToTag("lat", "" + (_this.panoList[idx].latLng.lat().toPrecision(17)), cursor++ * 0xff, 36);
        writeToTag("lng", "" + (_this.panoList[idx].latLng.lng().toPrecision(17)), cursor++ * 0xff, 36);
        writeToTag("head", "" + 0., cursor++ * 0xff, 36);
        writeToTag("date", "" + _this.panoList[idx].date, cursor++ * 0xff, 36);
        cursor = 0;
        writeToTag("zoom", "" + zoom, cursor++ * 0xff, 18);
        writeToTag("o_r", "" + (_this.panoList[idx].rotation.toPrecision(17)), cursor++ * 0xff, 18);
        writeToTag("o_p", "" + (_this.panoList[idx].pitch.toPrecision(17)), cursor++ * 0xff, 18);
        _this.glsl.set('heading', heading.toRad());
        _this.glsl.syncAll();
        _this.glsl.render();
        _class.onProgress.call(_this, idx, _this.panoList.length);
        _class.onPanoramaLoad.call(_this, idx, _this.glsl.canvas);
        if (++idx < _this.panoList.length) {
          return setTimeout(function() {
            return loader.composePanorama(_this.panoList[idx].id);
          }, 100);
        } else {
          _this.bWaiting = false;
          console.log("complete");
          _class.onProgress.call(_this, idx, _this.panoList.length);
          _class.onMessage.call(_this, "complete - total: " + _this.panoList.length + ", duration: " + (_this.panoList.length / 24));
          return _class.onComposeComplete.call(_this);
        }
      };
    })(this);
    loader.onPanoramaLoad = onCompose;
    loader.onError = function(msg) {
      return alert("error onCompose() : " + msg);
    };
    loader.onNoPanoramaData = function(status) {
      return alert("error onNoPanoramaData() : " + status);
    };
    idx = 0;
    this.bWaiting = true;
    return loader.composePanorama(this.panoList[idx].id);
  };

  return GSVHyperlapse;

})();

//# sourceMappingURL=data:application/json;base64,