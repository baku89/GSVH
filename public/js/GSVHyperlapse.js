var API_KEY, GSVHyperlapse, TAG_HEIGHT, getFollowedPath, pointOnLine,
  slice = [].slice;

Number.prototype.toRad = function() {
  return this * Math.PI / 180;
};

Number.prototype.toDeg = function() {
  return this * 180 / Math.PI;
};

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

TAG_HEIGHT = 40;

pointOnLine = function(t, a, b) {
  var lat1, lat2, lng1, lng2, x, y;
  lat1 = a.lat().toRad();
  lng1 = a.lng().toRad();
  lat2 = b.lat().toRad();
  lng2 = b.lng().toRad();
  x = lat1 + t * (lat2 - lat1);
  y = lng1 + t * (lng2 - lng1);
  return new google.maps.LatLng(x.toDeg(), y.toDeg());
};

getFollowedPath = function(m, a, b) {
  var d, t;
  d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
  if (m < 0 || d < m) {
    alert("error getFolowedPath");
  }
  t = m / d;
  return pointOnLine(t, a, b);
};

function uniqueID(){
	var randam = Math.floor(Math.random()*1000)
	var date = new Date();
	var time = date.getTime();
	return randam + time.toString();
};

GSVHyperlapse = (function() {
  var _class;

  GSVHyperlapse.API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

  GSVHyperlapse.DIST_BETWEEN_PTS = 5;

  GSVHyperlapse.MAX_PTS = 100;

  GSVHyperlapse.dirService = new google.maps.DirectionsService({});

  GSVHyperlapse.dirRegex = /dir\/([0-9.-]*),([0-9.-]*)\/([0-9.-]*),([0-9.-]*)\/@([0-9.-]*),([0-9.-]*),([0-9]*)z\/data=(.*)$/;

  GSVHyperlapse.dataRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/g;

  GSVHyperlapse.dataLatLngRegex = /!1d([0-9.-]*)!2d([0-9.-]*)/;

  GSVHyperlapse.ldr = new GSVPANO.PanoLoader();

  GSVHyperlapse.ldrStack = [];

  _class = GSVHyperlapse;

  GSVHyperlapse.onError = function(err) {
    return alert("error");
  };

  GSVHyperlapse.onMessage = function() {
    return null;
  };

  GSVHyperlapse.onPanoramaLoad = function() {
    return null;
  };

  GSVHyperlapse.onAnalyzeComplete = function() {
    return null;
  };

  GSVHyperlapse.onProgress = function() {
    return null;
  };

  GSVHyperlapse.onCancel = function() {
    return null;
  };

  function GSVHyperlapse(args) {
    this.url = args.url;
    this.name = args.name;
    this.step = parseFloat(args.step);
    this.quality = args.zoom;
    this.bCancel = false;
    this.bWaiting = false;
    this.searchRadius = args.searchRadius;
    this.uniqueId = uniqueID();
    if (args.travelMode === 'driving') {
      this.travelMode = google.maps.DirectionsTravelMode.DRIVING;
    } else if (args.travelMode === 'walking') {
      this.travelMode = google.maps.DirectionsTravelMode.WALKING;
    }
  }

  GSVHyperlapse.prototype.setMap = function(elm) {
    return this.mapElm = elm;
  };

  GSVHyperlapse.prototype.cancel = function() {
    this.bCancel = true;
    if (!this.bWaiting) {
      return _class.onCancel.call(this);
    }
  };

  GSVHyperlapse.prototype.trace = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, ["[" + this.name + "]"].concat(slice.call(args)));
  };

  GSVHyperlapse.prototype.traceBold = function(str) {
    return console.log("%c[" + this.name + "] " + str + " --------------------", "color:orange;font-weight:bold;");
  };

  GSVHyperlapse.prototype.create = function() {
    var _self, data, i, m, r, req, result, wp;
    this.bWaiting = true;
    this.traceBold("create");
    result = _class.dirRegex.exec(this.url);
    if (result == null) {
      alert("unco");
      _class.onMessage.call(this, "cannot parse url");
      return;
    }
    this.origin = new google.maps.LatLng(result[1], result[2]);
    this.destination = new google.maps.LatLng(result[3], result[4]);
    this.centroid = new google.maps.LatLng(result[5], result[6]);
    this.zoom = parseInt(result[7]);
    this.trace("origin: " + this.origin, "destination: " + this.destination);
    req = {
      origin: this.origin,
      destination: this.destination,
      travelMode: this.travelMode
    };
    this.waypoints = [];
    data = result[8];
    result = data.match(GSVHyperlapse.dataRegex);
    if (result != null) {
      for (i in result) {
        r = result[i];
        m = GSVHyperlapse.dataLatLngRegex.exec(r);
        wp = new google.maps.LatLng(m[2], m[1]);
        this.waypoints.push({
          location: wp.toString(),
          stopover: false
        });
      }
      this.trace("num of waypoints:", this.waypoints.length);
      req.waypoints = this.waypoints;
    }
    this.trace("request:", req);
    _self = this;
    this.map = new google.maps.Map(this.mapElm, {
      center: this.centroid,
      zoom: this.zoom,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    return GSVHyperlapse.dirService.route(req, function(res, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        return _self.analyze(res);
      } else {
        return _class.onMessage.call(this, "cannot get route.");
      }
    });
  };

  GSVHyperlapse.prototype.analyze = function(res) {
    var a, b, d, i, j, legs, m, path, pt, r, ref, route;
    if (this.bCancel) {
      _class.onCancel.call(this);
      return;
    }
    this.traceBold("analyze");
    _class.onMessage.call(this, "analyzing route..");
    this.trace(res.routes);
    this.rawPts = [];
    route = res.routes[0];
    path = route.overview_path;
    legs = route.legs;
    _class.onMessage.call(this, "<strong>path length: " + (parseInt(google.maps.geometry.spherical.computeLength(path))) + "(m), step: " + this.step + "(m), search radius: " + this.searchRadius + " (m)</strong>");
    d = 0;
    r = 0;
    m = 0;
    a = b = null;
    this.trace("total distance:", totalDist);
    for (i = j = 0, ref = path.length - 2; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      a = path[i];
      b = path[i + 1];
      d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
      m = -r + this.step;
      if (d < m) {
        r += d;
      } else {
        while (m < d) {
          pt = getFollowedPath(m, a, b);
          this.rawPts.push(pt);
          m += this.step;
        }
        r = this.step - (m - d);
      }
    }
    this.trace("points:", this.rawPts.length);
    this.traceBold("fetch panoramas");
    this.map.fitBounds(route.bounds);
    path = new google.maps.Polyline({
      path: path,
      strokeColor: '#000000',
      strokeOpacity: 1.0,
      strokeWeight: 2
    });
    path.setMap(this.map);
    _class.onMessage.call(this, "num of waypoints: " + this.rawPts.length);
    return this.getPanoInfoOnWay();
  };

  GSVHyperlapse.prototype.getPanoInfoOnWay = function() {
    var idx, onError, onLoad, prevId, self;
    self = this;
    if (this.bCancel) {
      _class.onCancel.call(this);
      return;
    }
    this.loader = new GSVPANO.PanoLoader({
      zoom: this.quality,
      searchRadius: this.searchRadius
    });
    this.loader.onError = function(msg) {
      return onError.call(self, msg);
    };
    this.loader.onNoPanoramaData = function(status) {
      return onError.call(self);
    };
    _class.onMessage.call(this, "retriving pano id..");
    idx = 0;
    this.panoList = [];
    this.bWaiting = true;
    this.loader.load(this.rawPts[idx], function() {
      return onLoad.call(self);
    });
    onError = function(msg) {
      return null;
    };
    prevId = '';
    return onLoad = function() {
      var id, marker, pano;
      if (this.bCancel) {
        _class.onCancel.call(this);
        return;
      }
      id = this.loader.id;
      _class.onProgress.call(this, idx, this.rawPts.length);
      if ((id != null) && id !== prevId) {
        pano = {
          id: id,
          rotation: this.loader.rotation,
          pitch: this.loader.pitch,
          lat: this.loader.location.lat(),
          lng: this.loader.location.lng()
        };
        this.panoList.push(pano);
        marker = new google.maps.Marker({
          position: this.loader.location,
          map: this.map,
          title: "" + idx
        });
        prevId = id;
      }
      if (++idx < this.rawPts.length) {
        return this.loader.load(this.rawPts[idx], function() {
          return onLoad.call(self);
        });
      } else {
        _class.onMessage.call(this, "total pano id: " + this.panoList.length);
        this.bWaiting = false;
        _class.onProgress.call(this, idx, this.rawPts.length);
        return _class.onAnalyzeComplete.call(this);
      }
    };
  };

  GSVHyperlapse.prototype.compose = function() {
    var idx, onCompose, self, writeToTag;
    self = this;
    if (this.panoList.length === 0) {
      _class.onMessage.call(this, "there is no pano id");
      return;
    }
    this.tagCanvas = document.createElement('canvas');
    this.tagCanvas.width = this.loader.width;
    this.tagCanvas.height = TAG_HEIGHT;
    this.tagCtx = this.tagCanvas.getContext('2d');
    this.glsl = Glsl({
      canvas: document.createElement('canvas'),
      fragment: document.getElementById("pano-rotation").textContent,
      variables: {
        rotation: 0.0,
        pitch: 0.0,
        original: this.loader.canvas,
        tag: this.tagCanvas
      }
    });
    this.glsl.setSize(this.loader.width, this.loader.height + TAG_HEIGHT);
    _class.onMessage.call(this, "composing panorama.. size:" + this.loader.width + "x" + this.loader.height);
    this.loader.onError = function(msg) {
      return console.log(msg);
    };
    this.loader.onPanoramaLoad = function() {
      return onCompose.call(self);
    };
    this.loader.onNoPanoramaData = function(status) {
      return console.log(status);
    };
    idx = 0;
    this.bWaiting = true;
    this.loader.composePanorama(this.panoList[idx].id);
    writeToTag = function(name, value, x, y) {
      self.tagCtx.fillStyle = '#ffffff';
      self.tagCtx.fillText(value, x + 40, y);
      self.tagCtx.fillStyle = '#ff0000';
      return self.tagCtx.fillText(name, x, y);
    };
    return onCompose = function() {
      var cursor;
      console.log(idx);
      if (this.bCancel) {
        _class.onCancel.call(this);
        return;
      }
      this.tagCtx.fillStyle = '#000000';
      this.tagCtx.fillRect(0, 0, this.tagCanvas.width, this.tagCanvas.height);
      this.tagCtx.fillStyle = '#ffffff';
      this.tagCtx.font = '12px Arial';
      cursor = 0;
      writeToTag("uid", "" + this.uniqueId, cursor++ * 0xff, 36);
      writeToTag("lat", "" + (this.panoList[idx].lng.toPrecision(17)), cursor++ * 0xff, 36);
      writeToTag("lng", "" + (this.panoList[idx].lng.toPrecision(17)), cursor++ * 0xff, 36);
      writeToTag("hdng", "" + 0., cursor++ * 0xff, 36);
      writeToTag("pitch", "" + 0., cursor++ * 0xff, 36);
      writeToTag("date", "2014-04", cursor++ * 0xff, 36);
      cursor = 0;
      writeToTag("zoom", "" + this.quality, cursor++ * 0xff, 18);
      $('body').append(this.tagCanvas);
      this.glsl.set('rotation', this.panoList[idx].rotation);
      this.glsl.set('pitch', this.panoList[idx].pitch);
      this.glsl.syncAll();
      this.glsl.render();
      console.log(this.loader.rotation, this.loader.pitch);
      _class.onProgress.call(this, idx, this.panoList.length);
      _class.onPanoramaLoad.call(this, idx, this.glsl.canvas);
      if (++idx < this.panoList.length) {
        return setTimeout(function() {
          return self.loader.composePanorama(self.panoList[idx].id);
        }, 100);
      } else {
        this.bWaiting = false;
        this.traceBold("complete");
        this.trace("total panorama:", this.panoList.length);
        _class.onProgress.call(this, idx, this.panoList.length);
        return _class.onMessage.call(this, "complete - total: " + this.panoList.length + ", duration: " + (this.panoList.length / 24));
      }
    };
  };

  return GSVHyperlapse;

})();

//# sourceMappingURL=data:application/json;base64,