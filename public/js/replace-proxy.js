var $console, $progPano, $progSeq, $statPano, $statSeq, bFlip, basename, changedList, decode, destDir, fileList, gsvh, gsvp, img, load, onComplete, outCanvas, outCtx, searchNearestPano, searchRadius, sisyphus, srcCanvas, srcCtx, srcDir, ss, startTime, tagCanvas, tagCtx;

$console = null;

$progPano = null;

$statPano = null;

$progSeq = null;

$statSeq = null;

srcDir = "";

destDir = "";

fileList = null;

gsvh = null;

basename = null;

sisyphus = null;

gsvp = null;

startTime = null;

changedList = [];

ss = new google.maps.StreetViewService();

tagCanvas = tagCtx = null;

bFlip = false;

img = null;

srcCanvas = outCanvas = tagCanvas = null;

srcCtx = outCtx = tagCtx = null;

$(function() {
  $console = $('#console');
  $progPano = $('#prog-pano');
  $progSeq = $('#prog-seq');
  $statPano = $('#stat-pano');
  $statSeq = $('#stat-seq');
  sisyphus = $('#replace-proxy').sisyphus();
  $('#decode').on('click', decode);
  $('[name=file]').on('change', function() {
    $('[name=source]').val($('[name=file]').val());
    return sisyphus.saveAllData();
  });
  gsvp = new GSVPANO.PanoLoader({
    zoom: parseInt($('[name=zoom]').val())
  });
  gsvp.onProgress = function(p) {
    $statPano.html(p + "%");
    return $progPano.val(p);
  };
  img = new Image();
  srcCanvas = $('#src')[0];
  outCanvas = $('#out')[0];
  tagCanvas = $('#tag')[0];
  srcCtx = srcCanvas.getContext('2d');
  outCtx = outCanvas.getContext('2d');
  return tagCtx = tagCanvas.getContext('2d');
});

decode = function() {
  var f, files, zoom;
  srcDir = $('[name=source]').val();
  if (srcDir === "") {
    alert("please select source directory");
    return;
  }
  files = fs.readdirSync(srcDir);
  fileList = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = files.length; j < len; j++) {
      f = files[j];
      if (/\.png$/.test(f)) {
        results.push(f);
      }
    }
    return results;
  })();
  basename = path.basename(srcDir);
  zoom = parseInt($('[name=zoom').val());
  gsvp.setZoom(zoom);
  return load();
};

load = function() {
  var bChanged, err, filename, idx, loadImg, onLoadImg, saveAndNext, savePano;
  startTime = new Date();
  destDir = (path.dirname(srcDir)) + "/" + basename + ".HQ";
  try {
    mkdirp.sync(destDir);
  } catch (_error) {
    err = _error;
    alert("Destination directory already exists. Please delete '" + destDir + "' to continue.");
  }
  bFlip = false;
  bChanged = false;
  idx = 0;
  filename = "";
  changedList = [];
  loadImg = function() {
    var elapsed;
    elapsed = ((new Date()) - startTime) / 1000 / 60;
    $statSeq.html("(" + (idx + 1) + "/" + fileList.length + ") " + (elapsed.toPrecision(2)) + "min elapsed");
    $progSeq.val((idx + 1) / fileList.length * 100);
    filename = fileList[idx];
    return img.src = "file://" + srcDir + "/" + filename;
  };
  onLoadImg = function() {
    var headingOffset, height, i, j, pano, pixel, pt, ref, width, x;
    width = img.width;
    height = img.height;
    srcCanvas.width = img.width;
    srcCanvas.height = img.height;
    srcCtx.drawImage(img, 0, 0);
    headingOffset = 0;
    x = 0;
    for (i = j = 0, ref = srcCanvas.width - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      pixel = srcCtx.getImageData(i, 836, 1, 1).data;
      if (pixel[0] >= 128) {
        x = i;
        headingOffset = (x / srcCanvas.width) * 360;
        break;
      }
    }
    pt = {
      x: ((img.width + x) - 3) % img.width,
      y: 843
    };
    pixel = srcCtx.getImageData(pt.x, pt.y, 1, 1).data;
    if (pixel[0] > 128) {
      bFlip = true;
      x = img.width - (x + 12);
      headingOffset = (x / srcCanvas.width) * 360;
    } else {
      bFlip = false;
    }
    tagCanvas.width = img.width;
    tagCanvas.height = TAG_HEIGHT;
    if (bFlip) {
      tagCtx.save();
      tagCtx.translate(img.width, 0);
      tagCtx.scale(-1, 1);
      tagCtx.drawImage(img, 0, height - TAG_HEIGHT, width, TAG_HEIGHT, x, 0, width, TAG_HEIGHT);
      tagCtx.drawImage(img, 0, height - TAG_HEIGHT, width, TAG_HEIGHT, x - width, 0, width, TAG_HEIGHT);
      tagCtx.restore();
    } else {
      tagCtx.drawImage(img, 0, height - TAG_HEIGHT, width, TAG_HEIGHT, -x, 0, width, TAG_HEIGHT);
      tagCtx.drawImage(img, 0, height - TAG_HEIGHT, width, TAG_HEIGHT, -x + width, 0, width, TAG_HEIGHT);
    }
    pano = CanvasMatrixCode.decode(tagCanvas, 0, 10, 1664, TAG_HEIGHT - 10);
    if (pano === null) {
      outCanvas.width = gsvp.width;
      outCanvas.height = (img.height / img.width) * gsvp.width;
      outCtx.fillStyle = '#000000';
      outCtx.fillRect(0, 0, outCanvas.width, outCanvas.height);
      outCtx.drawImage(img, 0, 0, img.width, img.height, 0, 0, outCanvas.width, outCanvas.height);
      saveAndNext();
    }
    console.log(pano);
    return ss.getPanoramaById(pano.id, function(data, status) {
      var latLng, result;
      if (status === google.maps.StreetViewStatus.OK) {
        bChanged = false;
        return gsvp.composePanorama(pano.id, pano.heading + headingOffset);
      } else {
        bChanged = true;
        result = /([\-0-9.]+), ([\-0-9.]+)/.exec(pano.latLng);
        latLng = new google.maps.LatLng(result[1], result[2]);
        return searchNearestPano(latLng, function(newId, newLatLng, dist) {
          var changedInfo, changedTxt;
          console.log(newLatLng, newId, dist);
          changedInfo = {
            filename: filename,
            oldId: pano.id,
            newId: newId,
            oldLatLng: latLng.toString(),
            newLatLng: newLatLng.toString(),
            distance: dist
          };
          changedList.push(changedInfo);
          changedTxt = JSON.stringify(changedList);
          fs.writeFile(destDir + "/_report.txt", changedTxt);
          console.log("changed:" + filename + ", nearest pano: " + pano.id + " -> " + newId + ", distance from original: " + dist);
          return gsvp.composePanorama(newId, pano.heading + headingOffset);
        });
      }
    });
  };
  savePano = function() {
    console.log("save pano");
    outCanvas.width = gsvp.width;
    outCanvas.height = (img.height / img.width) * gsvp.width;
    outCtx.fillStyle = '#000000';
    outCtx.fillRect(0, 0, outCanvas.width, outCanvas.height);
    if (bFlip) {
      console.log("fliped");
      outCtx.save();
      outCtx.translate(outCanvas.width, 0);
      outCtx.scale(-1, 1);
    }
    outCtx.drawImage(gsvp.canvas, 0, 0);
    if (bFlip) {
      outCtx.restore();
    }
    outCtx.drawImage(img, 0, img.height - TAG_HEIGHT, img.width, TAG_HEIGHT, 0, outCanvas.height - TAG_HEIGHT, img.width, TAG_HEIGHT);
    if (bChanged) {
      outCtx.fillStyle = '#ff0000';
      outCtx.fillRect(outCanvas.width - 40, outCanvas.height - 40, 40, 40);
    }
    return saveAndNext();
  };
  saveAndNext = function() {
    var dest;
    dest = destDir + "/" + filename;
    saveCanvas(outCanvas, dest);
    if (++idx < fileList.length) {
      return loadImg();
    } else {
      return onComplete();
    }
  };
  img.onload = onLoadImg;
  gsvp.onPanoramaLoad = savePano;
  return loadImg();
};

searchRadius = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100];

searchNearestPano = function(origin, callback) {
  var complete, i, j, len, r, radius, remain, result;
  radius = 1;
  result = [];
  remain = searchRadius.length;
  console.log("searchNearestPano: " + origin);
  for (r = j = 0, len = searchRadius.length; j < len; r = ++j) {
    i = searchRadius[r];
    setTimeout(function() {
      return ss.getPanoramaByLocation(origin, r, function(data, status) {
        if (status === google.maps.StreetViewStatus.OK) {
          data = {
            id: data.location.pano,
            latLng: data.location.latLng,
            distance: google.maps.geometry.spherical.computeDistanceBetween(origin, data.location.latLng)
          };
          result.push(data);
        }
        if (--remain === 0) {
          return complete();
        }
      });
    }, 50 * i);
  }
  return complete = function() {
    var k, latLng, len1, minDist, pano;
    minDist = 100000000;
    pano = null;
    latLng = null;
    for (k = 0, len1 = result.length; k < len1; k++) {
      r = result[k];
      if (r.distance < minDist) {
        minDist = r.distance;
        pano = r.id;
        latLng = r.latLng;
      }
    }
    return callback(pano, latLng, minDist);
  };
};

onComplete = function() {
  return setTimeout(function() {
    var changedTxt;
    changedTxt = JSON.stringify(changedList);
    fs.writeFile(destDir + "/_report.txt", changedTxt);
    fs.renameSync(srcDir, srcDir + ".proxy");
    fs.renameSync(destDir, srcDir);
    return notifier.notify({
      title: "Proxy Replacer",
      message: "All done!",
      sound: true
    });
  }, 3000);
};

//# sourceMappingURL=data:application/json;base64,