var canvas, ctx, decode, err, fs, gui, img, load, nativeMenuBar, panoIds, sisyphus, win;

fs = require('fs');

gui = require('nw.gui');

win = gui.Window.get();

nativeMenuBar = new gui.Menu({
  type: 'menubar'
});

try {
  nativeMenuBar.createMacBuiltin('gi-eye');
  win.menu = nativeMenuBar;
} catch (_error) {
  err = _error;
  console.log(err.message);
}

img = new Image();

panoIds = [];

canvas = ctx = null;

sisyphus = null;

$(function() {
  sisyphus = $('#replace-proxy').sisyphus();
  canvas = $('#pv')[0];
  ctx = canvas.getContext('2d');
  $('#decode').on('click', decode);
  return $('[name=file]').on('change', function() {
    $('[name=source]').val($('[name=file]').val());
    return sisyphus.saveAllData();
  });
});

decode = function() {
  var srcDir;
  srcDir = $('[name=source]').val();
  if (srcDir === "") {
    alert("please select source directory");
    return;
  }
  return fs.readdir(srcDir, function(err, files) {
    var f, list;
    if (err) {
      throw err;
    }
    list = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        f = files[i];
        if (/\.png$/.test(f)) {
          results.push(f);
        }
      }
      return results;
    })();
    return load(srcDir, list);
  });
};

load = function(dir, list) {
  var next;
  next = function(idx) {
    img.onload = function() {
      var pano;
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      pano = CanvasMatrixCode.decode(canvas, 0, canvas.height - 30, canvas.width, 30);
      console.log(pano);
      if (++idx < list.length) {
        return next(idx);
      }
    };
    return img.src = dir + "/" + list[idx];
  };
  return next(0);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcGxhY2UtcHJveHkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsbUZBQUE7O0FBQUEsRUFBQSxHQUFPLE9BQUEsQ0FBUSxJQUFSLENBQVAsQ0FBQTs7QUFBQSxHQUNBLEdBQU8sT0FBQSxDQUFRLFFBQVIsQ0FEUCxDQUFBOztBQUFBLEdBTUEsR0FBTSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FBQSxDQU5OLENBQUE7O0FBQUEsYUFPQSxHQUFvQixJQUFBLEdBQUcsQ0FBQyxJQUFKLENBQVM7QUFBQSxFQUFDLElBQUEsRUFBTSxTQUFQO0NBQVQsQ0FQcEIsQ0FBQTs7QUFTQTtBQUNDLEVBQUEsYUFBYSxDQUFDLGdCQUFkLENBQStCLFFBQS9CLENBQUEsQ0FBQTtBQUFBLEVBQ0EsR0FBRyxDQUFDLElBQUosR0FBVyxhQURYLENBREQ7Q0FBQSxjQUFBO0FBSUMsRUFESyxZQUNMLENBQUE7QUFBQSxFQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBRyxDQUFDLE9BQWhCLENBQUEsQ0FKRDtDQVRBOztBQUFBLEdBaUJBLEdBQVUsSUFBQSxLQUFBLENBQUEsQ0FqQlYsQ0FBQTs7QUFBQSxPQWtCQSxHQUFVLEVBbEJWLENBQUE7O0FBQUEsTUFtQkEsR0FBUyxHQUFBLEdBQU0sSUFuQmYsQ0FBQTs7QUFBQSxRQXFCQSxHQUFXLElBckJYLENBQUE7O0FBQUEsQ0F3QkEsQ0FBRSxTQUFBLEdBQUE7QUFDRCxFQUFBLFFBQUEsR0FBVyxDQUFBLENBQUUsZ0JBQUYsQ0FBbUIsQ0FBQyxRQUFwQixDQUFBLENBQVgsQ0FBQTtBQUFBLEVBRUEsTUFBQSxHQUFTLENBQUEsQ0FBRSxLQUFGLENBQVMsQ0FBQSxDQUFBLENBRmxCLENBQUE7QUFBQSxFQUdBLEdBQUEsR0FBTSxNQUFNLENBQUMsVUFBUCxDQUFrQixJQUFsQixDQUhOLENBQUE7QUFBQSxFQUtBLENBQUEsQ0FBRSxTQUFGLENBQVksQ0FBQyxFQUFiLENBQWdCLE9BQWhCLEVBQXlCLE1BQXpCLENBTEEsQ0FBQTtTQU9BLENBQUEsQ0FBRSxhQUFGLENBQWdCLENBQUMsRUFBakIsQ0FBb0IsUUFBcEIsRUFBOEIsU0FBQSxHQUFBO0FBQzdCLElBQUEsQ0FBQSxDQUFFLGVBQUYsQ0FDQyxDQUFDLEdBREYsQ0FDTyxDQUFBLENBQUUsYUFBRixDQUFnQixDQUFDLEdBQWpCLENBQUEsQ0FEUCxDQUFBLENBQUE7V0FFQSxRQUFRLENBQUMsV0FBVCxDQUFBLEVBSDZCO0VBQUEsQ0FBOUIsRUFSQztBQUFBLENBQUYsQ0F4QkEsQ0FBQTs7QUFBQSxNQXlDQSxHQUFTLFNBQUEsR0FBQTtBQUNSLE1BQUEsTUFBQTtBQUFBLEVBQUEsTUFBQSxHQUFTLENBQUEsQ0FBRSxlQUFGLENBQWtCLENBQUMsR0FBbkIsQ0FBQSxDQUFULENBQUE7QUFFQSxFQUFBLElBQUcsTUFBQSxLQUFVLEVBQWI7QUFDQyxJQUFBLEtBQUEsQ0FBTSxnQ0FBTixDQUFBLENBQUE7QUFDQSxVQUFBLENBRkQ7R0FGQTtTQU1BLEVBQUUsQ0FBQyxPQUFILENBQVcsTUFBWCxFQUFtQixTQUFDLEdBQUQsRUFBTSxLQUFOLEdBQUE7QUFDbEIsUUFBQSxPQUFBO0FBQUEsSUFBQSxJQUFHLEdBQUg7QUFBWSxZQUFNLEdBQU4sQ0FBWjtLQUFBO0FBQUEsSUFFQSxJQUFBOztBQUFRO1dBQUEsdUNBQUE7cUJBQUE7WUFBc0IsUUFBUSxDQUFDLElBQVQsQ0FBYyxDQUFkO0FBQXRCLHVCQUFBLEVBQUE7U0FBQTtBQUFBOztRQUZSLENBQUE7V0FJQSxJQUFBLENBQUssTUFBTCxFQUFhLElBQWIsRUFMa0I7RUFBQSxDQUFuQixFQVBRO0FBQUEsQ0F6Q1QsQ0FBQTs7QUFBQSxJQXlEQSxHQUFPLFNBQUMsR0FBRCxFQUFNLElBQU4sR0FBQTtBQUVOLE1BQUEsSUFBQTtBQUFBLEVBQUEsSUFBQSxHQUFPLFNBQUMsR0FBRCxHQUFBO0FBQ04sSUFBQSxHQUFHLENBQUMsTUFBSixHQUFhLFNBQUEsR0FBQTtBQUVaLFVBQUEsSUFBQTtBQUFBLE1BQUEsTUFBTSxDQUFDLEtBQVAsR0FBZSxHQUFHLENBQUMsS0FBbkIsQ0FBQTtBQUFBLE1BQ0EsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsR0FBRyxDQUFDLE1BRHBCLENBQUE7QUFBQSxNQUdBLEdBQUcsQ0FBQyxTQUFKLENBQWMsR0FBZCxFQUFtQixDQUFuQixFQUFzQixDQUF0QixDQUhBLENBQUE7QUFBQSxNQUtBLElBQUEsR0FBTyxnQkFBZ0IsQ0FBQyxNQUFqQixDQUF3QixNQUF4QixFQUFnQyxDQUFoQyxFQUFtQyxNQUFNLENBQUMsTUFBUCxHQUFnQixFQUFuRCxFQUF1RCxNQUFNLENBQUMsS0FBOUQsRUFBcUUsRUFBckUsQ0FMUCxDQUFBO0FBQUEsTUFPQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVosQ0FQQSxDQUFBO0FBU0EsTUFBQSxJQUFHLEVBQUEsR0FBQSxHQUFRLElBQUksQ0FBQyxNQUFoQjtlQUNDLElBQUEsQ0FBSyxHQUFMLEVBREQ7T0FYWTtJQUFBLENBQWIsQ0FBQTtXQWNBLEdBQUcsQ0FBQyxHQUFKLEdBQWEsR0FBRCxHQUFLLEdBQUwsR0FBUSxJQUFLLENBQUEsR0FBQSxFQWZuQjtFQUFBLENBQVAsQ0FBQTtTQWlCQSxJQUFBLENBQUssQ0FBTCxFQW5CTTtBQUFBLENBekRQLENBQUEiLCJmaWxlIjoicmVwbGFjZS1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImZzIFx0XHQ9IHJlcXVpcmUgJ2ZzJ1xuZ3VpIFx0PSByZXF1aXJlICdudy5ndWknXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgd2luZG93IHNldHVwXG5cbndpbiA9IGd1aS5XaW5kb3cuZ2V0KClcbm5hdGl2ZU1lbnVCYXIgPSBuZXcgZ3VpLk1lbnUoe3R5cGU6ICdtZW51YmFyJ30pXG5cbnRyeVxuXHRuYXRpdmVNZW51QmFyLmNyZWF0ZU1hY0J1aWx0aW4oJ2dpLWV5ZScpXG5cdHdpbi5tZW51ID0gbmF0aXZlTWVudUJhclxuY2F0Y2ggZXJyXG5cdGNvbnNvbGUubG9nIGVyci5tZXNzYWdlXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuaW1nID0gbmV3IEltYWdlKClcbnBhbm9JZHMgPSBbXVxuY2FudmFzID0gY3R4ID0gbnVsbFxuXG5zaXN5cGh1cyA9IG51bGxcblxuXG4kIC0+XG5cdHNpc3lwaHVzID0gJCgnI3JlcGxhY2UtcHJveHknKS5zaXN5cGh1cygpXG5cblx0Y2FudmFzID0gJCgnI3B2JylbMF1cblx0Y3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcblxuXHQkKCcjZGVjb2RlJykub24gJ2NsaWNrJywgZGVjb2RlXG5cblx0JCgnW25hbWU9ZmlsZV0nKS5vbiAnY2hhbmdlJywgLT5cblx0XHQkKCdbbmFtZT1zb3VyY2VdJylcblx0XHRcdC52YWwoICQoJ1tuYW1lPWZpbGVdJykudmFsKCkgKVxuXHRcdHNpc3lwaHVzLnNhdmVBbGxEYXRhKClcblxuXG5cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZGVjb2RlID0gLT5cblx0c3JjRGlyID0gJCgnW25hbWU9c291cmNlXScpLnZhbCgpXG5cblx0aWYgc3JjRGlyID09IFwiXCJcblx0XHRhbGVydCBcInBsZWFzZSBzZWxlY3Qgc291cmNlIGRpcmVjdG9yeVwiXG5cdFx0cmV0dXJuXG5cblx0ZnMucmVhZGRpciBzcmNEaXIsIChlcnIsIGZpbGVzKSAtPlxuXHRcdGlmIGVyciB0aGVuIHRocm93IGVyclxuXG5cdFx0bGlzdCA9IChmIGZvciBmIGluIGZpbGVzIHdoZW4gL1xcLnBuZyQvLnRlc3QoZikpXG5cblx0XHRsb2FkKHNyY0RpciwgbGlzdClcblxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5sb2FkID0gKGRpciwgbGlzdCkgLT5cblxuXHRuZXh0ID0gKGlkeCkgLT5cblx0XHRpbWcub25sb2FkID0gLT5cblxuXHRcdFx0Y2FudmFzLndpZHRoID0gaW1nLndpZHRoXG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodFxuXG5cdFx0XHRjdHguZHJhd0ltYWdlKGltZywgMCwgMClcblxuXHRcdFx0cGFubyA9IENhbnZhc01hdHJpeENvZGUuZGVjb2RlKGNhbnZhcywgMCwgY2FudmFzLmhlaWdodCAtIDMwLCBjYW52YXMud2lkdGgsIDMwKVxuXG5cdFx0XHRjb25zb2xlLmxvZyBwYW5vXG5cblx0XHRcdGlmICsraWR4IDwgbGlzdC5sZW5ndGhcblx0XHRcdFx0bmV4dChpZHgpXG5cblx0XHRpbWcuc3JjID0gXCIje2Rpcn0vI3tsaXN0W2lkeF19XCJcblxuXHRuZXh0KDApXG5cblxuIl19