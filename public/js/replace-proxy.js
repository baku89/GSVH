var $console, $progPano, $progSeq, $statPano, $statSeq, basename, decode, destDir, fileList, gsvh, gsvp, load, log, onComplete, sisyphus, srcDir, startTime;

$console = null;

$progPano = null;

$statPano = null;

$progSeq = null;

$statSeq = null;

srcDir = "";

destDir = "";

fileList = null;

gsvh = null;

basename = null;

sisyphus = null;

gsvp = null;

startTime = null;

log = function(str) {
  $console.append(str + "\n");
  return $console.scrollTop = $console.scrollHeight;
};

$(function() {
  $console = $('#console');
  $progPano = $('#prog-pano');
  $progSeq = $('#prog-seq');
  $statPano = $('#stat-pano');
  $statSeq = $('#stat-seq');
  sisyphus = $('#replace-proxy').sisyphus();
  $('#decode').on('click', decode);
  $('[name=file]').on('change', function() {
    $('[name=source]').val($('[name=file]').val());
    return sisyphus.saveAllData();
  });
  gsvp = new GSVPANO.PanoLoader({
    zoom: parseInt($('[name=zoom]').val())
  });
  return gsvp.onProgress = function(p) {
    $statPano.html(p + "%");
    return $progPano.val(p);
  };
});

decode = function() {
  var f, files;
  srcDir = $('[name=source]').val();
  if (srcDir === "") {
    alert("please select source directory");
    return;
  }
  files = fs.readdirSync(srcDir);
  fileList = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = files.length; i < len; i++) {
      f = files[i];
      if (/\.png$/.test(f)) {
        results.push(f);
      }
    }
    return results;
  })();
  basename = path.basename(srcDir);
  return load();
};

load = function() {
  var err, filename, idx, img, loadImg, onLoadImg, outCanvas, outCtx, savePano, srcCanvas, srcCtx;
  startTime = new Date();
  destDir = (path.dirname(srcDir)) + "/" + basename + ".HQ";
  try {
    fs.mkdirSync(destDir);
  } catch (_error) {
    err = _error;
    console.log(err);
  }
  img = new Image();
  srcCanvas = $('#src')[0];
  outCanvas = $('#out')[0];
  srcCtx = srcCanvas.getContext('2d');
  outCtx = outCanvas.getContext('2d');
  idx = 0;
  filename = "";
  loadImg = function() {
    var elapsed;
    elapsed = ((new Date()) - startTime) / 1000 / 60;
    $statSeq.html("(" + (idx + 1) + "/" + fileList.length + ") " + (elapsed.toPrecision(2)) + "min elapsed");
    $progSeq.val((idx + 1) / fileList.length * 100);
    filename = fileList[idx];
    return img.src = "file:///" + srcDir + "/" + filename;
  };
  onLoadImg = function() {
    var pano;
    srcCanvas.width = img.width;
    srcCanvas.height = img.height;
    srcCtx.drawImage(img, 0, 0);
    pano = CanvasMatrixCode.decode(srcCanvas, 0, srcCanvas.height - TAG_HEIGHT + 10, 1664, TAG_HEIGHT - 10);
    console.log(pano);
    return gsvp.composePanorama(pano.id, pano.heading);
  };
  savePano = function() {
    var dest;
    outCanvas.width = gsvp.width;
    outCanvas.height = (img.height / img.width) * gsvp.width;
    outCtx.drawImage(gsvp.canvas, 0, 0);
    outCtx.drawImage(img, 0, img.height - TAG_HEIGHT, img.width, TAG_HEIGHT, 0, outCanvas.height - TAG_HEIGHT, img.width, TAG_HEIGHT);
    dest = destDir + "/" + filename;
    saveCanvas(outCanvas, dest);
    if (++idx < fileList.length) {
      return loadImg();
    } else {
      return onComplete();
    }
  };
  img.onload = onLoadImg;
  gsvp.onPanoramaLoad = savePano;
  return loadImg();
};

onComplete = function() {
  fs.renameSync(srcDir, srcDir + ".proxy");
  fs.renameSync(destDir, srcDir);
  return notifier.notify({
    title: "Proxy Replacer",
    message: "All done!",
    sound: true
  });
};

//# sourceMappingURL=data:application/json;base64,