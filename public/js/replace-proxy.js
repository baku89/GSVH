var $console, basename, canvas, compose, ctx, decode, err, fileList, fs, gsvh, gui, load, log, nativeMenuBar, onComplete, panoList, path, savePano, srcDir, win;

fs = require('fs');

path = require('path');

gui = require('nw.gui');

win = gui.Window.get();

nativeMenuBar = new gui.Menu({
  type: 'menubar'
});

try {
  nativeMenuBar.createMacBuiltin('gi-eye');
  win.menu = nativeMenuBar;
} catch (_error) {
  err = _error;
  console.log(err.message);
}

panoList = [];

canvas = ctx = null;

srcDir = null;

fileList = null;

gsvh = null;

canvas = document.cleateElement('canvas');

basename = null;

$console = null;

log = function(str) {
  $console.append(str + "\n");
  return $console.scrollTop = $console.scrollHeight;
};

$(function() {
  $console = $('#console');
  $('#replace-proxy').sisyphus();
  canvas = $('#pv')[0];
  ctx = canvas.getContext('2d');
  $('#decode').on('click', decode);
  return $('[name=file]').on('change', function() {
    $('[name=source]').val($('[name=file]').val());
    return sisyphus.saveAllData();
  });
});

decode = function() {
  srcDir = $('[name=source]').val();
  if (srcDir === "") {
    alert("please select source directory");
    return;
  }
  return fs.readdir(srcDir, function(err, files) {
    var f;
    if (err) {
      throw err;
    }
    fileList = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        f = files[i];
        if (/\.png$/.test(f)) {
          results.push(f);
        }
      }
      return results;
    })();
    basename = path.basename(srcDir);
    return load();
  });
};

load = function() {
  var e, img, next;
  log("loading..");
  try {
    fs.mkdirSync((path.dirname(srcDir)) + "/" + basename + ".HQ");
  } catch (_error) {
    e = _error;
    console.log(e);
  }
  img = new Image();
  next = function(idx) {
    var filename;
    img.onload = function() {
      var pano;
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      pano = CanvasMatrixCode.decode(canvas, 0, canvas.height - 30, canvas.width, 30);
      pano.filename = filename;
      panoList.push(pano);
      if (++idx < fileList.length) {
        return next(idx);
      } else {
        return compose();
      }
    };
    filename = fileList[idx];
    return img.src = "file:///" + srcDir + "/" + filename;
  };
  return next(0);
};

compose = function() {
  log("composing..");
  gsvh = new GSVHyperlapse(basename, $('#pv')[0]);
  gsvh.setParameters({
    zoom: 4
  });
  gsvh.panoList = panoList;
  GSVHyperlapse.onMessage = log;
  GSVHyperlapse.onProgress = function(loaded, total) {
    return log("composed (" + loaded + "/" + total + ")");
  };
  GSVHyperlapse.onPanoramaLoad = savePano;
  GSVHyperlapse.onComposeComplete = onComplete;
  return gsvh.compose();
};

savePano = function(idx, pano, data) {
  return $('#pano').append(pano);
};

onComplete = function() {
  return null;
};

//# sourceMappingURL=data:application/json;base64,