var $console, $progPano, $progSeq, $statPano, $statSeq, basename, decode, destDir, fileList, gsvh, gsvp, load, log, onComplete, sisyphus, srcDir, ss, startTime;

$console = null;

$progPano = null;

$statPano = null;

$progSeq = null;

$statSeq = null;

srcDir = "";

destDir = "";

fileList = null;

gsvh = null;

basename = null;

sisyphus = null;

gsvp = null;

startTime = null;

ss = new google.maps.StreetViewService();

log = function(str) {
  $console.append(str + "\n");
  return $console.scrollTop = $console.scrollHeight;
};

$(function() {
  $console = $('#console');
  $progPano = $('#prog-pano');
  $progSeq = $('#prog-seq');
  $statPano = $('#stat-pano');
  $statSeq = $('#stat-seq');
  sisyphus = $('#replace-proxy').sisyphus();
  $('#decode').on('click', decode);
  $('[name=file]').on('change', function() {
    $('[name=source]').val($('[name=file]').val());
    return sisyphus.saveAllData();
  });
  gsvp = new GSVPANO.PanoLoader({
    zoom: parseInt($('[name=zoom]').val())
  });
  return gsvp.onProgress = function(p) {
    $statPano.html(p + "%");
    return $progPano.val(p);
  };
});

decode = function() {
  var f, files;
  srcDir = $('[name=source]').val();
  if (srcDir === "") {
    alert("please select source directory");
    return;
  }
  files = fs.readdirSync(srcDir);
  fileList = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = files.length; j < len; j++) {
      f = files[j];
      if (/\.png$/.test(f)) {
        results.push(f);
      }
    }
    return results;
  })();
  basename = path.basename(srcDir);
  return load();
};

load = function() {
  var err, filename, idx, img, loadImg, onLoadImg, outCanvas, outCtx, savePano, srcCanvas, srcCtx;
  startTime = new Date();
  destDir = (path.dirname(srcDir)) + "/" + basename + ".HQ";
  try {
    mkdirp.sync(destDir);
  } catch (_error) {
    err = _error;
    alert("Destination directory already exists. Please delete '" + destDir + "' to continue.");
  }
  img = new Image();
  srcCanvas = $('#src')[0];
  outCanvas = $('#out')[0];
  srcCtx = srcCanvas.getContext('2d');
  outCtx = outCanvas.getContext('2d');
  idx = 0;
  filename = "";
  loadImg = function() {
    var elapsed;
    elapsed = ((new Date()) - startTime) / 1000 / 60;
    $statSeq.html("(" + (idx + 1) + "/" + fileList.length + ") " + (elapsed.toPrecision(2)) + "min elapsed");
    $progSeq.val((idx + 1) / fileList.length * 100);
    filename = fileList[idx];
    return img.src = "file:///" + srcDir + "/" + filename;
  };
  onLoadImg = function() {
    var headingOffset, height, i, j, pano, pixel, ref, width, x;
    width = img.width;
    height = img.height;
    srcCanvas.width = img.width;
    srcCanvas.height = img.height;
    srcCtx.drawImage(img, 0, 0);
    headingOffset = 0;
    x = 0;
    for (i = j = 0, ref = srcCanvas.width - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      pixel = srcCtx.getImageData(i, 836, 1, 1).data;
      if (pixel[0] >= 128) {
        x = i;
        headingOffset = (x / srcCanvas.width) * 360;
        break;
      }
    }
    srcCtx.drawImage(img, 0, height - TAG_HEIGHT, width, TAG_HEIGHT, -x, height - TAG_HEIGHT, width, TAG_HEIGHT);
    srcCtx.drawImage(img, 0, height - TAG_HEIGHT, width, TAG_HEIGHT, -x + width, height - TAG_HEIGHT, width, TAG_HEIGHT);
    pano = CanvasMatrixCode.decode(srcCanvas, 0, srcCanvas.height - TAG_HEIGHT + 10, 1664, TAG_HEIGHT - 10);
    console.log(pano);
    return ss.getPanoramaById(pano.id, function(data, status) {
      var lat, latLng, lng, result;
      if (status === google.maps.StreetViewStatus.OK) {
        return gsvp.composePanorama(pano.id, pano.heading + headingOffset);
      } else {
        console.log("invalid pano id: " + pano.id);
        result = /([\-0-9.]+), ([\-0-9.]+)/.exec(pano.latLng);
        console.log(result);
        lat = result[1];
        lng = result[2];
        latLng = new google.maps.LatLng(lat, lng);
        console.log(latLng);
        return ss.getPanoramaByLocation(latLng, 10, function(data, status) {
          var id;
          if (status === google.maps.StreetViewStatus.OK) {
            id = data.location.pano;
            return gsvp.composePanorama(id, pano.heading + headingOffset);
          } else {
            return alert("muri");
          }
        });
      }
    });
  };
  savePano = function() {
    var dest;
    console.log("save pano");
    outCanvas.width = gsvp.width;
    outCanvas.height = (img.height / img.width) * gsvp.width;
    outCtx.fillStyle = '#000000';
    outCtx.fillRect(0, 0, outCanvas.width, outCanvas.height);
    outCtx.drawImage(gsvp.canvas, 0, 0);
    outCtx.save();
    outCtx.translate(0, gsvp.canvas.height * 2);
    outCtx.scale(1, -1);
    outCtx.drawImage(gsvp.canvas, 0, 0);
    outCtx.restore();
    outCtx.drawImage(img, 0, img.height - TAG_HEIGHT, img.width, TAG_HEIGHT, 0, outCanvas.height - TAG_HEIGHT, img.width, TAG_HEIGHT);
    dest = destDir + "/" + filename;
    saveCanvas(outCanvas, dest);
    if (++idx < fileList.length) {
      return loadImg();
    } else {
      return onComplete();
    }
  };
  img.onload = onLoadImg;
  gsvp.onPanoramaLoad = savePano;
  return loadImg();
};

onComplete = function() {
  return setTimeout(function() {
    fs.renameSync(srcDir, srcDir + ".proxy");
    fs.renameSync(destDir, srcDir);
    return notifier.notify({
      title: "Proxy Replacer",
      message: "All done!",
      sound: true
    });
  }, 2000);
};

//# sourceMappingURL=data:application/json;base64,