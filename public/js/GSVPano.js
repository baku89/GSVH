var GL_MAX_WIDTH, GSVPANO, tiles;

GSVPANO = GSVPANO || {};

GL_MAX_WIDTH = 4096;

tiles = null;

GSVPANO.PanoLoader = (function() {
  var _applyRotFx, _composeFromTile, _count, _ctx, _heading, _hqCanvas, _hqCtx, _originHeading, _originPitch, _panoClient, _rotFx, _throwError, _tilesCanvas, _total, _zoom;

  _zoom = null;

  _panoClient = new google.maps.StreetViewService();

  _count = 0;

  _total = 0;

  _heading = 0;

  _originHeading = 0;

  _originPitch = 0;

  _tilesCanvas = document.createElement('canvas');

  _hqCanvas = document.createElement('canvas');

  _ctx = _tilesCanvas.getContext('2d');

  _hqCtx = _hqCanvas.getContext('2d');

  _rotFx = null;

  function PanoLoader(parameters) {
    var ref;
    parameters = parameters != null ? parameters : {};
    _rotFx = Glsl({
      canvas: document.createElement('canvas'),
      fragment: document.getElementById("pano-rotation").textContent,
      variables: {
        heading: 0.0,
        pitch: 0.0,
        original: _tilesCanvas,
        size: [0.0, 0.0],
        offset: [0.0, 0.0]
      }
    });
    this.onError = null;
    this.onProgress = function() {};
    this.onSizeChange = function() {};
    this.onPanoramaLoad = function() {};
    this.setZoom((ref = parameters.zoom) != null ? ref : 2);
    this.c2 = _tilesCanvas;
    $('[name=width], [name=height]').on('change', function() {
      _rotFx.setSize(parseInt($('[name=width]').val()), parseInt($('[name=height]').val()));
      _rotFx.syncAll();
      return _rotFx.render();
    });
  }

  _throwError = function(message) {
    if (this.onError != null) {
      return this.onError(message);
    } else {
      return console.error(message);
    }
  };

  _composeFromTile = function(x, y, texture) {
    var p;
    _ctx.drawImage(texture, x * 512, y * 512);
    _count++;
    p = Math.round(_count * 100 / _total);
    this.onProgress(p);
    if (_count === _total) {
      _applyRotFx.call(this);
      return this.onPanoramaLoad();
    }
  };

  _applyRotFx = function() {
    var glh, glw, h, i, j, ref, ref1, w, x, y;
    _rotFx.set('heading', (_originHeading - _heading).toRad());
    _rotFx.set('pitch', _originPitch.toRad());
    if (this.width < GL_MAX_WIDTH && this.height < GL_MAX_WIDTH) {
      _rotFx.setSize(this.width, this.height);
      _rotFx.set('size', [this.width, this.height]);
      _rotFx.set('offset', [0.0, 0.0]);
      _rotFx.syncAll();
      _rotFx.render();
      return this.canvas = _rotFx.canvas;
    } else {
      _hqCanvas.width = this.width;
      _hqCanvas.height = this.height;
      w = Math.ceil(this.width / GL_MAX_WIDTH);
      h = Math.ceil(this.height / GL_MAX_WIDTH);
      x = y = 0;
      glw = Math.min(this.width, GL_MAX_WIDTH);
      glh = Math.min(this.height, GL_MAX_WIDTH);
      _rotFx.setSize(glw, glh);
      _rotFx.set('size', [this.width, this.height]);
      for (y = i = 0, ref = h - 1; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
        for (x = j = 0, ref1 = w - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
          _rotFx.set('offset', [x * GL_MAX_WIDTH, y * GL_MAX_WIDTH]);
          _rotFx.syncAll();
          _rotFx.render();
          _hqCtx.drawImage(_rotFx.canvas, x * GL_MAX_WIDTH, this.height - (y + 1) * glh);
        }
      }
      return this.canvas = _hqCanvas;
    }
  };

  PanoLoader.prototype.composePanorama = function(panoId, heading) {
    _heading = heading != null ? heading : 0;
    this.onProgress(0);
    return _panoClient.getPanoramaById(panoId, (function(_this) {
      return function(data, status) {
        var h, i, ref, results, url, w, x, y;
        if (status !== google.maps.StreetViewStatus.OK) {
          _throwError("Cound not retrieve panorama for the following reason: wrong pano id");
          return;
        }
        tiles = data.tiles;
        _originHeading = tiles.originHeading;
        _originPitch = tiles.originPitch;
        w = Math.ceil(_this.width / 512);
        h = Math.ceil(_this.height / 512);
        x = y = 0;
        url = null;
        _count = 0;
        _total = w * h;
        results = [];
        for (y = i = 0, ref = h - 1; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (x = j = 0, ref1 = w - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
              url = "https://cbks0.googleapis.com/cbk?output=tile&zoom=" + _zoom + "&x=" + x + "&y=" + y + "&panoid=" + panoId + "&" + (Date.now());
              results1.push((function(_this) {
                return function(x, y) {
                  var img;
                  img = new Image();
                  img.onload = function() {
                    return _composeFromTile.call(_this, x, y, img);
                  };
                  img.crossOrigin = "";
                  return img.src = url;
                };
              })(this)(x, y));
            }
            return results1;
          }).call(_this));
        }
        return results;
      };
    })(this));
  };

  PanoLoader.prototype.setZoom = function(z) {
    _zoom = z;
    this.width = 416 * Math.pow(2, _zoom);
    this.height = 416 * Math.pow(2, _zoom - 1);
    _tilesCanvas.width = this.width;
    _tilesCanvas.height = this.height;
    _ctx.translate(_tilesCanvas.width, 0);
    _ctx.scale(-1, 1);
    _rotFx.setSize(this.width, this.height);
    return this.onSizeChange();
  };

  return PanoLoader;

})();

//# sourceMappingURL=data:application/json;base64,