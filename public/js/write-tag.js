var PROXY_HEIGHT, TAG_HEIGHT, V_SCALE, addTag, writeTag;

TAG_HEIGHT = 40.0;

PROXY_HEIGHT = 832.0;

V_SCALE = (TAG_HEIGHT + PROXY_HEIGHT) / PROXY_HEIGHT;

addTag = function(ctx, name, value, x, y) {
  ctx.fillStyle = '#ffffff';
  ctx.fillText(value, x + 40, y);
  ctx.fillStyle = '#ff0000';
  return ctx.fillText(name, x, y);
};

writeTag = function(canvas, pano, data, gsvh) {
  var buff, ctx, cursor, tag, y;
  ctx = canvas.getContext('2d');
  canvas.width = pano.width;
  canvas.height = pano.height * V_SCALE;
  ctx.fillStyle = '#000000';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(pano, 0, 0);
  y = canvas.height - TAG_HEIGHT;
  cursor = 0;
  ctx.font = '24px ocr';
  tag = {
    uid: gsvh.uid,
    id: data.id,
    heading: data.heading
  };
  buff = str2buff(btoa(tag));
  return console.log(buff);
};


var str2buff = function(str){
  var ab_ = new ArrayBuffer(new Blob([str]).size);
  var bytes_ = new Uint8Array(ab_);
 
  var n = str.length,
      idx = -1,
      i, c;
 
  for(i = 0; i < n; ++i){
    c = str.charCodeAt(i);
    if(c <= 0x7F){
      bytes_[++idx] = c;
    } else if(c <= 0x7FF){
      bytes_[++idx] = 0xC0 | (c >>> 6);
      bytes_[++idx] = 0x80 | (c & 0x3F);
    } else if(c <= 0xFFFF){
      bytes_[++idx] = 0xE0 | (c >>> 12);
      bytes_[++idx] = 0x80 | ((c >>> 6) & 0x3F);
      bytes_[++idx] = 0x80 | (c & 0x3F);
    } else {
      bytes_[++idx] = 0xF0 | (c >>> 18);
      bytes_[++idx] = 0x80 | ((c >>> 12) & 0x3F);
      bytes_[++idx] = 0x80 | ((c >>> 6) & 0x3F);
      bytes_[++idx] = 0x80 | (c & 0x3F);
    }
  }
  return bytes_;
}
 
var buff2str = function(buff){
  var size = buff.length;
  var i = 0, str = '', c, code;
  while(i < size){
    c = buff[i];
    if ( c < 128){
      str += String.fromCharCode(c);
      i++;
    } else if ((c ^ 0xc0) < 32){
      code = ((c ^ 0xc0) << 6) | (buff[i+1] & 63);
      str += String.fromCharCode(code);
      i += 2;
    } else {
      code = ((c & 15) << 12) | ((buff[i+1] & 63) << 6) |
        (buff[i+2] & 63);
      str += String.fromCharCode(code);
      i += 3;
    }
  }
  return str;
}
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlLXRhZy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxtREFBQTs7QUFBQSxVQUFBLEdBQWEsSUFBYixDQUFBOztBQUFBLFlBQ0EsR0FBZSxLQURmLENBQUE7O0FBQUEsT0FFQSxHQUFVLENBQUMsVUFBQSxHQUFhLFlBQWQsQ0FBQSxHQUE4QixZQUZ4QyxDQUFBOztBQUFBLE1BSUEsR0FBUyxTQUFDLEdBQUQsRUFBTSxJQUFOLEVBQVksS0FBWixFQUFtQixDQUFuQixFQUFzQixDQUF0QixHQUFBO0FBQ1IsRUFBQSxHQUFHLENBQUMsU0FBSixHQUFnQixTQUFoQixDQUFBO0FBQUEsRUFDQSxHQUFHLENBQUMsUUFBSixDQUFhLEtBQWIsRUFBb0IsQ0FBQSxHQUFJLEVBQXhCLEVBQTRCLENBQTVCLENBREEsQ0FBQTtBQUFBLEVBRUEsR0FBRyxDQUFDLFNBQUosR0FBZ0IsU0FGaEIsQ0FBQTtTQUdBLEdBQUcsQ0FBQyxRQUFKLENBQWEsSUFBYixFQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUpRO0FBQUEsQ0FKVCxDQUFBOztBQUFBLFFBVUEsR0FBVyxTQUFDLE1BQUQsRUFBUyxJQUFULEVBQWUsSUFBZixFQUFxQixJQUFyQixHQUFBO0FBQ1YsTUFBQSx5QkFBQTtBQUFBLEVBQUEsR0FBQSxHQUFNLE1BQU0sQ0FBQyxVQUFQLENBQWtCLElBQWxCLENBQU4sQ0FBQTtBQUFBLEVBRUEsTUFBTSxDQUFDLEtBQVAsR0FBZSxJQUFJLENBQUMsS0FGcEIsQ0FBQTtBQUFBLEVBR0EsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsSUFBSSxDQUFDLE1BQUwsR0FBYyxPQUg5QixDQUFBO0FBQUEsRUFLQSxHQUFHLENBQUMsU0FBSixHQUFnQixTQUxoQixDQUFBO0FBQUEsRUFNQSxHQUFHLENBQUMsUUFBSixDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsTUFBTSxDQUFDLEtBQTFCLEVBQWlDLE1BQU0sQ0FBQyxNQUF4QyxDQU5BLENBQUE7QUFBQSxFQU9BLEdBQUcsQ0FBQyxTQUFKLENBQWMsSUFBZCxFQUFvQixDQUFwQixFQUF1QixDQUF2QixDQVBBLENBQUE7QUFBQSxFQVNBLENBQUEsR0FBSSxNQUFNLENBQUMsTUFBUCxHQUFnQixVQVRwQixDQUFBO0FBQUEsRUFVQSxNQUFBLEdBQVMsQ0FWVCxDQUFBO0FBQUEsRUFXQSxHQUFHLENBQUMsSUFBSixHQUFXLFVBWFgsQ0FBQTtBQUFBLEVBMkJBLEdBQUEsR0FDQztBQUFBLElBQUEsR0FBQSxFQUFLLElBQUksQ0FBQyxHQUFWO0FBQUEsSUFDQSxFQUFBLEVBQUksSUFBSSxDQUFDLEVBRFQ7QUFBQSxJQUVBLE9BQUEsRUFBUyxJQUFJLENBQUMsT0FGZDtHQTVCRCxDQUFBO0FBQUEsRUFnQ0EsSUFBQSxHQUFPLFFBQUEsQ0FBVSxJQUFBLENBQUssR0FBTCxDQUFWLENBaENQLENBQUE7U0FrQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxJQUFaLEVBbkNVO0FBQUEsQ0FWWCxDQUFBOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxDQUFBIiwiZmlsZSI6IndyaXRlLXRhZy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlRBR19IRUlHSFQgPSA0MC4wXG5QUk9YWV9IRUlHSFQgPSA4MzIuMFxuVl9TQ0FMRSA9IChUQUdfSEVJR0hUICsgUFJPWFlfSEVJR0hUKSAvIFBST1hZX0hFSUdIVFxuXG5hZGRUYWcgPSAoY3R4LCBuYW1lLCB2YWx1ZSwgeCwgeSkgLT5cblx0Y3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJ1xuXHRjdHguZmlsbFRleHQodmFsdWUsIHggKyA0MCwgeSlcblx0Y3R4LmZpbGxTdHlsZSA9ICcjZmYwMDAwJ1xuXHRjdHguZmlsbFRleHQobmFtZSwgeCwgeSlcblxud3JpdGVUYWcgPSAoY2FudmFzLCBwYW5vLCBkYXRhLCBnc3ZoKSAtPlxuXHRjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG5cdGNhbnZhcy53aWR0aCA9IHBhbm8ud2lkdGhcblx0Y2FudmFzLmhlaWdodCA9IHBhbm8uaGVpZ2h0ICogVl9TQ0FMRVxuXG5cdGN0eC5maWxsU3R5bGUgPSAnIzAwMDAwMCdcblx0Y3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcblx0Y3R4LmRyYXdJbWFnZShwYW5vLCAwLCAwKVxuXG5cdHkgPSBjYW52YXMuaGVpZ2h0IC0gVEFHX0hFSUdIVFxuXHRjdXJzb3IgPSAwXG5cdGN0eC5mb250ID0gJzI0cHggb2NyJ1xuXHQjIGFkZFRhZyhjdHgsIFwidWlkXCIsICAgICBcIiN7Z3N2aC51aWR9XCIsIGN1cnNvcisrICogMHhmZiwgeSArIDM2KVx0XG5cdCMgYWRkVGFnKGN0eCwgXCJwYW5vXCIsICBcIiN7ZGF0YS5pZH1cIiwgY3Vyc29yKysgKiAweGZmLCB5ICsgMzYpXHRcdFx0XHRcdFx0XG5cdCMgYWRkVGFnKGN0eCwgXCJsYXRcIiwgICAgIFwiI3tkYXRhLmxhdExuZy5sYXQoKS50b1ByZWNpc2lvbigxNyl9XCIsIGN1cnNvcisrICogMHhmZiwgeSArIDM2KVx0XG5cdCMgYWRkVGFnKGN0eCwgXCJsbmdcIiwgICAgIFwiI3tkYXRhLmxhdExuZy5sbmcoKS50b1ByZWNpc2lvbigxNyl9XCIsIGN1cnNvcisrICogMHhmZiwgeSArIDM2KVx0XG5cdCMgYWRkVGFnKGN0eCwgXCJoZWFkXCIsICAgIFwiI3tkYXRhLmhlYWRpbmcudG9QcmVjaXNpb24oMTcpfVwiLCBjdXJzb3IrKyAqIDB4ZmYsIHkgKyAzNilcblx0IyBhZGRUYWcoY3R4LCBcImRhdGVcIiwgICAgXCIje2RhdGEuZGF0ZX1cIiwgY3Vyc29yKysgKiAweGZmLCB5ICsgMzYpXHRcblxuXHQjIGN1cnNvciA9IDBcblx0IyBhZGRUYWcoY3R4LCBcInpvb21cIiwgICAgIFwiI3tnc3ZoLnpvb219XCIsIGN1cnNvcisrICogMHhmZiwgeSArIDE4KVxuXHQjIGFkZFRhZyhjdHgsIFwiYWpfaFwiLCBcdFwiI3tkYXRhLmFqdXN0SGVhZGluZy50b1ByZWNpc2lvbigxNyl9XCIsIGN1cnNvcisrICogMHhmZiwgeSArIDE4KVxuXHQjIGFkZFRhZyhjdHgsIFwiYWpfcFwiLCAgICAgXCIje2RhdGEuYWp1c3RQaXRjaC50b1ByZWNpc2lvbigxNyl9XCIsIGN1cnNvcisrICogMHhmZiwgeSArIDE4KVxuXG5cdCMgY3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJ1xuXHQjIGN0eC5maWxsVGV4dChcIjwje2dzdmgudWlkfT48I3tkYXRhLmlkfT48I3tkYXRhLmhlYWRpbmd9PlwiLCA0LCB5ICsgMzIpXG5cblx0dGFnID1cblx0XHR1aWQ6IGdzdmgudWlkXG5cdFx0aWQ6IGRhdGEuaWRcblx0XHRoZWFkaW5nOiBkYXRhLmhlYWRpbmdcblxuXHRidWZmID0gc3RyMmJ1ZmYoIGJ0b2EodGFnKSApXG5cblx0Y29uc29sZS5sb2cgYnVmZlxuXG5cblxuXHRcblxuXG5gXG52YXIgc3RyMmJ1ZmYgPSBmdW5jdGlvbihzdHIpe1xuICB2YXIgYWJfID0gbmV3IEFycmF5QnVmZmVyKG5ldyBCbG9iKFtzdHJdKS5zaXplKTtcbiAgdmFyIGJ5dGVzXyA9IG5ldyBVaW50OEFycmF5KGFiXyk7XG4gXG4gIHZhciBuID0gc3RyLmxlbmd0aCxcbiAgICAgIGlkeCA9IC0xLFxuICAgICAgaSwgYztcbiBcbiAgZm9yKGkgPSAwOyBpIDwgbjsgKytpKXtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYoYyA8PSAweDdGKXtcbiAgICAgIGJ5dGVzX1srK2lkeF0gPSBjO1xuICAgIH0gZWxzZSBpZihjIDw9IDB4N0ZGKXtcbiAgICAgIGJ5dGVzX1srK2lkeF0gPSAweEMwIHwgKGMgPj4+IDYpO1xuICAgICAgYnl0ZXNfWysraWR4XSA9IDB4ODAgfCAoYyAmIDB4M0YpO1xuICAgIH0gZWxzZSBpZihjIDw9IDB4RkZGRil7XG4gICAgICBieXRlc19bKytpZHhdID0gMHhFMCB8IChjID4+PiAxMik7XG4gICAgICBieXRlc19bKytpZHhdID0gMHg4MCB8ICgoYyA+Pj4gNikgJiAweDNGKTtcbiAgICAgIGJ5dGVzX1srK2lkeF0gPSAweDgwIHwgKGMgJiAweDNGKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnl0ZXNfWysraWR4XSA9IDB4RjAgfCAoYyA+Pj4gMTgpO1xuICAgICAgYnl0ZXNfWysraWR4XSA9IDB4ODAgfCAoKGMgPj4+IDEyKSAmIDB4M0YpO1xuICAgICAgYnl0ZXNfWysraWR4XSA9IDB4ODAgfCAoKGMgPj4+IDYpICYgMHgzRik7XG4gICAgICBieXRlc19bKytpZHhdID0gMHg4MCB8IChjICYgMHgzRik7XG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlc187XG59XG4gXG52YXIgYnVmZjJzdHIgPSBmdW5jdGlvbihidWZmKXtcbiAgdmFyIHNpemUgPSBidWZmLmxlbmd0aDtcbiAgdmFyIGkgPSAwLCBzdHIgPSAnJywgYywgY29kZTtcbiAgd2hpbGUoaSA8IHNpemUpe1xuICAgIGMgPSBidWZmW2ldO1xuICAgIGlmICggYyA8IDEyOCl7XG4gICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgIGkrKztcbiAgICB9IGVsc2UgaWYgKChjIF4gMHhjMCkgPCAzMil7XG4gICAgICBjb2RlID0gKChjIF4gMHhjMCkgPDwgNikgfCAoYnVmZltpKzFdICYgNjMpO1xuICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICBpICs9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvZGUgPSAoKGMgJiAxNSkgPDwgMTIpIHwgKChidWZmW2krMV0gJiA2MykgPDwgNikgfFxuICAgICAgICAoYnVmZltpKzJdICYgNjMpO1xuICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICBpICs9IDM7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59XG5gIl19