var CMC_SIZE, CanvasMatrixCode, str, uint8;

CMC_SIZE = 3;

CanvasMatrixCode = {};

str = null;

uint8 = null;

CanvasMatrixCode.draw = function(canvas, data, x, y, width, height) {
  var _x, _y, arrayBuff, b, buff, col, ctx, i, j, results, row, u, v;
  ctx = canvas.getContext('2d');
  arrayBuff = CanvasMatrixCode.str2buff(JSON.stringify(data));
  buff = new Uint8Array(arrayBuff);
  col = Math.floor(width / (CMC_SIZE * 8));
  row = Math.floor(height / CMC_SIZE);
  u = v = 0;
  _x = _y = 0;
  if (col * row + 1 < buff.length) {
    console.log("[CanvasMatrixCode] destination rect is too small for data.");
    return null;
  }
  results = [];
  for (i in buff) {
    b = buff[i];
    u = i % col;
    v = Math.floor(i / col);
    results.push((function() {
      var k, results1;
      results1 = [];
      for (j = k = 0; k <= 7; j = ++k) {
        ctx.fillStyle = b & Math.pow(2, j) ? "#ff0000" : "#00ff00";
        _x = x + (u * 8 + j) * CMC_SIZE;
        _y = y + v * CMC_SIZE;
        console.log(ctx.fillStyle);
        results1.push(ctx.fillRect(_x, _y, CMC_SIZE, CMC_SIZE));
      }
      return results1;
    })());
  }
  return results;
};

CanvasMatrixCode.decode = function(canvas, x, y, width, height) {
  var _x, _y, b, buff, c, col, ctx, j, k, l, m, ref, ref1, row, u, v;
  ctx = canvas.getContext('2d');
  col = Math.floor(width / (CMC_SIZE * 8));
  row = Math.floor(height / CMC_SIZE);
  u = v = c = 0;
  buff = [];
  for (v = k = 0, ref = row - 1; 0 <= ref ? k <= ref : k >= ref; v = 0 <= ref ? ++k : --k) {
    for (u = l = 0, ref1 = col - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; u = 0 <= ref1 ? ++l : --l) {
      b = 0;
      for (j = m = 0; m <= 7; j = ++m) {
        _x = x + (u * 8 + j) * CMC_SIZE;
        _y = y + v * CMC_SIZE;
        c = ctx.getImageData(_x, _y, 1, 1).data;
        if (c[0] > 128) {
          b += Math.pow(2, j);
        } else if (c[1] < 128) {
          break;
        }
      }
      buff.push(b);
    }
  }
  uint8 = new Uint8Array(buff);
  str = CanvasMatrixCode.buff2str(uint8);
  console.log(str);
  return JSON.parse(str);
};


CanvasMatrixCode.buff2str = function(buf) {
  return String.fromCharCode.apply(null, new UintArray(buf));
}
CanvasMatrixCode.str2buff = function(str) {
  var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char
  var bufView = new Uint16Array(buf);
  for (var i=0, strLen=str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i);
  }
  return buf;
}
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbnZhcy1tYXRyaXgtY29kZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxzQ0FBQTs7QUFBQSxRQUFBLEdBQVcsQ0FBWCxDQUFBOztBQUFBLGdCQUVBLEdBQW1CLEVBRm5CLENBQUE7O0FBQUEsR0FJQSxHQUFNLElBSk4sQ0FBQTs7QUFBQSxLQUtBLEdBQVEsSUFMUixDQUFBOztBQUFBLGdCQU9nQixDQUFDLElBQWpCLEdBQXdCLFNBQUMsTUFBRCxFQUFTLElBQVQsRUFBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLEtBQXJCLEVBQTRCLE1BQTVCLEdBQUE7QUFDcEIsTUFBQSw4REFBQTtBQUFBLEVBQUEsR0FBQSxHQUFNLE1BQU0sQ0FBQyxVQUFQLENBQWtCLElBQWxCLENBQU4sQ0FBQTtBQUFBLEVBQ0EsU0FBQSxHQUFZLGdCQUFnQixDQUFDLFFBQWpCLENBQTJCLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixDQUEzQixDQURaLENBQUE7QUFBQSxFQUVBLElBQUEsR0FBVyxJQUFBLFVBQUEsQ0FBWSxTQUFaLENBRlgsQ0FBQTtBQUFBLEVBR0EsR0FBQSxHQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBQSxHQUFRLENBQUMsUUFBQSxHQUFXLENBQVosQ0FBbkIsQ0FITixDQUFBO0FBQUEsRUFJQSxHQUFBLEdBQU0sSUFBSSxDQUFDLEtBQUwsQ0FBVyxNQUFBLEdBQVMsUUFBcEIsQ0FKTixDQUFBO0FBQUEsRUFLQSxDQUFBLEdBQUksQ0FBQSxHQUFJLENBTFIsQ0FBQTtBQUFBLEVBTUEsRUFBQSxHQUFLLEVBQUEsR0FBSyxDQU5WLENBQUE7QUFRQSxFQUFBLElBQUcsR0FBQSxHQUFNLEdBQU4sR0FBWSxDQUFaLEdBQWdCLElBQUksQ0FBQyxNQUF4QjtBQUNJLElBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSw0REFBWixDQUFBLENBQUE7QUFDQSxXQUFPLElBQVAsQ0FGSjtHQVJBO0FBWUE7T0FBQSxTQUFBO2dCQUFBO0FBQ0ks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anMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJDTUNfU0laRSA9IDNcblxuQ2FudmFzTWF0cml4Q29kZSA9IHt9XG5cbnN0ciA9IG51bGxcbnVpbnQ4ID0gbnVsbFxuXG5DYW52YXNNYXRyaXhDb2RlLmRyYXcgPSAoY2FudmFzLCBkYXRhLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSAtPlxuICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgYXJyYXlCdWZmID0gQ2FudmFzTWF0cml4Q29kZS5zdHIyYnVmZiggSlNPTi5zdHJpbmdpZnkoZGF0YSkgKVxuICAgIGJ1ZmYgPSBuZXcgVWludDhBcnJheSggYXJyYXlCdWZmIClcbiAgICBjb2wgPSBNYXRoLmZsb29yKHdpZHRoIC8gKENNQ19TSVpFICogOCkpXG4gICAgcm93ID0gTWF0aC5mbG9vcihoZWlnaHQgLyBDTUNfU0laRSlcbiAgICB1ID0gdiA9IDBcbiAgICBfeCA9IF95ID0gMFxuXG4gICAgaWYgY29sICogcm93ICsgMSA8IGJ1ZmYubGVuZ3RoXG4gICAgICAgIGNvbnNvbGUubG9nIFwiW0NhbnZhc01hdHJpeENvZGVdIGRlc3RpbmF0aW9uIHJlY3QgaXMgdG9vIHNtYWxsIGZvciBkYXRhLlwiXG4gICAgICAgIHJldHVybiBudWxsXG5cbiAgICBmb3IgaSwgYiBvZiBidWZmXG4gICAgICAgIHUgPSAoaSAlIGNvbClcbiAgICAgICAgdiA9IE1hdGguZmxvb3IoaSAvIGNvbClcbiAgICAgICAgZm9yIGogaW4gWzAuLjddXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gaWYgYiAmIE1hdGgucG93KDIsIGopIHRoZW4gXCIjZmYwMDAwXCIgZWxzZSBcIiMwMGZmMDBcIlxuICAgICAgICAgICAgX3ggPSB4ICsgKHUqOCArIGopICogQ01DX1NJWkVcbiAgICAgICAgICAgIF95ID0geSArIHYgKiBDTUNfU0laRSBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIGN0eC5maWxsU3R5bGVcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdChfeCwgX3ksIENNQ19TSVpFLCBDTUNfU0laRSlcblxuQ2FudmFzTWF0cml4Q29kZS5kZWNvZGUgPSAoY2FudmFzLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSAtPlxuXG4gICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcblxuICAgIGNvbCA9IE1hdGguZmxvb3Iod2lkdGggLyAoQ01DX1NJWkUgKiA4KSlcbiAgICByb3cgPSBNYXRoLmZsb29yKGhlaWdodCAvIENNQ19TSVpFKVxuICAgIHUgPSB2ID0gYyA9IDBcblxuICAgIGJ1ZmYgPSBbXVxuXG4gICAgZm9yIHYgaW4gWzAuLnJvdy0xXVxuICAgICAgICBmb3IgdSBpbiBbMC4uY29sLTFdXG4gICAgICAgICAgICBiID0gMFxuICAgICAgICAgICAgZm9yIGogaW4gWzAuLjddXG4gICAgICAgICAgICAgICAgX3ggPSB4ICsgKHUqOCArIGopICogQ01DX1NJWkVcbiAgICAgICAgICAgICAgICBfeSA9IHkgKyB2ICogQ01DX1NJWkVcbiAgICAgICAgICAgICAgICBjID0gY3R4LmdldEltYWdlRGF0YShfeCwgX3ksIDEsIDEpLmRhdGFcbiAgICAgICAgICAgICAgICBpZiBjWzBdID4gMTI4XG4gICAgICAgICAgICAgICAgICAgIGIgKz0gTWF0aC5wb3coMiwgailcbiAgICAgICAgICAgICAgICBlbHNlIGlmIGNbMV0gPCAxMjhcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgYnVmZi5wdXNoKCBiIClcblxuICAgIHVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkoIGJ1ZmYgKVxuXG5cbiAgICBzdHIgPSBDYW52YXNNYXRyaXhDb2RlLmJ1ZmYyc3RyKCB1aW50OCApXG5cbiAgICBjb25zb2xlLmxvZyBzdHJcblxuICAgICNqc29uID0gJ3tcInVpZFwiOlwiNDY1MTQzMDk5MzIzMjIzNFwiLFwiaWRcIjpcImVhZTZ3Q2JLLU1NMWg4LWMxNUFqaFFcIixcImhlYWRpbmdcIjowfSdcblxuICAgIHJldHVybiBKU09OLnBhcnNlKCBzdHIgKVxuXG5gXG5DYW52YXNNYXRyaXhDb2RlLmJ1ZmYyc3RyID0gZnVuY3Rpb24oYnVmKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50QXJyYXkoYnVmKSk7XG59XG5DYW52YXNNYXRyaXhDb2RlLnN0cjJidWZmID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoc3RyLmxlbmd0aCoyKTsgLy8gMiBieXRlcyBmb3IgZWFjaCBjaGFyXG4gIHZhciBidWZWaWV3ID0gbmV3IFVpbnQxNkFycmF5KGJ1Zik7XG4gIGZvciAodmFyIGk9MCwgc3RyTGVuPXN0ci5sZW5ndGg7IGkgPCBzdHJMZW47IGkrKykge1xuICAgIGJ1ZlZpZXdbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gYnVmO1xufVxuYCJdfQ==