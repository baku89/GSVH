var $ul, apiKey, getSrc, load, loader, locations, makeCard, mapReg, onLoadCSV;

locations = [];

$ul = null;

apiKey = "AIzaSyB7BjJ9FNKGq5HRB9VeA73cJPFCXk6RIa8";

mapReg = /@(.*),(.*),(.*)a,(.*)y,(.*)h,(.*)t\//;

loader = new GSVPANO.PanoLoader();

$(function() {
  $ul = $('#cards');
  return load();
});

load = function() {
  return $.get('assets/locations.csv', onLoadCSV);
};

getSrc = function(url) {
  return "";
};

onLoadCSV = function(data) {
  var csv, i, line, match, nl, param, prevTitle, url;
  csv = $.csv.toArrays(data);
  prevTitle = "";
  for (i in csv) {
    line = csv[i];
    url = line[1];
    match = mapReg.exec(url);
    if (match === null) {
      console.log("error", i, line[0]);
      continue;
    }
    nl = {
      number: Number(i) + 1,
      title: line[0],
      url: line[1],
      lat: match[1],
      lng: match[2],
      fov: match[4],
      heading: match[5],
      pitch: match[6]
    };
    if (nl.title === "") {
      nl.title = prevTitle;
    }
    param = {
      size: "640x400",
      sensor: false,
      location: nl.lat + "," + nl.lng,
      heading: nl.heading,
      pitch: nl.pitch - 90,
      fov: nl.fov,
      key: apiKey
    };
    prevTitle = nl.title;
    nl.latlng = new google.maps.LatLng(nl.lat, nl.lng);
    nl.place = url.indexOf("lace") !== -1 ? "[place]" : "";
    locations.push(nl);
  }
  return makeCard();
};

makeCard = function() {
  var append, index;
  index = 0;
  append = function() {
    var $newElm, l;
    if (index >= locations.length) {
      return;
    }
    l = locations[index];
    $newElm = $("<li id='location-" + l.number + "' class='card'> <a href='" + l.url + "'><img class='thumb'></a> <h1>" + l.number + "." + l.title + " " + l.place + " </h1> </li>");
    $ul.append($newElm);
    loader.load(index, l.latlng, function(result) {
      var $img, param, src;
      console.log(result.index, result);
      l = locations[result.index];
      $("#location-" + l.number).append("<div class='description'> " + result.location.description + " (" + result.imageDate + ") </div>");
      $img = param = {
        size: "640x400",
        sensor: false,
        pano: result.location.pano,
        heading: l.heading,
        pitch: l.pitch - 90,
        fov: 180,
        key: apiKey
      };
      src = "http://maps.googleapis.com/maps/api/streetview?" + $.param(param);
      if (src === "" || src === void 0) {
        console.log(result, param);
      }
      return $("#location-" + l.number + " img").attr('src', src);
    });
    index += 1;
    return setTimeout(append, 200);
  };
  return append();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvY2F0aW9uX2NhcmQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLElBQUE7O0FBQUEsU0FBQSxHQUFZOztBQUVaLEdBQUEsR0FBTTs7QUFFTixNQUFBLEdBQVM7O0FBRVQsTUFBQSxHQUFTOztBQUVULE1BQUEsR0FBYSxJQUFBLE9BQU8sQ0FBQyxVQUFSLENBQUE7O0FBS2IsQ0FBQSxDQUFFLFNBQUE7RUFDRCxHQUFBLEdBQU0sQ0FBQSxDQUFFLFFBQUY7U0FFTixJQUFBLENBQUE7QUFIQyxDQUFGOztBQU1BLElBQUEsR0FBTyxTQUFBO1NBQ04sQ0FBQyxDQUFDLEdBQUYsQ0FBTSxzQkFBTixFQUE4QixTQUE5QjtBQURNOztBQUlQLE1BQUEsR0FBUyxTQUFDLEdBQUQ7QUFDUixTQUFPO0FBREM7O0FBT1QsU0FBQSxHQUFZLFNBQUMsSUFBRDtBQUVYLE1BQUE7RUFBQSxHQUFBLEdBQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFOLENBQWdCLElBQWhCO0VBRU4sU0FBQSxHQUFZO0FBRVosT0FBQSxRQUFBOztJQUVDLEdBQUEsR0FBTSxJQUFLLENBQUEsQ0FBQTtJQUNYLEtBQUEsR0FBUSxNQUFNLENBQUMsSUFBUCxDQUFhLEdBQWI7SUFFUixJQUFHLEtBQUEsS0FBUyxJQUFaO01BQ0MsT0FBTyxDQUFDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCLENBQXJCLEVBQXdCLElBQUssQ0FBQSxDQUFBLENBQTdCO0FBQ0EsZUFGRDs7SUFJQSxFQUFBLEdBQ0M7TUFBQSxNQUFBLEVBQVMsTUFBQSxDQUFPLENBQVAsQ0FBQSxHQUFVLENBQW5CO01BQ0EsS0FBQSxFQUFPLElBQUssQ0FBQSxDQUFBLENBRFo7TUFFQSxHQUFBLEVBQUssSUFBSyxDQUFBLENBQUEsQ0FGVjtNQUdBLEdBQUEsRUFBSyxLQUFNLENBQUEsQ0FBQSxDQUhYO01BSUEsR0FBQSxFQUFLLEtBQU0sQ0FBQSxDQUFBLENBSlg7TUFLQSxHQUFBLEVBQUssS0FBTSxDQUFBLENBQUEsQ0FM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QTJDLEdBQTNDO0lBNUI0QixDQUE3QjtJQWdDQSxLQUFBLElBQVM7V0FDVCxVQUFBLENBQVksTUFBWixFQUFvQixHQUFwQjtFQXBEUTtTQXVEVCxNQUFBLENBQUE7QUEzRFUiLCJmaWxlIjoibG9jYXRpb25fY2FyZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlxubG9jYXRpb25zID0gW11cblxuJHVsID0gbnVsbFxuXG5hcGlLZXkgPSBcIkFJemFTeUI3QmpKOUZOS0dxNUhSQjlWZUE3M2NKUEZDWGs2UklhOFwiXG5cbm1hcFJlZyA9IC9AKC4qKSwoLiopLCguKilhLCguKil5LCguKiloLCguKil0XFwvL1xuXG5sb2FkZXIgPSBuZXcgR1NWUEFOTy5QYW5vTG9hZGVyKClcblxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiQgLT5cblx0JHVsID0gJCgnI2NhcmRzJylcblxuXHRsb2FkKClcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxubG9hZCA9IC0+XG5cdCQuZ2V0ICdhc3NldHMvbG9jYXRpb25zLmNzdicsIG9uTG9hZENTVlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5nZXRTcmMgPSAodXJsKSAtPlxuXHRyZXR1cm4gXCJcIlxuXG5cblxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5vbkxvYWRDU1YgPSAoZGF0YSkgLT5cblx0XG5cdGNzdiA9ICQuY3N2LnRvQXJyYXlzKCBkYXRhIClcblxuXHRwcmV2VGl0bGUgPSBcIlwiXG5cblx0Zm9yIGksIGxpbmUgb2YgY3N2XG5cblx0XHR1cmwgPSBsaW5lWzFdXG5cdFx0bWF0Y2ggPSBtYXBSZWcuZXhlYyggdXJsIClcblxuXHRcdGlmIG1hdGNoID09IG51bGxcblx0XHRcdGNvbnNvbGUubG9nIFwiZXJyb3JcIiwgaSwgbGluZVswXVxuXHRcdFx0Y29udGludWVcblxuXHRcdG5sID1cblx0XHRcdG51bWJlcjogKE51bWJlcihpKSsxKVxuXHRcdFx0dGl0bGU6IGxpbmVbMF1cblx0XHRcdHVybDogbGluZVsxXVxuXHRcdFx0bGF0OiBtYXRjaFsxXVxuXHRcdFx0bG5nOiBtYXRjaFsyXVxuXHRcdFx0Zm92OiBtYXRjaFs0XVxuXHRcdFx0aGVhZGluZzogbWF0Y2hbNV1cblx0XHRcdHBpdGNoOiBtYXRjaFs2XVxuXG5cdFx0aWYgbmwudGl0bGUgPT0gXCJcIlxuXHRcdFx0bmwudGl0bGUgPSBwcmV2VGl0bGVcblxuXHRcdHBhcmFtID1cblx0XHRcdHNpemU6IFwiNjQweDQwMFwiXG5cdFx0XHRzZW5zb3I6IGZhbHNlXG5cdFx0XHRsb2NhdGlvbjogbmwubGF0ICsgXCIsXCIgKyBubC5sbmdcblx0XHRcdGhlYWRpbmc6IG5sLmhlYWRpbmdcblx0XHRcdHBpdGNoOiBubC5waXRjaCAtIDkwXG5cdFx0XHRmb3Y6IG5sLmZvdiM5MCNNYXRoLm1heCgxMjAsIG5sLmZvdiArIDQwKVxuXHRcdFx0a2V5OiBhcGlLZXlcblxuXHRcdHByZXZUaXRsZSA9IG5sLnRpdGxlXG5cblx0XHRubC5sYXRsbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKCBubC5sYXQsIG5sLmxuZyApXG5cblx0XHRubC5wbGFjZSA9IGlmIHVybC5pbmRleE9mKFwibGFjZVwiKSAhPSAtMSB0aGVuIFwiW3BsYWNlXVwiIGVsc2UgXCJcIlxuXG5cdFx0IyBpZiB1cmwuaW5kZXhPZihcInBsYWNlXCIpID09IC0xXG5cdFx0IyBcdCMgc3RyZWV0IHZpZXdcblx0XHQjIFx0bmwuaW1nID0gXCJodHRwOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9zdHJlZXR2aWV3P1wiICsgJC5wYXJhbSggcGFyYW0gKVxuXG5cdFx0IyBlbHNlXG5cdFx0IyBcdCMgcGxhY2VzXG5cdFx0IyBcdG5sLmltZyA9IFwiXCJcblxuXG5cdFx0bG9jYXRpb25zLnB1c2goIG5sIClcblxuXHRtYWtlQ2FyZCgpXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbm1ha2VDYXJkID0gLT5cblxuXHRpbmRleCA9IDBcblxuXHRhcHBlbmQgPSAoKSAtPlxuXHRcdGlmIGluZGV4ID49IGxvY2F0aW9ucy5sZW5ndGhcblx0XHRcdHJldHVyblxuXG5cdFx0bCA9IGxvY2F0aW9uc1tpbmRleF1cblxuXHRcdCMgY3JlYXRlIG5ldyBlbGVtZW50c1xuXHRcdCRuZXdFbG0gPSAkKFxuXHRcdFx0XCJcblx0XHRcdDxsaSBpZD0nbG9jYXRpb24tI3tsLm51bWJlcn0nIGNsYXNzPSdjYXJkJz5cblx0XHRcdFx0PGEgaHJlZj0nI3tsLnVybH0nPjxpbWcgY2xhc3M9J3RodW1iJz48L2E+XG5cdFx0XHRcdDxoMT4je2wubnVtYmVyfS4je2wudGl0bGV9ICN7bC5wbGFjZX1cbjwvaDE+XG5cdFx0XHQ8L2xpPlxuXHRcdFx0XCJcblx0XHQpXG5cdFx0JHVsLmFwcGVuZCggJG5ld0VsbSApXG5cblx0XHQjIGFkZCB0aXRsZVxuXHRcdGxvYWRlci5sb2FkIGluZGV4LCBsLmxhdGxuZywgKHJlc3VsdCkgLT5cblxuXHRcdFx0Y29uc29sZS5sb2cgcmVzdWx0LmluZGV4LCByZXN1bHRcblxuXHRcdFx0bCA9IGxvY2F0aW9uc1sgcmVzdWx0LmluZGV4IF1cblxuXHRcdFx0JChcIiNsb2NhdGlvbi0je2wubnVtYmVyfVwiKS5hcHBlbmQoXCJcblx0XHRcdFx0PGRpdiBjbGFzcz0nZGVzY3JpcHRpb24nPlxuXHRcdFx0XHRcdCN7cmVzdWx0LmxvY2F0aW9uLmRlc2NyaXB0aW9ufSAoI3tyZXN1bHQuaW1hZ2VEYXRlfSlcblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XCIpXG5cblx0XHRcdCRpbWcgPSBcblxuXHRcdFx0cGFyYW0gPVxuXHRcdFx0XHRzaXplOiBcIjY0MHg0MDBcIlxuXHRcdFx0XHRzZW5zb3I6IGZhbHNlXG5cdFx0XHRcdHBhbm86IHJlc3VsdC5sb2NhdGlvbi5wYW5vXG5cdFx0XHRcdGhlYWRpbmc6IGwuaGVhZGluZ1xuXHRcdFx0XHRwaXRjaDogbC5waXRjaCAtIDkwXG5cdFx0XHRcdGZvdjogMTgwI01hdGgubWF4KGwuZm92ICogMiwgMClcblx0XHRcdFx0a2V5OiBhcGlLZXlcblxuXHRcdFx0c3JjID0gXCJodHRwOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9zdHJlZXR2aWV3P1wiICsgJC5wYXJhbSggcGFyYW0gKVxuXG5cdFx0XHRpZiBzcmMgPT0gXCJcIiB8fCBzcmMgPT0gdW5kZWZpbmVkXG5cdFx0XHRcdGNvbnNvbGUubG9nIHJlc3VsdCwgcGFyYW1cblxuXHRcdFx0JChcIiNsb2NhdGlvbi0je2wubnVtYmVyfSBpbWdcIikuYXR0cignc3JjJywgc3JjKVxuXG5cblx0XHQjIG5leHRcblx0XHRpbmRleCArPSAxXG5cdFx0c2V0VGltZW91dCggYXBwZW5kLCAyMDAgKVxuXG5cblx0YXBwZW5kKClcblxuIl19