var FILE;

FILE = FILE || {};

FILE.phpDirectory = './file';

FILE.Status = {
  OK: 'OK'
};

FILE.exisits = function(path, callback) {
  var data;
  data = {
    path: path
  };
  return $.getJSON(FILE.phpDirectory + "/exists.php", data, function(res) {
    if (res.status === FILE.Status.OK) {
      return callback(res.result);
    } else {
      return callback(null);
    }
  });
};

FILE.saveText = function(text, path, callback) {
  $.ajax({
    type: 'POST',
    url: FILE.phpDirectory + "/saveText.php",
    data: {
      path: path,
      text: text
    },
    success: function(json) {
      var res;
      res = $.parseJSON(json);
      if (res.status === FILE.Status.OK) {
        return callback(res.result);
      } else {
        return callback(null);
      }
    },
    error: function(xmlHttpReq, textStatus, errorThrown) {
      return callback(null);
    }
  });
};

FILE.saveFrame = function(canvas, filename, index, callback) {
  var ext, split, type;
  split = filename.split('.');
  ext = split[split.length - 1].toLowerCase();
  type = "";
  if (ext === "png") {
    type = "image/png";
  } else if (ext === "jpg" || ext === "jpeg") {
    type = "image/jpeg";
  } else {
    callback(null);
    return;
  }
  $.ajax({
    type: 'POST',
    url: FILE.phpDirectory + "/saveFrame.php",
    data: {
      name: name,
      directory: directory,
      index: index,
      image: canvas.toDataURL(type)
    },
    success: function(json) {
      var res;
      res = $.parseJSON(json);
      if (res.status === FILE.Status.OK) {
        return callback(res.result);
      } else {
        return callback(null);
      }
    },
    error: function(xmlHttpReq, textStatus, errorThrown) {
      return callback(null);
    }
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5maWxlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLElBQUE7O0FBQUEsSUFBQSxHQUFPLElBQUEsSUFBUSxFQUFmLENBQUE7O0FBQUEsSUFFSSxDQUFDLFlBQUwsR0FBb0IsUUFGcEIsQ0FBQTs7QUFBQSxJQUlJLENBQUMsTUFBTCxHQUNDO0FBQUEsRUFBQSxFQUFBLEVBQUksSUFBSjtDQUxELENBQUE7O0FBQUEsSUFPSSxDQUFDLE9BQUwsR0FBZSxTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7QUFDZCxNQUFBLElBQUE7QUFBQSxFQUFBLElBQUEsR0FDQztBQUFBLElBQUEsSUFBQSxFQUFNLElBQU47R0FERCxDQUFBO1NBR0EsQ0FBQyxDQUFDLE9BQUYsQ0FBYSxJQUFJLENBQUMsWUFBTixHQUFtQixhQUEvQixFQUE2QyxJQUE3QyxFQUFtRCxTQUFDLEdBQUQsR0FBQTtBQUNsRCxJQUFBLElBQUcsR0FBRyxDQUFDLE1BQUosS0FBYyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQTdCO2FBQ0MsUUFBQSxDQUFVLEdBQUcsQ0FBQyxNQUFkLEVBREQ7S0FBQSxNQUFBO2FBR0MsUUFBQSxDQUFVLElBQVYsRUFIRDtLQURrRDtFQUFBLENBQW5ELEVBSmM7QUFBQSxDQVBmLENBQUE7O0FBQUEsSUFpQkksQ0FBQyxRQUFMLEdBQWdCLFNBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxRQUFiLEdBQUE7QUFFZixFQUFBLENBQUMsQ0FBQyxJQUFGLENBQ0M7QUFBQSxJQUFBLElBQUEsRUFBTSxNQUFOO0FBQUEsSUFDQSxHQUFBLEVBQVEsSUFBSSxDQUFDLFlBQU4sR0FBbUIsZUFEMUI7QUFBQSxJQUVBLElBQUEsRUFDQztBQUFBLE1BQUEsSUFBQSxFQUFNLElBQU47QUFBQSxNQUNBLElBQUEsRUFBTSxJQUROO0tBSEQ7QUFBQSxJQU1BLE9BQUEsRUFBUyxTQUFDLElBQUQsR0FBQTtBQUNSLFVBQUEsR0FBQTtBQUFBLE1BQUEsR0FBQSxHQUFNLENBQUMsQ0FBQyxTQUFGLENBQVksSUFBWixDQUFOLENBQUE7QUFDQSxNQUFBLElBQUcsR0FBRyxDQUFDLE1BQUosS0FBYyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQTdCO2VBQ0MsUUFBQSxDQUFVLEdBQUcsQ0FBQyxNQUFkLEVBREQ7T0FBQSxNQUFBO2VBR0MsUUFBQSxDQUFVLElBQVYsRUFIRDtPQUZRO0lBQUEsQ0FOVDtBQUFBLElBYUEsS0FBQSxFQUFPLFNBQUMsVUFBRCxFQUFhLFVBQWIsRUFBeUIsV0FBekIsR0FBQTthQUNOLFFBQUEsQ0FBVSxJQUFWLEVBRE07SUFBQSxDQWJQO0dBREQsQ0FBQSxDQUZlO0FBQUEsQ0FqQmhCLENBQUE7O0FBQUEsSUF5Q0ksQ0FBQyxTQUFMLEdBQWlCLFNBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsS0FBbkIsRUFBMEIsUUFBMUIsR0FBQTtBQUVoQixNQUFBLGdCQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsUUFBUSxDQUFDLEtBQVQsQ0FBZSxHQUFmLENBQVIsQ0FBQTtBQUFBLEVBQ0EsR0FBQSxHQUFNLEtBQU8sQ0FBQSxLQUFLLENBQUMsTUFBTixHQUFlLENBQWYsQ0FBa0IsQ0FBQyxXQUExQixDQUFBLENBRE4sQ0FBQTtBQUFBLEVBR0EsSUFBQSxHQUFPLEVBSFAsQ0FBQTtBQUtBLEVBQUEsSUFBRyxHQUFBLEtBQU8sS0FBVjtBQUNDLElBQUEsSUFBQSxHQUFPLFdBQVAsQ0FERDtHQUFBLE1BRUssSUFBRyxHQUFBLEtBQU8sS0FBUCxJQUFpQixHQUFBLEtBQU8sTUFBM0I7QUFDSixJQUFBLElBQUEsR0FBTyxZQUFQLENBREk7R0FBQSxNQUFBO0FBR0osSUFBQSxRQUFBLENBQVMsSUFBVCxDQUFBLENBQUE7QUFDQSxVQUFBLENBSkk7R0FQTDtBQUFBLEVBY0EsQ0FBQyxDQUFDLElBQUYsQ0FDQztBQUFBLElBQUEsSUFBQSxFQUFNLE1BQU47QUFBQSxJQUNBLEdBQUEsRUFBUSxJQUFJLENBQUMsWUFBTixHQUFtQixnQkFEMUI7QUFBQSxJQUVBLElBQUEsRUFDQztBQUFBLE1BQUEsSUFBQSxFQUFNLElBQU47QUFBQSxNQUNBLFNBQUEsRUFBVyxTQURYO0FBQUEsTUFFQSxLQUFBLEVBQU8sS0FGUDtBQUFBLE1BR0EsS0FBQSxFQUFPLE1BQU0sQ0FBQyxTQUFQLENBQWlCLElBQWpCLENBSFA7S0FIRDtBQUFBLElBUUEsT0FBQSxFQUFTLFNBQUMsSUFBRCxHQUFBO0FBQ1IsVUFBQSxHQUFBO0FBQUEsTUFBQSxHQUFBLEdBQU0sQ0FBQyxDQUFDLFNBQUYsQ0FBYSxJQUFiLENBQU4sQ0FBQTtBQUNBLE1BQUEsSUFBRyxHQUFHLENBQUMsTUFBSixLQUFjLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBN0I7ZUFDQyxRQUFBLENBQVUsR0FBRyxDQUFDLE1BQWQsRUFERDtPQUFBLE1BQUE7ZUFHQyxRQUFBLENBQVUsSUFBVixFQUhEO09BRlE7SUFBQSxDQVJUO0FBQUEsSUFlQSxLQUFBLEVBQU8sU0FBQyxVQUFELEVBQWEsVUFBYixFQUF5QixXQUF6QixHQUFBO2FBQ04sUUFBQSxDQUFVLElBQVYsRUFETTtJQUFBLENBZlA7R0FERCxDQWRBLENBRmdCO0FBQUEsQ0F6Q2pCLENBQUEiLCJmaWxlIjoianF1ZXJ5LmZpbGUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJGSUxFID0gRklMRSB8fCB7fVxuXG5GSUxFLnBocERpcmVjdG9yeSA9ICcuL2ZpbGUnXG5cbkZJTEUuU3RhdHVzID1cblx0T0s6ICdPSydcblxuRklMRS5leGlzaXRzID0gKHBhdGgsIGNhbGxiYWNrKSAtPlxuXHRkYXRhID1cblx0XHRwYXRoOiBwYXRoXG5cblx0JC5nZXRKU09OIFwiI3tGSUxFLnBocERpcmVjdG9yeX0vZXhpc3RzLnBocFwiLCBkYXRhLCAocmVzKS0+XG5cdFx0aWYgcmVzLnN0YXR1cyA9PSBGSUxFLlN0YXR1cy5PS1xuXHRcdFx0Y2FsbGJhY2soIHJlcy5yZXN1bHQgKVxuXHRcdGVsc2Vcblx0XHRcdGNhbGxiYWNrKCBudWxsIClcblxuRklMRS5zYXZlVGV4dCA9ICh0ZXh0LCBwYXRoLCBjYWxsYmFjaykgLT5cblxuXHQkLmFqYXhcblx0XHR0eXBlOiAnUE9TVCdcblx0XHR1cmw6IFwiI3tGSUxFLnBocERpcmVjdG9yeX0vc2F2ZVRleHQucGhwXCJcblx0XHRkYXRhOlxuXHRcdFx0cGF0aDogcGF0aFxuXHRcdFx0dGV4dDogdGV4dFxuXG5cdFx0c3VjY2VzczogKGpzb24pIC0+XG5cdFx0XHRyZXMgPSAkLnBhcnNlSlNPTihqc29uKVxuXHRcdFx0aWYgcmVzLnN0YXR1cyA9PSBGSUxFLlN0YXR1cy5PS1xuXHRcdFx0XHRjYWxsYmFjayggcmVzLnJlc3VsdCApXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGNhbGxiYWNrKCBudWxsIClcblxuXHRcdGVycm9yOiAoeG1sSHR0cFJlcSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIC0+XG5cdFx0XHRjYWxsYmFjayggbnVsbCApXG5cblx0cmV0dXJuXG5cblxuXG5cbkZJTEUuc2F2ZUZyYW1lID0gKGNhbnZhcywgZmlsZW5hbWUsIGluZGV4LCBjYWxsYmFjaykgLT5cblxuXHRzcGxpdCA9IGZpbGVuYW1lLnNwbGl0KCcuJylcblx0ZXh0ID0gc3BsaXRbIHNwbGl0Lmxlbmd0aCAtIDEgXS50b0xvd2VyQ2FzZSgpXG5cblx0dHlwZSA9IFwiXCJcblxuXHRpZiBleHQgPT0gXCJwbmdcIlxuXHRcdHR5cGUgPSBcImltYWdlL3BuZ1wiXG5cdGVsc2UgaWYgZXh0ID09IFwianBnXCIgb3IgIGV4dCA9PSBcImpwZWdcIlxuXHRcdHR5cGUgPSBcImltYWdlL2pwZWdcIlxuXHRlbHNlXG5cdFx0Y2FsbGJhY2sobnVsbClcblx0XHRyZXR1cm5cblxuXG5cdCQuYWpheFxuXHRcdHR5cGU6ICdQT1NUJ1xuXHRcdHVybDogXCIje0ZJTEUucGhwRGlyZWN0b3J5fS9zYXZlRnJhbWUucGhwXCJcblx0XHRkYXRhOlxuXHRcdFx0bmFtZTogbmFtZVxuXHRcdFx0ZGlyZWN0b3J5OiBkaXJlY3Rvcnlcblx0XHRcdGluZGV4OiBpbmRleFxuXHRcdFx0aW1hZ2U6IGNhbnZhcy50b0RhdGFVUkwodHlwZSlcblxuXHRcdHN1Y2Nlc3M6IChqc29uKSAtPlxuXHRcdFx0cmVzID0gJC5wYXJzZUpTT04oIGpzb24gKVxuXHRcdFx0aWYgcmVzLnN0YXR1cyA9PSBGSUxFLlN0YXR1cy5PS1xuXHRcdFx0XHRjYWxsYmFjayggcmVzLnJlc3VsdCApXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGNhbGxiYWNrKCBudWxsIClcblxuXHRcdGVycm9yOiAoeG1sSHR0cFJlcSwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIC0+XG5cdFx0XHRjYWxsYmFjayggbnVsbCApXG5cblx0cmV0dXJuXG5cdCJdfQ==