var DIST_BETWEEN_PTS, MAX_PTS, canvas, dirService, generate, getDestLatLng, getOriginLatLng, initMap, loadPanoIds, loadPanorama, loader, mergePanoIds, panoIds, rawPts, res, setOriginLatLng, subdivide, totalDist, trace,
  slice = [].slice;

MAX_PTS = 100;

DIST_BETWEEN_PTS = 5;

loader = null;

dirService = new google.maps.DirectionsService({});

res = null;

rawPts = [];

panoIds = [];

totalDist = 0;

canvas = null;

trace = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return console.log.apply(console, args);
};

getOriginLatLng = function() {
  var originLat, originLng;
  originLat = $('#origin-lat').val();
  originLng = $('#origin-lng').val();
  return new google.maps.LatLng(originLat, originLng);
};

getDestLatLng = function() {
  var destLat, destLng;
  destLat = $('#dest-lat').val();
  destLng = $('#dest-lng').val();
  return new google.maps.LatLng(destLat, destLng);
};

setOriginLatLng = function(latLng) {
  $('#origin-lat').val(latLng.lat());
  return $('#origin-lng').val(latLng.lng());
};

initMap = function() {
  var mapOptions;
  mapOptions = {
    zoom: 1,
    center: getOriginLatLng(),
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  return google.maps.Map(document.getElementById("map"), mapOptions);
};

$(function() {
  loader = new GSVPANO.PanoLoader({
    canvas: $('#panorama')[0]
  });
  loader.setZoom(3);
  canvas = $('#panorama')[0];
  return $('#analyze-start').on('click', generate);
});

generate = function() {
  var route;
  trace("generate----------");
  rawPts = [];
  panoIds = [];
  totalDist = 0;
  route = {
    request: {
      origin: getOriginLatLng(),
      destination: getDestLatLng(),
      travelMode: google.maps.DirectionsTravelMode.DRIVING
    }
  };
  return dirService.route(route.request, function(_res, status) {
    res = _res;
    if (status === google.maps.DirectionsStatus.OK) {
      return subdivide();
    } else {
      return trace(status);
    }
  });
};

subdivide = function() {
  var a, b, d, i, j, k, l, legs, m, path, r, ref, ref1, ref2, regDist, route, segLen, segs, t, way;
  trace('subdivide----------');
  route = res.routes[0];
  path = route.overview_path;
  legs = route.legs;
  for (i = k = 0, ref = legs.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
    totalDist += legs[i].distance.value;
  }
  trace('totalDist', totalDist);
  trace('path length', path.length);
  segLen = totalDist / MAX_PTS;
  regDist = DIST_BETWEEN_PTS;
  d = 0;
  r = 0;
  a = b = null;
  for (i = l = 0, ref1 = path.length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
    if (i + 1 < path.length) {
      a = path[i];
      b = path[i + 1];
      d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
      if ((0 < r && r < d)) {
        a - pointOnLine(r / d, a, b);
        d = google.maps.geometry.spherical.computeDistanceBetween(a, b);
        rawPts.push(a);
        r = 0;
      } else if (0 < r && d < r) {
        r -= d;
      }
      if (r === 0) {
        segs = Math.floor(d / regDist);
        if (segs > 0) {
          for (j = m = 0, ref2 = segs - 1; 0 <= ref2 ? m <= ref2 : m >= ref2; j = 0 <= ref2 ? ++m : --m) {
            t = j / segs;
            if (0 < t || (t + i) === 0) {
              way = pointOnLine(t, a, b);
              rawPts.push(way);
            }
          }
        } else {
          r = regDist * (t - (d / regDist));
        }
      }
    } else {
      rawPts.push(path[i]);
    }
  }
  trace('subdivided points length', rawPts.length);
  return loadPanoIds();
};

loadPanoIds = function() {
  var count, i, k, pt, ref, results;
  trace('loadPanoIds----------');
  pt = null;
  count = 0;
  results = [];
  for (i = k = 0, ref = rawPts.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
    panoIds.push(null);
    pt = rawPts[i];
    results.push(loader.load(i, pt, function(result) {
      panoIds[result.index] = {
        location: result.location,
        id: result.location.pano,
        imageDate: result.imageDate
      };
      if (++count >= rawPts.length) {
        return mergePanoIds();
      }
    }));
  }
  return results;
};

mergePanoIds = function() {
  var i, k, mergedPanoIds, prevId, ref;
  trace('mergePanoIds----------');
  prevId = rawPts[0].id;
  mergedPanoIds = [];
  mergedPanoIds.push(panoIds[0]);
  for (i = k = 1, ref = panoIds.length - 1; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
    if (panoIds[i].id !== prevId) {
      mergedPanoIds.push(panoIds[i]);
    }
    prevId = panoIds[i].id;
  }
  trace("reduced " + panoIds.length + "->" + mergedPanoIds.length);
  panoIds = mergedPanoIds;
  return loadPanorama();
};

loadPanorama = function() {
  var TIME_OUT, failedLoadPanorama, index, loadEachPanorama, max, timerId;
  trace('loadPanorama----------');
  max = panoIds.length;
  index = 0;
  timerId = 0;
  TIME_OUT = 2000;
  loadEachPanorama = function() {
    if (index >= max) {
      alert("finish!");
      return;
    }
    trace(index, panoIds[index].id);
    timerId = setTimeout(failedLoadPanorama, TIME_OUT);
    return loader.composePanorama(panoIds[index].id);
  };
  failedLoadPanorama = function() {
    trace(index, " - time out");
    return loadEachPanorama(++index);
  };
  loader.onPanoramaLoad = function() {
    exportCanvas(canvas, 'test', index);
    clearTimeout(timerId);
    return loadEachPanorama(++index);
  };
  return loadEachPanorama(0);
};

//# sourceMappingURL=data:application/json;base64,