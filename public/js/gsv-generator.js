var API_KEY, DIST_BETWEEN_PTS, MAX_PTS, VERSION, canvas, create, dirService, loader, onAnalyzeComplete, onCancel, onMessage, onPanoramaLoad, onProgress, panoIds, rawPts, res, restoreSettings, settings, storage, tasks, totalDist, updateSettings;

MAX_PTS = 100;

DIST_BETWEEN_PTS = 5;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

VERSION = '0.3';

loader = null;

dirService = new google.maps.DirectionsService({});

res = null;

rawPts = [];

panoIds = [];

totalDist = 0;

canvas = null;

tasks = [];

settings = {};

storage = localStorage;

restoreSettings = function() {
  var $elm;
  $elm = $('nav');
  if (storage.version === VERSION) {
    $('#name').val(storage.name);
    $('#dir').val(storage.dir);
    $("input[value=" + storage.method + "]").prop('checked', true);
    $('#url').val(storage.url);
    $('#panoid').val(storage.panoid);
    $("input[value=" + storage.travelMode + "]").prop('checked', true);
    $("input[value=" + storage.heading + "]").prop('checked', true);
    $('#lookat').val(storage.lookat);
    $('#zoom').val(storage.zoom);
    $('#step').val(storage.step);
    $('#search-radius').val(storage.searchRadius);
  }
  return $elm.find('[data-parent]').each(function() {
    var $parent, $this, name;
    $this = $(this);
    $parent = $($this.attr('data-parent'));
    name = $parent.attr('name');
    return $("[name=" + name).on('change', (function(_this) {
      return function() {
        return $(_this).toggle($parent.prop('checked'));
      };
    })(this)).trigger('change');
  });
};

updateSettings = function() {
  settings.name = $('#name').val();
  settings.dir = $('#dir').val();
  settings.method = $('input[name=method]:checked').val();
  settings.url = $('#url').val();
  settings.panoid = $('#panoid').val();
  settings.travelMode = $('input[name=travel]:checked').val();
  settings.heading = $('input[name=heading]:checked').val();
  settings.lookat = $('#lookat').val();
  settings.zoom = $('#zoom').val();
  settings.step = $('#step').val();
  settings.searchRadius = $('#search-radius').val();
  settings.version = VERSION;
  return $.extend(storage, settings);
};

$(function() {
  canvas = $('#panorama')[0];
  $('#create').on('click', create);
  GSVHyperlapse.onMessage = onMessage;
  GSVHyperlapse.onPanoramaLoad = onPanoramaLoad;
  GSVHyperlapse.onProgress = onProgress;
  GSVHyperlapse.onAnalyzeComplete = onAnalyzeComplete;
  GSVHyperlapse.onCancel = onCancel;
  restoreSettings();
  return $('input').on('change', updateSettings);
});

create = function() {
  var hyperlapse, index;
  updateSettings();
  index = tasks.length;
  $('.tasks').append("<li id='task-" + index + "'> <h1>" + settings.name + "</h1> <button class='action' data-index='" + index + "'>Cancel</button> <p>requesting route..<br></p> <div id='map-" + index + "' style='width: 48%; height: 0; padding-top: 26%; background:gray; display: inline-block;'></div> </li>");
  hyperlapse = new GSVHyperlapse(settings);
  hyperlapse.setMap($("#map-" + index)[0]);
  if (settings.method === 'direction') {
    hyperlapse.createFromDirection(settings.url);
  } else if (settings.method === 'panoid') {
    hyperlapse.createFromPanoId();
  }
  $("#task-" + index + " button").on('click', function() {
    var $elm;
    $elm = $(this);
    index = $elm.attr('data-index');
    return tasks[index].cancel();
  });
  return tasks.push(hyperlapse);
};

onCancel = function() {
  var $btn, $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $btn = $('<button>delete</button><br>');
  $btn.on('click', function() {
    return $elm.remove();
  });
  return $elm.children('p').append('canceled<br>').append($btn);
};

onAnalyzeComplete = function() {
  var $btnGen, $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $btnGen = $('<button>generate hyperlapse</button><br>');
  $btnGen.on('click', function() {
    return tasks[index].compose();
  });
  return $elm.children('p').append($btnGen);
};

onProgress = function(loaded, total) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  if (loaded < 1) {
    $elm.children('p').append($('<progress></progress>'));
  }
  return $elm.find("progress").last().attr({
    value: loaded,
    max: total,
    'data-label': "[" + loaded + "/" + total + "]"
  });
};

onMessage = function(message) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  return $elm.children('p').append(message + "<br>");
};

onPanoramaLoad = function(idx, canvas) {
  var $elm, index, params;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $elm.append(canvas);
  params = {
    name: this.name,
    directory: settings.dir,
    number: idx,
    image: canvas.toDataURL('image/png')
  };
  return $.ajax({
    type: "POST",
    url: './save.php',
    data: params,
    success: (function(_this) {
      return function(json) {
        var result;
        result = $.parseJSON(json);
        if (result.status !== "success") {
          _this.cancel();
          return $elm.children('p').append("an error occured" + "<br>");
        }
      };
    })(this)
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdzdi1nZW5lcmF0b3IuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUEsK09BQUE7O0FBQUEsT0FBQSxHQUFVLEdBQVYsQ0FBQTs7QUFBQSxnQkFDQSxHQUFtQixDQURuQixDQUFBOztBQUFBLE9BR0EsR0FBVSx5Q0FIVixDQUFBOztBQUFBLE9BSUEsR0FBVSxLQUpWLENBQUE7O0FBQUEsTUFRQSxHQUFTLElBUlQsQ0FBQTs7QUFBQSxVQVNBLEdBQWlCLElBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBWixDQUE4QixFQUE5QixDQVRqQixDQUFBOztBQUFBLEdBWUEsR0FBTSxJQVpOLENBQUE7O0FBQUEsTUFjQSxHQUFTLEVBZFQsQ0FBQTs7QUFBQSxPQWVBLEdBQVUsRUFmVixDQUFBOztBQUFBLFNBZ0JBLEdBQVksQ0FoQlosQ0FBQTs7QUFBQSxNQWtCQSxHQUFTLElBbEJULENBQUE7O0FBQUEsS0FvQkEsR0FBUSxFQXBCUixDQUFBOztBQUFBLFFBc0JBLEdBQVcsRUF0QlgsQ0FBQTs7QUFBQSxPQXdCQSxHQUFVLFlBeEJWLENBQUE7O0FBQUEsZUErQkEsR0FBa0IsU0FBQSxHQUFBO0FBQ2pCLE1BQUEsSUFBQTtBQUFBLEVBQUEsSUFBQSxHQUFPLENBQUEsQ0FBRSxLQUFGLENBQVAsQ0FBQTtBQUVBLEVBQUEsSUFBRyxPQUFPLENBQUMsT0FBUixLQUFtQixPQUF0QjtBQUVDLElBQUEsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLEdBQVgsQ0FBZ0IsT0FBTyxDQUFDLElBQXhCLENBQUEsQ0FBQTtBQUFBLElBQ0EsQ0FBQSxDQUFFLE1BQUYsQ0FBUyxDQUFDLEdBQVYsQ0FBZSxPQUFPLENBQUMsR0FBdkIsQ0FEQSxDQUFBO0FBQUEsSUFFQSxDQUFBLENBQUUsY0FBQSxHQUFlLE9BQU8sQ0FBQyxNQUF2QixHQUE4QixHQUFoQyxDQUFtQyxDQUFDLElBQXBDLENBQXlDLFNBQXpDLEVBQW9ELElBQXBELENBRkEsQ0FBQTtBQUFBLElB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QUFBLElBQUEsRUFBTSxJQUFDLENBQUEsSUFBUDtBQUFBLElBQ0EsU0FBQSxFQUFXLFFBQVEsQ0FBQyxHQURwQjtBQUFBLElBRUEsTUFBQSxFQUFRLEdBRlI7QUFBQSxJQUdBLEtBQUEsRUFBTyxNQUFNLENBQUMsU0FBUCxDQUFpQixXQUFqQixDQUhQO0dBUEQsQ0FBQTtTQVlBLENBQUMsQ0FBQyxJQUFGLENBQ0M7QUFBQSxJQUFBLElBQUEsRUFBTSxNQUFOO0FBQUEsSUFDQSxHQUFBLEVBQUssWUFETDtBQUFBLElBRUEsSUFBQSxFQUFNLE1BRk47QUFBQSxJQUdBLE9BQUEsRUFBUyxDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQyxJQUFELEdBQUE7QUFDUixZQUFBLE1BQUE7QUFBQSxRQUFBLE1BQUEsR0FBUyxDQUFDLENBQUMsU0FBRixDQUFhLElBQWIsQ0FBVCxDQUFBO0FBQ0EsUUFBQSxJQUFHLE1BQU0sQ0FBQyxNQUFQLEtBQWlCLFNBQXBCO0FBQ0MsVUFBQSxLQUFDLENBQUEsTUFBRCxDQUFBLENBQUEsQ0FBQTtpQkFDQSxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBa0IsQ0FBQyxNQUFuQixDQUEwQixrQkFBQSxHQUFxQixNQUEvQyxFQUZEO1NBRlE7TUFBQSxFQUFBO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUhUO0dBREQsRUFiZ0I7QUFBQSxDQWxNakIsQ0FBQSIsImZpbGUiOiJnc3YtZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBjb25zdGFudHNcbk1BWF9QVFMgPSAxMDBcbkRJU1RfQkVUV0VFTl9QVFMgPSA1XG5cbkFQSV9LRVkgPSBcIkFJemFTeUJRMmR6RGZ5RjhZMER3ZS1RNkp6eDRfRzYyQU5yVG90UVwiXG5WRVJTSU9OID0gJzAuMydcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyB2YXJpYWJsZXNcbmxvYWRlciA9IG51bGxcbmRpclNlcnZpY2UgPSBuZXcgZ29vZ2xlLm1hcHMuRGlyZWN0aW9uc1NlcnZpY2Uoe30pXG5cbiMgZWFjaCByZXNcbnJlcyA9IG51bGxcblxucmF3UHRzID0gW11cbnBhbm9JZHMgPSBbXVxudG90YWxEaXN0ID0gMFxuXG5jYW52YXMgPSBudWxsXG5cbnRhc2tzID0gW11cblxuc2V0dGluZ3MgPSB7fVxuXG5zdG9yYWdlID0gbG9jYWxTdG9yYWdlXG5cblxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIGluaXRcblxucmVzdG9yZVNldHRpbmdzID0gLT5cblx0JGVsbSA9ICQoJ25hdicpXG5cblx0aWYgc3RvcmFnZS52ZXJzaW9uID09IFZFUlNJT05cblx0XHQjIHJlc3RvcmUgYWxsIHNldHRpbmdzXG5cdFx0JCgnI25hbWUnKS52YWwoIHN0b3JhZ2UubmFtZSApXG5cdFx0JCgnI2RpcicpLnZhbCggc3RvcmFnZS5kaXIgKVxuXHRcdCQoXCJpbnB1dFt2YWx1ZT0je3N0b3JhZ2UubWV0aG9kfV1cIikucHJvcCgnY2hlY2tlZCcsIHRydWUpXG5cdFx0JCgnI3VybCcpLnZhbCggc3RvcmFnZS51cmwgKVxuXHRcdCQoJyNwYW5vaWQnKS52YWwoIHN0b3JhZ2UucGFub2lkIClcblx0XHQkKFwiaW5wdXRbdmFsdWU9I3tzdG9yYWdlLnRyYXZlbE1vZGV9XVwiKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSlcblx0XHQkKFwiaW5wdXRbdmFsdWU9I3tzdG9yYWdlLmhlYWRpbmd9XVwiKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSlcblx0XHQkKCcjbG9va2F0JykudmFsKCBzdG9yYWdlLmxvb2thdCApXG5cdFx0JCgnI3pvb20nKS52YWwoIHN0b3JhZ2Uuem9vbSApXG5cdFx0JCgnI3N0ZXAnKS52YWwoIHN0b3JhZ2Uuc3RlcCApXG5cdFx0JCgnI3NlYXJjaC1yYWRpdXMnKS52YWwoIHN0b3JhZ2Uuc2VhcmNoUmFkaXVzIClcblxuXHQjIGJpbmRcblx0IyAkZWxtLmZpbmQoJ2lucHV0W2RhdGEtb25jaGVja2VkXSwgdGV4dGFyZWFbZGF0YS1vbmNoZWNrZWRdJykuZWFjaCAtPlxuXHRcdFxuXHQjIFx0JHRoaXMgPSAkKEApXG5cdCMgXHRjb25zb2xlLmxvZyAkdGhpc1xuXG5cdCMgXHQkcGFyZW50ID0gJCggJHRoaXMuYXR0cignZGF0YS1vbmNoZWNrZWQnKSApXG5cdCMgXHRuYW1lID0gJHBhcmVudC5hdHRyKCduYW1lJylcblxuXHQjIFx0JCggXCJbbmFtZT0je25hbWV9XCIpLm9uICdjaGFuZ2UnLCAtPlxuXHQjIFx0XHRjb25zb2xlLmxvZyAkcGFyZW50LnByb3AoJ2NoZWNrZWQnKVxuXHQjIFx0XHQkdGhpcy5wcm9wKCdkaXNhYmxlZCcsICEkcGFyZW50LnByb3AoJ2NoZWNrZWQnKSlcblxuXHQkZWxtLmZpbmQoJ1tkYXRhLXBhcmVudF0nKS5lYWNoIC0+XG5cblx0XHQkdGhpcyA9ICQoQClcblx0XHQkcGFyZW50ID0gJCggJHRoaXMuYXR0cignZGF0YS1wYXJlbnQnKSApXG5cdFx0bmFtZSA9ICRwYXJlbnQuYXR0cignbmFtZScpXG5cblx0XHQkKFwiW25hbWU9I3tuYW1lfVwiKS5vbiAnY2hhbmdlJywgPT5cblx0XHRcdCQoQCkudG9nZ2xlKCAkcGFyZW50LnByb3AoJ2NoZWNrZWQnKSApXG5cdFx0LnRyaWdnZXIoJ2NoYW5nZScpXG5cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBmdW5jdGlvbnNcblxudXBkYXRlU2V0dGluZ3MgPSAtPlxuXHRzZXR0aW5ncy5uYW1lIFx0ICAgICAgICA9ICQoJyNuYW1lJykudmFsKClcblx0c2V0dGluZ3MuZGlyIFx0ICAgICAgICA9ICQoJyNkaXInKS52YWwoKVxuXHRzZXR0aW5ncy5tZXRob2RcdFx0XHQ9ICQoJ2lucHV0W25hbWU9bWV0aG9kXTpjaGVja2VkJykudmFsKClcblx0c2V0dGluZ3MudXJsIFx0ICAgICAgICA9ICQoJyN1cmwnKS52YWwoKVxuXHRzZXR0aW5ncy5wYW5vaWQgXHRcdD0gJCgnI3Bhbm9pZCcpLnZhbCgpXG5cdHNldHRpbmdzLnRyYXZlbE1vZGUgICAgID0gJCgnaW5wdXRbbmFtZT10cmF2ZWxdOmNoZWNrZWQnKS52YWwoKVxuXHRzZXR0aW5ncy5oZWFkaW5nICAgICAgICA9ICQoJ2lucHV0W25hbWU9aGVhZGluZ106Y2hlY2tlZCcpLnZhbCgpXG5cdHNldHRpbmdzLmxvb2thdCAgICAgICAgID0gJCgnI2xvb2thdCcpLnZhbCgpXG5cdHNldHRpbmdzLnpvb21cdCAgICAgICAgPSAkKCcjem9vbScpLnZhbCgpXG5cdHNldHRpbmdzLnN0ZXBcdCAgICAgICAgPSAkKCcjc3RlcCcpLnZhbCgpXG5cdHNldHRpbmdzLnNlYXJjaFJhZGl1c1x0PSAkKCcjc2VhcmNoLXJhZGl1cycpLnZhbCgpXG5cdHNldHRpbmdzLnZlcnNpb24gXHRcdD0gVkVSU0lPTlxuXG5cdCMgc2F2ZSB0byB3ZWIgc3RvcmFnZVxuXHQkLmV4dGVuZChzdG9yYWdlLCBzZXR0aW5ncylcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBvbiBsb2FkXG5cbiQgLT5cblxuXHRjYW52YXMgPSAkKCcjcGFub3JhbWEnKVswXVxuXG5cdCQoJyNjcmVhdGUnKS5vbiAnY2xpY2snLCBjcmVhdGVcblxuXHRHU1ZIeXBlcmxhcHNlLm9uTWVzc2FnZSA9IG9uTWVzc2FnZVxuXHRHU1ZIeXBlcmxhcHNlLm9uUGFub3JhbWFMb2FkID0gb25QYW5vcmFtYUxvYWRcblx0R1NWSHlwZXJsYXBzZS5vblByb2dyZXNzID0gb25Qcm9ncmVzc1xuXHRHU1ZIeXBlcmxhcHNlLm9uQW5hbHl6ZUNvbXBsZXRlID0gb25BbmFseXplQ29tcGxldGVcblx0R1NWSHlwZXJsYXBzZS5vbkNhbmNlbCA9IG9uQ2FuY2VsXG5cblx0cmVzdG9yZVNldHRpbmdzKClcblxuXHQkKCdpbnB1dCcpLm9uICdjaGFuZ2UnLCB1cGRhdGVTZXR0aW5nc1xuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jcmVhdGUgPSAtPlxuXG5cdHVwZGF0ZVNldHRpbmdzKClcblxuXHRpbmRleCA9IHRhc2tzLmxlbmd0aFxuXG5cdCQoJy50YXNrcycpLmFwcGVuZChcIlxuXHRcdDxsaSBpZD0ndGFzay0je2luZGV4fSc+XG5cdFx0XHQ8aDE+I3tzZXR0aW5ncy5uYW1lfTwvaDE+XG5cdFx0XHQ8YnV0dG9uIGNsYXNzPSdhY3Rpb24nIGRhdGEtaW5kZXg9JyN7aW5kZXh9Jz5DYW5jZWw8L2J1dHRvbj5cblx0XHRcdDxwPnJlcXVlc3Rpbmcgcm91dGUuLjxicj48L3A+XG5cdFx0XHQ8ZGl2IGlkPSdtYXAtI3tpbmRleH0nIHN0eWxlPSd3aWR0aDogNDglOyBoZWlnaHQ6IDA7IHBhZGRpbmctdG9wOiAyNiU7IGJhY2tncm91bmQ6Z3JheTsgZGlzcGxheTogaW5saW5lLWJsb2NrOyc+PC9kaXY+XG5cdFx0PC9saT5cblx0XCIpXG5cblx0aHlwZXJsYXBzZSA9IG5ldyBHU1ZIeXBlcmxhcHNlKCBzZXR0aW5ncyApXG5cdGh5cGVybGFwc2Uuc2V0TWFwKCAkKFwiI21hcC0je2luZGV4fVwiKVswXSApXG5cblx0aWYgc2V0dGluZ3MubWV0aG9kID09ICdkaXJlY3Rpb24nXG5cdFx0aHlwZXJsYXBzZS5jcmVhdGVGcm9tRGlyZWN0aW9uKCBzZXR0aW5ncy51cmwgKVxuXG5cdGVsc2UgaWYgc2V0dGluZ3MubWV0aG9kID09ICdwYW5vaWQnXG5cdFx0aHlwZXJsYXBzZS5jcmVhdGVGcm9tUGFub0lkKClcblxuXG5cdCQoXCIjdGFzay0je2luZGV4fSBidXR0b25cIikub24gJ2NsaWNrJywgLT5cblx0XHQkZWxtID0gJChAKVxuXHRcdGluZGV4ID0gJGVsbS5hdHRyKCdkYXRhLWluZGV4Jylcblx0XHR0YXNrc1tpbmRleF0uY2FuY2VsKClcblxuXG5cdHRhc2tzLnB1c2goIGh5cGVybGFwc2UgKVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5vbkNhbmNlbCA9IC0+XG5cdGluZGV4ID0gdGFza3MuaW5kZXhPZiggQCApXG5cdCRlbG0gPSAkKFwiI3Rhc2stI3tpbmRleH1cIilcblxuXHQkYnRuID0gJCgnPGJ1dHRvbj5kZWxldGU8L2J1dHRvbj48YnI+Jyk7XG5cblx0JGJ0bi5vbiAnY2xpY2snLCAtPlxuXHRcdCRlbG0ucmVtb3ZlKCk7XG5cblx0JGVsbS5jaGlsZHJlbigncCcpXG5cdFx0LmFwcGVuZCgnY2FuY2VsZWQ8YnI+Jylcblx0XHQuYXBwZW5kKCAkYnRuICk7XG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbm9uQW5hbHl6ZUNvbXBsZXRlID0gLT5cblx0aW5kZXggPSB0YXNrcy5pbmRleE9mKCBAIClcblx0JGVsbSA9ICQoXCIjdGFzay0je2luZGV4fVwiKVxuXG5cblx0JGJ0bkdlbiA9ICQoJzxidXR0b24+Z2VuZXJhdGUgaHlwZXJsYXBzZTwvYnV0dG9uPjxicj4nKTtcblxuXHQkYnRuR2VuLm9uICdjbGljaycsIC0+XG5cdFx0dGFza3NbaW5kZXhdLmNvbXBvc2UoKVxuXG5cdCRlbG0uY2hpbGRyZW4oJ3AnKS5hcHBlbmQoICRidG5HZW4gKTtcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxub25Qcm9ncmVzcyA9IChsb2FkZWQsIHRvdGFsKSAtPlxuXHRpbmRleCA9IHRhc2tzLmluZGV4T2YoIEAgKVxuXHQkZWxtID0gJChcIiN0YXNrLSN7aW5kZXh9XCIpXG5cblx0aWYgbG9hZGVkIDwgMVxuXHRcdCRlbG0uY2hpbGRyZW4oJ3AnKS5hcHBlbmQoICQoJzxwcm9ncmVzcz48L3Byb2dyZXNzPicpKVxuXG5cdCRlbG0uZmluZChcInByb2dyZXNzXCIpLmxhc3QoKVxuXHRcdC5hdHRyXG5cdFx0XHR2YWx1ZTogbG9hZGVkXG5cdFx0XHRtYXg6IHRvdGFsXG5cdFx0XHQnZGF0YS1sYWJlbCc6ICBcIlsje2xvYWRlZH0vI3t0b3RhbH1dXCJcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxub25NZXNzYWdlID0gKG1lc3NhZ2UpIC0+XG5cdGluZGV4ID0gdGFza3MuaW5kZXhPZiggQCApXG5cdCRlbG0gPSAkKFwiI3Rhc2stI3tpbmRleH1cIilcblxuXHQkZWxtLmNoaWxkcmVuKCdwJykuYXBwZW5kKCBtZXNzYWdlICsgXCI8YnI+XCIgKVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5vblBhbm9yYW1hTG9hZCA9IChpZHgsIGNhbnZhcykgLT5cblx0aW5kZXggPSB0YXNrcy5pbmRleE9mKCBAIClcblx0JGVsbSA9ICQoXCIjdGFzay0je2luZGV4fVwiKVxuXG5cdCRlbG0uYXBwZW5kKCBjYW52YXMgKVxuXG5cdCMgc2F2ZSBpbWFnZVxuXHRwYXJhbXMgPVxuXHRcdG5hbWU6IEBuYW1lXG5cdFx0ZGlyZWN0b3J5OiBzZXR0aW5ncy5kaXJcblx0XHRudW1iZXI6IGlkeFxuXHRcdGltYWdlOiBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKVxuXG5cdCQuYWpheCBcblx0XHR0eXBlOiBcIlBPU1RcIlxuXHRcdHVybDogJy4vc2F2ZS5waHAnXG5cdFx0ZGF0YTogcGFyYW1zXG5cdFx0c3VjY2VzczogKGpzb24pID0+XG5cdFx0XHRyZXN1bHQgPSAkLnBhcnNlSlNPTigganNvbiApXG5cdFx0XHRpZiByZXN1bHQuc3RhdHVzICE9IFwic3VjY2Vzc1wiXG5cdFx0XHRcdEBjYW5jZWwoKVxuXHRcdFx0XHQkZWxtLmNoaWxkcmVuKCdwJykuYXBwZW5kKFwiYW4gZXJyb3Igb2NjdXJlZFwiICsgXCI8YnI+XCIpXG4iXX0=