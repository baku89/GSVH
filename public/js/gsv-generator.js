var API_KEY, DIST_BETWEEN_PTS, MAX_PTS, PROXY_HEIGHT, TAG_HEIGHT, VERSION, V_SCALE, canvas, create, dirService, loader, onAnalyzeComplete, onCancel, onComposeComplete, onMessage, onPanoramaLoad, onProgress, panoIds, rawPts, res, restoreSettings, settings, storage, tasks, totalDist, updateSettings;

MAX_PTS = 100;

DIST_BETWEEN_PTS = 5;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

VERSION = '0.3';

TAG_HEIGHT = 40.0;

PROXY_HEIGHT = 832.0;

V_SCALE = (TAG_HEIGHT + PROXY_HEIGHT) / PROXY_HEIGHT;

loader = null;

dirService = new google.maps.DirectionsService({});

res = null;

rawPts = [];

panoIds = [];

totalDist = 0;

canvas = null;

tasks = [];

settings = {};

storage = localStorage;

restoreSettings = function() {
  var $elm;
  $elm = $('nav');
  if (storage.version === VERSION) {
    $('#name').val(storage.name);
    $('#dir').val(storage.dir);
    $("input[value=" + storage.method + "]").prop('checked', true);
    $('#url').val(storage.url);
    $('#panoid').val(storage.panoid);
    $("input[value=" + storage.travelMode + "]").prop('checked', true);
    $("input[value=" + storage.headingMode + "]").prop('checked', true);
    $('#lookat').val(storage.lookat);
    $('#zoom').val(storage.zoom);
    $('#step').val(storage.step);
    $('#search-radius').val(storage.searchRadius);
  }
  return $elm.find('[data-parent]').each(function() {
    var $parent, $this, name;
    $this = $(this);
    $parent = $($this.attr('data-parent'));
    name = $parent.attr('name');
    return $("[name=" + name).on('change', (function(_this) {
      return function() {
        return $(_this).toggle($parent.prop('checked'));
      };
    })(this)).trigger('change');
  });
};

updateSettings = function() {
  settings.name = $('#name').val();
  settings.dir = $('#dir').val();
  settings.method = $('input[name=method]:checked').val();
  settings.url = $('#url').val();
  settings.panoid = $('#panoid').val();
  settings.travelMode = $('input[name=travel]:checked').val();
  settings.headingMode = $('input[name=heading]:checked').val();
  settings.lookat = $('#lookat').val();
  settings.zoom = $('#zoom').val();
  settings.step = $('#step').val();
  settings.searchRadius = $('#search-radius').val();
  settings.version = VERSION;
  return $.extend(storage, settings);
};

$(function() {
  canvas = document.createElement('canvas');
  $('#create').on('click', create);
  GSVHyperlapse.onMessage = onMessage;
  GSVHyperlapse.onPanoramaLoad = onPanoramaLoad;
  GSVHyperlapse.onProgress = onProgress;
  GSVHyperlapse.onAnalyzeComplete = onAnalyzeComplete;
  GSVHyperlapse.onComposeComplete = onComposeComplete;
  GSVHyperlapse.onCancel = onCancel;
  restoreSettings();
  return $('input').on('change', updateSettings);
});

create = function() {
  updateSettings();
  return FILE.exists(settings.dir + "/" + settings.name, function(flg) {
    var hyperlapse, index, list;
    if (flg) {
      alert('destination folder is already exists.');
      return;
    }
    index = tasks.length;
    $('.tasks').append("<li id='task-" + index + "'> <h1><input type='text' name='name' value='" + settings.name + "'></h1> <button class='cancel action' data-index='" + index + "'>Cancel</button> <p>mode: " + settings.method + "<br></p> <div id='map-" + index + "' style='width: 48%; height: 0; padding-top: 26%; background:gray; display: inline-block;'></div> </li>");
    hyperlapse = new GSVHyperlapse(settings.name, $("#map-" + index)[0]);
    hyperlapse.setParameters(settings);
    if (settings.method === 'direction') {
      hyperlapse.createFromDirection(settings.url);
    } else if (settings.method === 'panoid') {
      list = $.parseJSON($('#panoid').val());
      hyperlapse.createFromPanoId(list);
    }
    $("#task-" + index + " .cancel").on('click', function() {
      index = $(this).attr('data-index');
      return tasks[index].cancel();
    });
    return tasks.push(hyperlapse);
  });
};

onCancel = function() {
  var $btn, $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $btn = $('<button>delete</button><br>');
  $btn.on('click', function() {
    return $elm.remove();
  });
  return $elm.children('p').append('canceled<br>').append($btn);
};

onAnalyzeComplete = function() {
  var $btnGen, $elm, $p, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $p = $elm.children('p');
  $btnGen = $('<button>generate hyperlapse</button><br>');
  $elm.children('p').append($btnGen);
  return $btnGen.on('click', (function(_this) {
    return function() {
      $elm.children('.control').remove();
      return _this.compose(settings);
    };
  })(this));
};

onComposeComplete = function() {
  var $elm, $p, dir, index, pano, txtPanoIds, txtPanoList, txtReport;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $p = $elm.children('p');
  this.name = $elm.find('[name=name]').prop('disabled', true).val();
  dir = settings.dir + "/" + this.name;
  if (this.method === GSVHyperlapseMethod.DIRECTION) {
    txtReport = "method: direction\nurl: " + this.sourceUrl + "\nstep: " + this.step + "\nsearchRadius: " + this.searchRadius;
  } else if (this.method = GSVHyperlapseMethod.PANOID) {
    txtReport = "method: panoid";
  }
  txtPanoIds = JSON.stringify((function() {
    var i, len, ref, results;
    ref = this.panoList;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      pano = ref[i];
      results.push(pano.id);
    }
    return results;
  }).call(this));
  txtPanoList = JSON.stringify(this.panoList);
  FILE.saveText(txtReport, dir + "/_report.txt", (function(_this) {
    return function(res) {
      return $p.append('report saved<br>');
    };
  })(this));
  FILE.saveText(txtPanoIds, dir + "/_pano-ids.json", (function(_this) {
    return function(res) {
      return $p.append('pano-ids.json saved<br>');
    };
  })(this));
  return FILE.saveText(txtPanoList, dir + "/_pano-data.json", (function(_this) {
    return function(res) {
      return $p.append('pano-data.json saved<br>');
    };
  })(this));
};

onProgress = function(loaded, total) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  if (loaded < 1) {
    $elm.children('p').append($('<progress></progress>'));
  }
  return $elm.find("progress").last().attr({
    value: loaded,
    max: total,
    'data-label': "[" + loaded + "/" + total + "]"
  });
};

onMessage = function(message) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  return $elm.children('p').append(message + "<br>");
};

onPanoramaLoad = function(idx, pano, data) {
  var $elm, ctx, index, params, tag;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  canvas.width = pano.width;
  canvas.height = pano.height * V_SCALE;
  ctx = canvas.getContext('2d');
  ctx.fillStyle = '#000000';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(pano, 0, 0);
  tag = {
    uid: this.uid,
    id: data.id,
    heading: data.heading,
    rotation: data.rotation,
    pitch: data.pitch,
    date: data.date,
    latLng: data.latLng.toString()
  };
  CanvasMatrixCode.draw(canvas, tag, 0, pano.height + 10, canvas.width, TAG_HEIGHT - 10);
  $elm.append(canvas);
  params = {
    name: this.name,
    directory: settings.dir,
    number: idx,
    image: canvas.toDataURL('image/png')
  };
  return $.ajax({
    type: "POST",
    url: './save.php',
    data: params,
    success: (function(_this) {
      return function(json) {
        var result;
        result = $.parseJSON(json);
        if (result.status !== "success") {
          _this.cancel();
          return $elm.children('p').append("an error occured" + "<br>");
        }
      };
    })(this)
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdzdi1nZW5lcmF0b3IuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUEscVNBQUE7O0FBQUEsT0FBQSxHQUFVLEdBQVYsQ0FBQTs7QUFBQSxnQkFDQSxHQUFtQixDQURuQixDQUFBOztBQUFBLE9BR0EsR0FBVSx5Q0FIVixDQUFBOztBQUFBLE9BSUEsR0FBVSxLQUpWLENBQUE7O0FBQUEsVUFNQSxHQUFhLElBTmIsQ0FBQTs7QUFBQSxZQU9BLEdBQWUsS0FQZixDQUFBOztBQUFBLE9BUUEsR0FBVSxDQUFDLFVBQUEsR0FBYSxZQUFkLENBQUEsR0FBOEIsWUFSeEMsQ0FBQTs7QUFBQSxNQVlBLEdBQVMsSUFaVCxDQUFBOztBQUFBLFVBYUEsR0FBaUIsSUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFaLENBQThCLEVBQTlCLENBYmpCLENBQUE7O0FBQUEsR0FnQkEsR0FBTSxJQWhCTixDQUFBOztBQUFBLE1Ba0JBLEdBQVMsRUFsQlQsQ0FBQTs7QUFBQSxPQW1CQSxHQUFVLEVBbkJWLENBQUE7O0FBQUEsU0FvQkEsR0FBWSxDQXBCWixDQUFBOztBQUFBLE1Bc0JBLEdBQVMsSUF0QlQsQ0FBQTs7QUFBQSxLQXdCQSxHQUFRLEVBeEJSLENBQUE7O0FBQUEsUUEwQkEsR0FBVyxFQTFCWCxDQUFBOztBQUFBLE9BNEJBLEdBQVUsWUE1QlYsQ0FBQTs7QUFBQSxlQWlDQSxHQUFrQixTQUFBLEdBQUE7QUFDakIsTUFBQSxJQUFBO0FBQUEsRUFBQSxJQUFBLEdBQU8sQ0FBQSxDQUFFLEtBQUYsQ0FBUCxDQUFBO0FBRUEsRUFBQSxJQUFHLE9BQU8sQ0FBQyxPQUFSLEtBQW1CLE9BQXRCO0FBRUMsSUFBQSxDQUFBLENBQUUsT0FBRixDQUFVLENBQUMsR0FBWCxDQUFnQixPQUFPLENBQUMsSUFBeEIsQ0FBQSxDQUFBO0FBQUEsSUFDQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsR0FBVixDQUFlLE9BQU8sQ0FBQyxHQUF2QixDQURBLENBQUE7QUFBQSxJQUVBLENBQUEsQ0FBRSxjQUFBLEdBQWUsT0FBTyxDQUFDLE1BQXZCLEdBQThCLEdBQWhDLENBQW1DLENBQUMsSUFBcEMsQ0FBeUMsU0FBekMsRUFBb0QsSUFBcEQsQ0FGQSxDQUFBO0FBQUEsSUFHQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsR0FBVixDQUFlLE9BQU8sQ0FBQyxHQUF2QixDQUhBLENBQUE7QUFBQSxJQUlBLENBQUEsQ0FBRSxTQUFGLENBQVksQ0FBQyxHQUFiLENBQWtCLE9BQU8sQ0FBQyxNQUExQixDQUpBLENBQUE7QUFBQSxJQUtBLENBQUEsQ0FBRSxjQUFBLEdBQWUsT0FBTyxDQUFDLFVBQXZCLEdBQWtDLEdBQXBDLENBQXVDLENBQUMsSUFBeEMsQ0FBNkMsU0FBN0MsRUFBd0QsSUFBeEQsQ0FMQSxDQUFBO0FBQUEsSUFNQSxDQUFBLENBQUUsY0FBQSxHQUFlLE9BQU8sQ0FBQyxXQUF2QixHQUFtQyxHQUFyQyxDQUF3QyxDQUFDLElBQXpDLENBQThDLFNBQTlDLEVBQXlELElBQXpELENBTkEsQ0FBQTtBQUFBLElBT0EsQ0FBQSxDQUFFLFNBQUYsQ0FBWSxDQUFDLEdBQWIsQ0FBa0IsT0FBTyxDQUFDLE1BQTFCLENBUEEsQ0FBQTtBQUFBLElBUUEsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLEdBQVgsQ0FBZ0IsT0FBTyxDQUFDLElBQXhCLENBUkEsQ0FBQTtBQUFBLElBU0EsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLEdBQVgsQ0FBZ0IsT0FBTyxDQUFDLElBQXhCLENBVEEsQ0FBQTtBQUFBLElBVUEsQ0FBQSxDQUFFLGdCQUFGLENBQW1CLENBQUMsR0FBcEIsQ0FBeUIsT0FBTyxDQUFDLFlBQWpDLENBVkEsQ0FGRDtHQUZBO1NBZ0JBLElBQUksQ0FBQyxJQUFMLENBQVUsZUFBVixDQUEwQixDQUFDLElBQTNCLENBQWdDLFNBQUEsR0FBQTtBQUUvQixRQUFBLG9CQUFBO0FBQUEsSUFBQSxLQUFBLEdBQVEsQ0FBQSxDQUFFLElBQUYsQ0FBUixDQUFBO0FBQUEsSUFDQSxPQUFBLEdBQVUsQ0FBQSxDQUFHLEtBQUssQ0FBQyxJQUFOLENBQVcsYUFBWCxDQUFILENBRFYsQ0FBQTtBQUFBLElBRUEsSUFBQSxHQUFPLE9BQU8sQ0FBQyxJQUFSLENBQWEsTUFBYixDQUZQLENBQUE7V0FJQSxDQUFBLENBQUUsUUFBQSxHQUFTLElBQVgsQ0FBa0IsQ0FBQyxFQUFuQixDQUFzQixRQUF0QixFQUFnQyxDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQSxHQUFBO2VBQy9CLENBQUEsQ0FBRSxLQUFGLENBQUksQ0FBQyxNQUFMLENBQWEsT0FBTyxDQUFDLElBQVIsQ0FBYSxTQUFiLENBQWIsRUFEK0I7TUFBQSxFQUFBO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFoQyxDQUVBLENBQUMsT0FGRCxDQUVTLFFBRlQsRUFOK0I7RUFBQSxDQUFoQyxFQWpCaUI7QUFBQSxDQWpDbEIsQ0FBQTs7QUFBQSxjQWdFQSxHQUFpQixTQUFBLEdBQUE7QUFDaEIsRUFBQSxRQUFRLENBQUMsSUFBVCxHQUF5QixDQUFBLENBQUUsT0FBRixDQUFVLENBQUMsR0FBWCxDQUFBLENBQXpCLENBQUE7QUFBQSxFQUNBLFFBQVEsQ0FBQyxHQUFULEdBQXdCLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxHQUFWLENBQUEsQ0FEeEIsQ0FBQTtBQUFBLEVBRUEsUUFBUSxDQUFDLE1BQVQsR0FBb0IsQ0FBQSxDQUFFLDRCQUFGLENBQStCLENBQUMsR0FBaEMsQ0FBQSxDQUZwQixDQUFBO0FBQUEsRUFHQSxRQUFRLENBQUMsR0FBVCxHQUF3QixDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsR0FBVixDQUFBLENBSHhCLENBQUE7QUFBQSxFQUlBLFFBQVEsQ0FBQyxNQUFULEdBQW9CLENBQUEsQ0FBRSxTQUFGLENBQVksQ0FBQyxHQUFiLENBQUEsQ0FKcEIsQ0FBQTtBQUFBLEVBS0EsUUFBUSxDQUFDLFVBQVQsR0FBMEIsQ0FBQSxDQUFFLDRCQUFGLENBQStCLENBQUMsR0FBaEMsQ0FBQSxDQUwxQixDQUFBO0FBQUEsRUFNQSxRQUFRLENBQUMsV0FBVCxHQUEwQixDQUFBLENBQUUsNkJBQUYsQ0FBZ0MsQ0FBQyxHQUFqQyxDQUFBLENBTjFCLENBQUE7QUFBQSxFQU9BLFFBQVEsQ0FBQyxNQUFULEdBQTBCLENBQUEsQ0FBRSxTQUFGLENBQVksQ0FBQyxHQUFiLENBQUEsQ0FQMUIsQ0FBQTtBQUFBLEVBUUEsUUFBUSxDQUFDLElBQVQsR0FBd0IsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLEdBQVgsQ0FBQSxDQVJ4QixDQUFBO0FBQUEsRUFTQSxRQUFRLENBQUMsSUFBVCxHQUF3QixDQUFBLENBQUUsT0FBRixDQUFVLENBQUMsR0FBWCxDQUFBLENBVHhCLENBQUE7QUFBQSxFQVVBLFFBQVEsQ0FBQyxZQUFULEdBQXdCLENBQUEsQ0FBRSxnQkFBRixDQUFtQixDQUFDLEdBQXBCLENBQUEsQ0FWeEIsQ0FBQTtBQUFBLEVBV0EsUUFBUSxDQUFDLE9BQVQsR0FBcUIsT0FYckIsQ0FBQTtTQWNBLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVCxFQUFrQixRQUFsQixFQWZnQjtBQUFBLENBaEVqQixDQUFBOztBQUFBLENBb0ZBLENBQUUsU0FBQSxHQUFBO0FBRUQsRUFBQSxNQUFBLEdBQVMsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVCxDQUFBO0FBQUEsRUFFQSxDQUFBLENBQUUsU0FBRixDQUFZLENBQUMsRUFBYixDQUFnQixPQUFoQixFQUF5QixNQUF6QixDQUZBLENBQUE7QUFBQSxFQUlBLGFBQWEsQ0FBQyxTQUFkLEdBQTBCLFNBSjFCLENBQUE7QUFBQSxFQUtBLGFBQWEsQ0FBQyxjQUFkLEdBQStCLGNBTC9CLENBQUE7QUFBQSxFQU1BLGFBQWEsQ0FBQyxVQUFkLEdBQTJCLFVBTjNCLENBQUE7QUFBQSxFQU9BLGFBQWEsQ0FBQyxpQkFBZCxHQUFrQyxpQkFQbEMsQ0FBQTtBQUFBLEVBUUEsYUFBYSxDQUFDLGlCQUFkLEdBQWtDLGlCQVJsQyxDQUFBO0FBQUEsRUFTQSxhQUFhLENBQUMsUUFBZCxHQUF5QixRQVR6QixDQUFBO0FBQUEsRUFXQSxlQUFBLENBQUEsQ0FYQSxDQUFBO1NBYUEsQ0FBQSxDQUFFLE9BQUYsQ0FBVSxDQUFDLEVBQVgsQ0FBYyxRQUFkLEVBQXdCLGNBQXhCLEVBZkM7QUFBQSxDQUFGLENBcEZBLENBQUE7O0FBQUEsTUFzR0EsR0FBUyxTQUFBLEdBQUE7QUFFUixFQUFBLGNBQUEsQ0FBQSxDQUFBLENBQUE7U0FFQSxJQUFJLENBQUMsTUFBTCxDQUFlLFFBQVEsQ0FBQyxHQUFWLEdBQWMsR0FBZCxHQUFpQixRQUFRLENBQUMsSUFBeEMsRUFBZ0QsU0FBQyxHQUFELEdBQUE7QUFFL0MsUUFBQSx1QkFBQTtBQUFBLElBQUEsSUFBRyxHQUFIO0FBQ0MsTUFBQSxLQUFBLENBQU0sdUNBQU4sQ0FBQSxDQUFBO0FBQ0EsWUFBQSxDQUZEO0tBQUE7QUFBQSxJQUtBLEtBQUEsR0FBUSxLQUFLLENBQUMsTUFMZCxDQUFBO0FBQUEsSUFPQSxDQUFBLENBQUUsUUFBRixDQUFXLENBQUMsTUFBWixDQUFtQixlQUFBLEdBQ0gsS0FERyxHQUNHLCtDQURILEdBRTJCLFFBQVEsQ0FBQyxJQUZwQyxHQUV5QyxvREFGekMsR0FHMkIsS0FIM0IsR0FHaUMsNkJBSGpDLEdBSU4sUUFBUSxDQUFDLE1BSkgsR0FJVSx3QkFKVixHQUtGLEtBTEUsR0FLSSx5R0FMdkIsQ0FQQSxDQUFBO0FBQUEsSUFnQkEsVUFBQSxHQUFpQixJQUFBLGFBQUEsQ0FBYyxRQUFRLENBQUMsSUFBdkIsRUFBNkIsQ0FBQSxDQUFFLE9BQUEsR0FBUSxLQUFWLENBQW1CLENBQUEsQ0FBQSxDQUFoRCxDQWhCakIsQ0FBQTtBQUFBLElBaUJBLFVBQVUsQ0FBQyxhQUFYLENBQXlCLFFBQXpCLENBakJBLENBQUE7QUFtQkEsSUFBQSxJQUFHLFFBQVEsQ0FBQyxNQUFULEtBQW1CLFdBQXRCO0FBQ0MsTUFBQSxVQUFVLENBQUMsbUJBQVgsQ0FBK0IsUUFBUSxDQUFDLEdBQXhDLENBQUEsQ0FERDtLQUFBLE1BR0ssSUFBRyxRQUFRLENBQUMsTUFBVCxLQUFtQixRQUF0QjtBQUNKLE1BQUEsSUFBQSxHQUFPLENBQUMsQ0FBQyxTQUFGLENBQWEsQ0FBQSxDQUFFLFNBQUYsQ0FBWSxDQUFDLEdBQWIsQ0FBQSxDQUFiLENBQVAsQ0FBQTtBQUFBLE1BQ0EsVUFBVSxDQUFDLGdCQUFYLENBQTRCLElBQTVCLENBREEsQ0FESTtLQXRCTDtBQUFBLElBMEJBLENBQUEsQ0FBRSxRQUFBLEdBQVMsS0FBVCxHQUFlLFVBQWpCLENBQTJCLENBQUMsRUFBNUIsQ0FBK0IsT0FBL0IsRUFBd0MsU0FBQSxHQUFBO0FBQ3ZDLE1BQUEsS0FBQSxHQUFRLENBQUEsQ0FBRSxJQUFGLENBQUksQ0FBQyxJQUFMLENBQVUsWUFBVixDQUFSLENBQUE7YUFDQSxLQUFNLENBQUEsS0FBQSxDQUFNLENBQUMsTUFBYixDQUFBLEVBRnVDO0lBQUEsQ0FBeEMsQ0ExQkEsQ0FBQTtXQStCQSxLQUFLLENBQUMsSUFBTixDQUFZLFVBQVosRUFqQytDO0VBQUEsQ0FBaEQsRUFKUTtBQUFBLENBdEdULENBQUE7O0FBQUEsUUE4SUEsR0FBVyxTQUFBLEdBQUE7QUFDVixNQUFBLGlCQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLE9BQU4sQ0FBZSxJQUFmLENBQVIsQ0FBQTtBQUFBLEVBQ0EsSUFBQSxHQUFPLENBQUEsQ0FBRSxRQUFBLEdBQVMsS0FBWCxDQURQLENBQUE7QUFBQSxFQUdBLElBQUEsR0FBTyxDQUFBLENBQUUsNkJBQUYsQ0FIUCxDQUFBO0FBQUEsRUFLQSxJQUFJLENBQUMsRUFBTCxDQUFRLE9BQVIsRUFBaUIsU0FBQSxHQUFBO1dBQ2hCLElBQUksQ0FBQyxNQUFMLENBQUEsRUFEZ0I7RUFBQSxDQUFqQixDQUxBLENBQUE7U0FRQSxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FDQyxDQUFDLE1BREYsQ0FDUyxjQURULENBRUMsQ0FBQyxNQUZGLENBRVUsSUFGVixFQVRVO0FBQUEsQ0E5SVgsQ0FBQTs7QUFBQSxpQkE0SkEsR0FBb0IsU0FBQSxHQUFBO0FBQ25CLE1BQUEsd0JBQUE7QUFBQSxFQUFBLEtBQUEsR0FBUSxLQUFLLENBQUMsT0FBTixDQUFlLElBQWYsQ0FBUixDQUFBO0FBQUEsRUFDQSxJQUFBLEdBQU8sQ0FBQSxDQUFFLFFBQUEsR0FBUyxLQUFYLENBRFAsQ0FBQTtBQUFBLEVBRUEsRUFBQSxHQUFLLElBQUksQ0FBQyxRQUFMLENBQWMsR0FBZCxDQUZMLENBQUE7QUFBQSxFQUlBLE9BQUEsR0FBVSxDQUFBLENBQUUsMENBQUYsQ0FKVixDQUFBO0FBQUEsRUFNQSxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBa0IsQ0FBQyxNQUFuQixDQUEyQixPQUEzQixDQU5BLENBQUE7U0FTQSxPQUFPLENBQUMsRUFBUixDQUFXLE9BQVgsRUFBb0IsQ0FBQSxTQUFBLEtBQUEsR0FBQTtXQUFBLFNBQUEsR0FBQTtBQUNuQixNQUFBLElBQUksQ0FBQyxRQUFMLENBQWMsVUFBZCxDQUF5QixDQUFDLE1BQTFCLENBQUEsQ0FBQSxDQUFBO2FBQ0EsS0FBQyxDQUFBLE9BQUQsQ0FBUyxRQUFULEVBRm1CO0lBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEIsRUFWbUI7QUFBQSxDQTVKcEIsQ0FBQTs7QUFBQSxpQkEyS0EsR0FBb0IsU0FBQSxHQUFBO0FBQ25CLE1BQUEsOERBQUE7QUFBQSxFQUFBLEtBQUEsR0FBUSxLQUFLLENBQUMsT0FBTixDQUFlLElBQWYsQ0FBUixDQUFBO0FBQUEsRUFDQSxJQUFBLEdBQU8sQ0FBQSxDQUFFLFFBQUEsR0FBUyxLQUFYLENBRFAsQ0FBQTtBQUFBLEVBRUEsRUFBQSxHQUFLLElBQUksQ0FBQyxRQUFMLENBQWMsR0FBZCxDQUZMLENBQUE7QUFBQSxFQUlBLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBSSxDQUFDLElBQUwsQ0FBVSxhQUFWLENBQXdCLENBQUMsSUFBekIsQ0FBOEIsVUFBOUIsRUFBMEMsSUFBMUMsQ0FBK0MsQ0FBQyxHQUFoRCxDQUFBLENBSlIsQ0FBQTtBQUFBLEVBTUEsR0FBQSxHQUFTLFFBQVEsQ0FBQyxHQUFWLEdBQWMsR0FBZCxHQUFpQixJQUFDLENBQUEsSUFOMUIsQ0FBQTtBQVFBLEVBQUEsSUFBRyxJQUFDLENBQUEsTUFBRCxLQUFXLG1CQUFtQixDQUFDLFNBQWxDO0FBQ0MsSUFBQSxTQUFBLEdBQVksMEJBQUEsR0FFRixJQUFDLENBQUEsU0FGQyxHQUVTLFVBRlQsR0FHRCxJQUFDLENBQUEsSUFIQSxHQUdLLGtCQUhMLEdBSU8sSUFBQyxDQUFBLFlBSnBCLENBREQ7R0FBQSxNQU9LLElBQUcsSUFBQyxDQUFBLE1BQUQsR0FBVSxtQkFBbUIsQ0FBQyxNQUFqQztBQUNKLElBQUEsU0FBQSxHQUFZLGdCQUFaLENBREk7R0FmTDtBQUFBLEVBa0JBLFVBQUEsR0FBYSxJQUFJLENBQUMsU0FBTDs7QUFBaUI7QUFBQTtTQUFBLHFDQUFBO29CQUFBO0FBQUEsbUJBQUEsSUFBSSxDQUFDLEdBQUwsQ0FBQTtBQUFBOztlQUFqQixDQWxCYixDQUFBO0FBQUEsRUFtQkEsV0FBQSxHQUFjLElBQUksQ0FBQyxTQUFMLENBQWdCLElBQUMsQ0FBQSxRQUFqQixDQW5CZCxDQUFBO0FBQUEsRUFxQkEsSUFBSSxDQUFDLFFBQUwsQ0FBYyxTQUFkLEVBQTRCLEdBQUQsR0FBSyxjQUFoQyxFQUErQyxDQUFBLFNBQUEsS0FBQSxHQUFBO1dBQUEsU0FBQyxHQUFELEdBQUE7YUFDOUMsRUFBRSxDQUFDLE1BQUgsQ0FBVSxrQkFBVixFQUQ4QztJQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQS9DLENBckJBLENBQUE7QUFBQSxFQXdCQSxJQUFJLENBQUMsUUFBTCxDQUFjLFVBQWQsRUFBNkIsR0FBRCxHQUFLLGlCQUFqQyxFQUFtRCxDQUFBLFNBQUEsS0FBQSxHQUFBO1dBQUEsU0FBQyxHQUFELEdBQUE7YUFDbEQsRUFBRSxDQUFDLE1BQUgsQ0FBVSx5QkFBVixFQURrRDtJQUFBLEVBQUE7RUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQW5ELENBeEJBLENBQUE7U0EyQkEsSUFBSSxDQUFDLFFBQUwsQ0FBYyxXQUFkLEVBQThCLEdBQUQsR0FBSyxrQkFBbEMsRUFBcUQsQ0FBQSxTQUFBLEtBQUEsR0FBQTtXQUFBLFNBQUMsR0FBRCxHQUFBO2FBQ3BELEVBQUUsQ0FBQyxNQUFILENBQVUsMEJBQVYsRUFEb0Q7SUFBQSxFQUFBO0VBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyRCxFQTVCbUI7QUFBQSxDQTNLcEIsQ0FBQTs7QUFBQSxVQTJNQSxHQUFhLFNBQUMsTUFBRCxFQUFTLEtBQVQsR0FBQTtBQUNaLE1BQUEsV0FBQTtBQUFBLEVBQUEsS0FBQSxHQUFRLEtBQUssQ0FBQyxPQUFOLENBQWUsSUFBZixDQUFSLENBQUE7QUFBQSxFQUNBLElBQUEsR0FBTyxDQUFBLENBQUUsUUFBQSxHQUFTLEtBQVgsQ0FEUCxDQUFBO0FBR0EsRUFBQSxJQUFHLE1BQUEsR0FBUyxDQUFaO0FBQ0MsSUFBQSxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBa0IsQ0FBQyxNQUFuQixDQUEyQixDQUFBLENBQUUsdUJBQUYsQ0FBM0IsQ0FBQSxDQUREO0dBSEE7U0FNQSxJQUFJLENBQUMsSUFBTCxDQUFVLFVBQVYsQ0FBcUIsQ0FBQyxJQUF0QixDQUFBLENBQ0MsQ0FBQyxJQURGLENBRUU7QUFBQSxJQUFBLEtBQUEsRUFBTyxNQUFQO0FBQUEsSUFDQSxHQUFBLEVBQUssS0FETDtBQUFBLElBRUEsWUFBQSxFQUFlLEdBQUEsR0FBSSxNQUFKLEdBQVcsR0FBWCxHQUFjLEtBQWQsR0FBb0IsR0FGbkM7R0FGRixFQVBZO0FBQUEsQ0EzTWIsQ0FBQTs7QUFBQSxTQXlOQSxHQUFZLFNBQUMsT0FBRCxHQUFBO0FBQ1gsTUFBQSxXQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLE9BQU4sQ0FBZSxJQUFmLENBQVIsQ0FBQTtBQUFBLEVBQ0EsSUFBQSxHQUFPLENBQUEsQ0FBRSxRQUFBLEdBQVMsS0FBWCxDQURQLENBQUE7U0FHQSxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBa0IsQ0FBQyxNQUFuQixDQUEyQixPQUFBLEdBQVUsTUFBckMsRUFKVztBQUFBLENBek5aLENBQUE7O0FBQUEsY0FnT0EsR0FBaUIsU0FBQyxHQUFELEVBQU0sSUFBTixFQUFZLElBQVosR0FBQTtBQUNoQixNQUFBLDZCQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLE9BQU4sQ0FBZSxJQUFmLENBQVIsQ0FBQTtBQUFBLEVBQ0EsSUFBQSxHQUFPLENBQUEsQ0FBRSxRQUFBLEdBQVMsS0FBWCxDQURQLENBQUE7QUFBQSxFQUdBLE1BQU0sQ0FBQyxLQUFQLEdBQWUsSUFBSSxDQUFDLEtBSHBCLENBQUE7QUFBQSxFQUlBLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLElBQUksQ0FBQyxNQUFMLEdBQWMsT0FKOUIsQ0FBQTtBQUFBLEVBTUEsR0FBQSxHQUFNLE1BQU0sQ0FBQyxVQUFQLENBQWtCLElBQWxCLENBTk4sQ0FBQTtBQUFBLEVBT0EsR0FBRyxDQUFDLFNBQUosR0FBZ0IsU0FQaEIsQ0FBQTtBQUFBLEVBUUEsR0FBRyxDQUFDLFFBQUosQ0FBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLE1BQU0sQ0FBQyxLQUExQixFQUFpQyxNQUFNLENBQUMsTUFBeEMsQ0FSQSxDQUFBO0FBQUEsRUFTQSxHQUFHLENBQUMsU0FBSixDQUFjLElBQWQsRUFBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsQ0FUQSxDQUFBO0FBQUEsRUFXQSxHQUFBLEdBQ0M7QUFBQSxJQUFBLEdBQUEsRUFBSyxJQUFDLENBQUEsR0FBTjtBQUFBLElBQ0EsRUFBQSxFQUFJLElBQUksQ0FBQyxFQURUO0FBQUEsSUFFQSxPQUFBLEVBQVMsSUFBSSxDQUFDLE9BRmQ7QUFBQSxJQUdBLFFBQUEsRUFBVSxJQUFJLENBQUMsUUFIZjtBQUFBLElBSUEsS0FBQSxFQUFPLElBQUksQ0FBQyxLQUpaO0FBQUEsSUFLQSxJQUFBLEVBQU0sSUFBSSxDQUFDLElBTFg7QUFBQSxJQU1BLE1BQUEsRUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVosQ0FBQSxDQU5SO0dBWkQsQ0FBQTtBQUFBLEVBb0JBLGdCQUFnQixDQUFDLElBQWpCLENBQXNCLE1BQXRCLEVBQThCLEdBQTlCLEVBQW1DLENBQW5DLEVBQXNDLElBQUksQ0FBQyxNQUFMLEdBQWMsRUFBcEQsRUFBd0QsTUFBTSxDQUFDLEtBQS9ELEVBQXNFLFVBQUEsR0FBYSxFQUFuRixDQXBCQSxDQUFBO0FBQUEsRUFzQkEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxNQUFaLENBdEJBLENBQUE7QUFBQSxFQXlCQSxNQUFBLEdBQ0M7QUFBQSxJQUFBLElBQUEsRUFBTSxJQUFDLENBQUEsSUFBUDtBQUFBLElBQ0EsU0FBQSxFQUFXLFFBQVEsQ0FBQyxHQURwQjtBQUFBLElBRUEsTUFBQSxFQUFRLEdBRlI7QUFBQSxJQUdBLEtBQUEsRUFBTyxNQUFNLENBQUMsU0FBUCxDQUFpQixXQUFqQixDQUhQO0dBMUJELENBQUE7U0ErQkEsQ0FBQyxDQUFDLElBQUYsQ0FDQztBQUFBLElBQUEsSUFBQSxFQUFNLE1BQU47QUFBQSxJQUNBLEdBQUEsRUFBSyxZQURMO0FBQUEsSUFFQSxJQUFBLEVBQU0sTUFGTjtBQUFBLElBR0EsT0FBQSxFQUFTLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLElBQUQsR0FBQTtBQUNSLFlBQUEsTUFBQTtBQUFBLFFBQUEsTUFBQSxHQUFTLENBQUMsQ0FBQyxTQUFGLENBQWEsSUFBYixDQUFULENBQUE7QUFDQSxRQUFBLElBQUcsTUFBTSxDQUFDLE1BQVAsS0FBaUIsU0FBcEI7QUFDQyxVQUFBLEtBQUMsQ0FBQSxNQUFELENBQUEsQ0FBQSxDQUFBO2lCQUNBLElBQUksQ0FBQyxRQUFMLENBQWMsR0FBZCxDQUFrQixDQUFDLE1BQW5CLENBQTBCLGtCQUFBLEdBQXFCLE1BQS9DLEVBRkQ7U0FGUTtNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBSFQ7R0FERCxFQWhDZ0I7QUFBQSxDQWhPakIsQ0FBQSIsImZpbGUiOiJnc3YtZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBjb25zdGFudHNcbk1BWF9QVFMgPSAxMDBcbkRJU1RfQkVUV0VFTl9QVFMgPSA1XG5cbkFQSV9LRVkgPSBcIkFJemFTeUJRMmR6RGZ5RjhZMER3ZS1RNkp6eDRfRzYyQU5yVG90UVwiXG5WRVJTSU9OID0gJzAuMydcblxuVEFHX0hFSUdIVCA9IDQwLjBcblBST1hZX0hFSUdIVCA9IDgzMi4wXG5WX1NDQUxFID0gKFRBR19IRUlHSFQgKyBQUk9YWV9IRUlHSFQpIC8gUFJPWFlfSEVJR0hUXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgdmFyaWFibGVzXG5sb2FkZXIgPSBudWxsXG5kaXJTZXJ2aWNlID0gbmV3IGdvb2dsZS5tYXBzLkRpcmVjdGlvbnNTZXJ2aWNlKHt9KVxuXG4jIGVhY2ggcmVzXG5yZXMgPSBudWxsXG5cbnJhd1B0cyA9IFtdXG5wYW5vSWRzID0gW11cbnRvdGFsRGlzdCA9IDBcblxuY2FudmFzID0gbnVsbFxuXG50YXNrcyA9IFtdXG5cbnNldHRpbmdzID0ge31cblxuc3RvcmFnZSA9IGxvY2FsU3RvcmFnZVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIGluaXRcblxucmVzdG9yZVNldHRpbmdzID0gLT5cblx0JGVsbSA9ICQoJ25hdicpXG5cblx0aWYgc3RvcmFnZS52ZXJzaW9uID09IFZFUlNJT05cblx0XHQjIHJlc3RvcmUgYWxsIHNldHRpbmdzXG5cdFx0JCgnI25hbWUnKS52YWwoIHN0b3JhZ2UubmFtZSApXG5cdFx0JCgnI2RpcicpLnZhbCggc3RvcmFnZS5kaXIgKVxuXHRcdCQoXCJpbnB1dFt2YWx1ZT0je3N0b3JhZ2UubWV0aG9kfV1cIikucHJvcCgnY2hlY2tlZCcsIHRydWUpXG5cdFx0JCgnI3VybCcpLnZhbCggc3RvcmFnZS51cmwgKVxuXHRcdCQoJyNwYW5vaWQnKS52YWwoIHN0b3JhZ2UucGFub2lkIClcblx0XHQkKFwiaW5wdXRbdmFsdWU9I3tzdG9yYWdlLnRyYXZlbE1vZGV9XVwiKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSlcblx0XHQkKFwiaW5wdXRbdmFsdWU9I3tzdG9yYWdlLmhlYWRpbmdNb2RlfV1cIikucHJvcCgnY2hlY2tlZCcsIHRydWUpXG5cdFx0JCgnI2xvb2thdCcpLnZhbCggc3RvcmFnZS5sb29rYXQgKVxuXHRcdCQoJyN6b29tJykudmFsKCBzdG9yYWdlLnpvb20gKVxuXHRcdCQoJyNzdGVwJykudmFsKCBzdG9yYWdlLnN0ZXAgKVxuXHRcdCQoJyNzZWFyY2gtcmFkaXVzJykudmFsKCBzdG9yYWdlLnNlYXJjaFJhZGl1cyApXG5cblx0JGVsbS5maW5kKCdbZGF0YS1wYXJlbnRdJykuZWFjaCAtPlxuXG5cdFx0JHRoaXMgPSAkKEApXG5cdFx0JHBhcmVudCA9ICQoICR0aGlzLmF0dHIoJ2RhdGEtcGFyZW50JykgKVxuXHRcdG5hbWUgPSAkcGFyZW50LmF0dHIoJ25hbWUnKVxuXG5cdFx0JChcIltuYW1lPSN7bmFtZX1cIikub24gJ2NoYW5nZScsID0+XG5cdFx0XHQkKEApLnRvZ2dsZSggJHBhcmVudC5wcm9wKCdjaGVja2VkJykgKVxuXHRcdC50cmlnZ2VyKCdjaGFuZ2UnKVxuXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgZnVuY3Rpb25zXG5cbnVwZGF0ZVNldHRpbmdzID0gLT5cblx0c2V0dGluZ3MubmFtZSBcdCAgICAgICAgPSAkKCcjbmFtZScpLnZhbCgpXG5cdHNldHRpbmdzLmRpciBcdCAgICAgICAgPSAkKCcjZGlyJykudmFsKClcblx0c2V0dGluZ3MubWV0aG9kXHRcdFx0PSAkKCdpbnB1dFtuYW1lPW1ldGhvZF06Y2hlY2tlZCcpLnZhbCgpXG5cdHNldHRpbmdzLnVybCBcdCAgICAgICAgPSAkKCcjdXJsJykudmFsKClcblx0c2V0dGluZ3MucGFub2lkIFx0XHQ9ICQoJyNwYW5vaWQnKS52YWwoKVxuXHRzZXR0aW5ncy50cmF2ZWxNb2RlICAgICA9ICQoJ2lucHV0W25hbWU9dHJhdmVsXTpjaGVja2VkJykudmFsKClcblx0c2V0dGluZ3MuaGVhZGluZ01vZGUgICAgPSAkKCdpbnB1dFtuYW1lPWhlYWRpbmddOmNoZWNrZWQnKS52YWwoKVxuXHRzZXR0aW5ncy5sb29rYXQgICAgICAgICA9ICQoJyNsb29rYXQnKS52YWwoKVxuXHRzZXR0aW5ncy56b29tXHQgICAgICAgID0gJCgnI3pvb20nKS52YWwoKVxuXHRzZXR0aW5ncy5zdGVwXHQgICAgICAgID0gJCgnI3N0ZXAnKS52YWwoKVxuXHRzZXR0aW5ncy5zZWFyY2hSYWRpdXNcdD0gJCgnI3NlYXJjaC1yYWRpdXMnKS52YWwoKVxuXHRzZXR0aW5ncy52ZXJzaW9uIFx0XHQ9IFZFUlNJT05cblxuXHQjIHNhdmUgdG8gd2ViIHN0b3JhZ2Vcblx0JC5leHRlbmQoc3RvcmFnZSwgc2V0dGluZ3MpXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgb24gbG9hZFxuXG4kIC0+XG5cblx0Y2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcblxuXHQkKCcjY3JlYXRlJykub24gJ2NsaWNrJywgY3JlYXRlXG5cblx0R1NWSHlwZXJsYXBzZS5vbk1lc3NhZ2UgPSBvbk1lc3NhZ2Vcblx0R1NWSHlwZXJsYXBzZS5vblBhbm9yYW1hTG9hZCA9IG9uUGFub3JhbWFMb2FkXG5cdEdTVkh5cGVybGFwc2Uub25Qcm9ncmVzcyA9IG9uUHJvZ3Jlc3Ncblx0R1NWSHlwZXJsYXBzZS5vbkFuYWx5emVDb21wbGV0ZSA9IG9uQW5hbHl6ZUNvbXBsZXRlXG5cdEdTVkh5cGVybGFwc2Uub25Db21wb3NlQ29tcGxldGUgPSBvbkNvbXBvc2VDb21wbGV0ZVxuXHRHU1ZIeXBlcmxhcHNlLm9uQ2FuY2VsID0gb25DYW5jZWxcblxuXHRyZXN0b3JlU2V0dGluZ3MoKVxuXG5cdCQoJ2lucHV0Jykub24gJ2NoYW5nZScsIHVwZGF0ZVNldHRpbmdzXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmNyZWF0ZSA9IC0+XG5cblx0dXBkYXRlU2V0dGluZ3MoKVxuXG5cdEZJTEUuZXhpc3RzIFwiI3tzZXR0aW5ncy5kaXJ9LyN7c2V0dGluZ3MubmFtZX1cIiwgKGZsZykgLT5cblxuXHRcdGlmIGZsZ1xuXHRcdFx0YWxlcnQgJ2Rlc3RpbmF0aW9uIGZvbGRlciBpcyBhbHJlYWR5IGV4aXN0cy4nXG5cdFx0XHRyZXR1cm5cblx0XHRcblxuXHRcdGluZGV4ID0gdGFza3MubGVuZ3RoXG5cblx0XHQkKCcudGFza3MnKS5hcHBlbmQoXCJcblx0XHRcdDxsaSBpZD0ndGFzay0je2luZGV4fSc+XG5cdFx0XHRcdDxoMT48aW5wdXQgdHlwZT0ndGV4dCcgbmFtZT0nbmFtZScgdmFsdWU9JyN7c2V0dGluZ3MubmFtZX0nPjwvaDE+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9J2NhbmNlbCBhY3Rpb24nIGRhdGEtaW5kZXg9JyN7aW5kZXh9Jz5DYW5jZWw8L2J1dHRvbj5cblx0XHRcdFx0PHA+bW9kZTogI3tzZXR0aW5ncy5tZXRob2R9PGJyPjwvcD5cblx0XHRcdFx0PGRpdiBpZD0nbWFwLSN7aW5kZXh9JyBzdHlsZT0nd2lkdGg6IDQ4JTsgaGVpZ2h0OiAwOyBwYWRkaW5nLXRvcDogMjYlOyBiYWNrZ3JvdW5kOmdyYXk7IGRpc3BsYXk6IGlubGluZS1ibG9jazsnPjwvZGl2PlxuXHRcdFx0PC9saT5cblx0XHRcIilcblxuXHRcdGh5cGVybGFwc2UgPSBuZXcgR1NWSHlwZXJsYXBzZShzZXR0aW5ncy5uYW1lLCAkKFwiI21hcC0je2luZGV4fVwiKVswXSlcblx0XHRoeXBlcmxhcHNlLnNldFBhcmFtZXRlcnMoc2V0dGluZ3MpXG5cblx0XHRpZiBzZXR0aW5ncy5tZXRob2QgPT0gJ2RpcmVjdGlvbidcblx0XHRcdGh5cGVybGFwc2UuY3JlYXRlRnJvbURpcmVjdGlvbihzZXR0aW5ncy51cmwpXG5cblx0XHRlbHNlIGlmIHNldHRpbmdzLm1ldGhvZCA9PSAncGFub2lkJ1xuXHRcdFx0bGlzdCA9ICQucGFyc2VKU09OKCAkKCcjcGFub2lkJykudmFsKCkgKVxuXHRcdFx0aHlwZXJsYXBzZS5jcmVhdGVGcm9tUGFub0lkKGxpc3QpXG5cblx0XHQkKFwiI3Rhc2stI3tpbmRleH0gLmNhbmNlbFwiKS5vbiAnY2xpY2snLCAtPlxuXHRcdFx0aW5kZXggPSAkKEApLmF0dHIoJ2RhdGEtaW5kZXgnKVxuXHRcdFx0dGFza3NbaW5kZXhdLmNhbmNlbCgpXG5cblxuXHRcdHRhc2tzLnB1c2goIGh5cGVybGFwc2UgKVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5vbkNhbmNlbCA9IC0+XG5cdGluZGV4ID0gdGFza3MuaW5kZXhPZiggQCApXG5cdCRlbG0gPSAkKFwiI3Rhc2stI3tpbmRleH1cIilcblxuXHQkYnRuID0gJCgnPGJ1dHRvbj5kZWxldGU8L2J1dHRvbj48YnI+Jyk7XG5cblx0JGJ0bi5vbiAnY2xpY2snLCAtPlxuXHRcdCRlbG0ucmVtb3ZlKCk7XG5cblx0JGVsbS5jaGlsZHJlbigncCcpXG5cdFx0LmFwcGVuZCgnY2FuY2VsZWQ8YnI+Jylcblx0XHQuYXBwZW5kKCAkYnRuICk7XG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbm9uQW5hbHl6ZUNvbXBsZXRlID0gLT5cblx0aW5kZXggPSB0YXNrcy5pbmRleE9mKCBAIClcblx0JGVsbSA9ICQoXCIjdGFzay0je2luZGV4fVwiKVxuXHQkcCA9ICRlbG0uY2hpbGRyZW4oJ3AnKVxuXG5cdCRidG5HZW4gPSAkKCc8YnV0dG9uPmdlbmVyYXRlIGh5cGVybGFwc2U8L2J1dHRvbj48YnI+Jyk7XG5cblx0JGVsbS5jaGlsZHJlbigncCcpLmFwcGVuZCggJGJ0bkdlbiApXG5cblx0IyBvbiBjbGljayBcImNvbXBvc2VcIiBidXR0b25cblx0JGJ0bkdlbi5vbiAnY2xpY2snLCA9PlxuXHRcdCRlbG0uY2hpbGRyZW4oJy5jb250cm9sJykucmVtb3ZlKClcblx0XHRAY29tcG9zZShzZXR0aW5ncylcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxub25Db21wb3NlQ29tcGxldGUgPSAtPlxuXHRpbmRleCA9IHRhc2tzLmluZGV4T2YoIEAgKVxuXHQkZWxtID0gJChcIiN0YXNrLSN7aW5kZXh9XCIpXG5cdCRwID0gJGVsbS5jaGlsZHJlbigncCcpXG5cblx0QG5hbWUgPSAkZWxtLmZpbmQoJ1tuYW1lPW5hbWVdJykucHJvcCgnZGlzYWJsZWQnLCB0cnVlKS52YWwoKVxuXG5cdGRpciA9IFwiI3tzZXR0aW5ncy5kaXJ9LyN7QG5hbWV9XCJcblxuXHRpZiBAbWV0aG9kID09IEdTVkh5cGVybGFwc2VNZXRob2QuRElSRUNUSU9OXG5cdFx0dHh0UmVwb3J0ID0gXCJcIlwiXG5cdFx0XHRcdFx0bWV0aG9kOiBkaXJlY3Rpb25cblx0XHRcdFx0XHR1cmw6ICN7QHNvdXJjZVVybH1cblx0XHRcdFx0XHRzdGVwOiAje0BzdGVwfVxuXHRcdFx0XHRcdHNlYXJjaFJhZGl1czogI3tAc2VhcmNoUmFkaXVzfVxuXHRcdFx0XHRcdFwiXCJcIlxuXHRlbHNlIGlmIEBtZXRob2QgPSBHU1ZIeXBlcmxhcHNlTWV0aG9kLlBBTk9JRCBcblx0XHR0eHRSZXBvcnQgPSBcIm1ldGhvZDogcGFub2lkXCJcblxuXHR0eHRQYW5vSWRzID0gSlNPTi5zdHJpbmdpZnkoIChwYW5vLmlkIGZvciBwYW5vIGluIEBwYW5vTGlzdCkgKVxuXHR0eHRQYW5vTGlzdCA9IEpTT04uc3RyaW5naWZ5KCBAcGFub0xpc3QgKVxuXG5cdEZJTEUuc2F2ZVRleHQgdHh0UmVwb3J0LCBcIiN7ZGlyfS9fcmVwb3J0LnR4dFwiLCAocmVzKSA9PlxuXHRcdCRwLmFwcGVuZCgncmVwb3J0IHNhdmVkPGJyPicpXG5cblx0RklMRS5zYXZlVGV4dCB0eHRQYW5vSWRzLCBcIiN7ZGlyfS9fcGFuby1pZHMuanNvblwiLCAocmVzKSA9PlxuXHRcdCRwLmFwcGVuZCgncGFuby1pZHMuanNvbiBzYXZlZDxicj4nKVxuXG5cdEZJTEUuc2F2ZVRleHQgdHh0UGFub0xpc3QsIFwiI3tkaXJ9L19wYW5vLWRhdGEuanNvblwiLCAocmVzKSA9PlxuXHRcdCRwLmFwcGVuZCgncGFuby1kYXRhLmpzb24gc2F2ZWQ8YnI+JylcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxub25Qcm9ncmVzcyA9IChsb2FkZWQsIHRvdGFsKSAtPlxuXHRpbmRleCA9IHRhc2tzLmluZGV4T2YoIEAgKVxuXHQkZWxtID0gJChcIiN0YXNrLSN7aW5kZXh9XCIpXG5cblx0aWYgbG9hZGVkIDwgMVxuXHRcdCRlbG0uY2hpbGRyZW4oJ3AnKS5hcHBlbmQoICQoJzxwcm9ncmVzcz48L3Byb2dyZXNzPicpKVxuXG5cdCRlbG0uZmluZChcInByb2dyZXNzXCIpLmxhc3QoKVxuXHRcdC5hdHRyXG5cdFx0XHR2YWx1ZTogbG9hZGVkXG5cdFx0XHRtYXg6IHRvdGFsXG5cdFx0XHQnZGF0YS1sYWJlbCc6ICBcIlsje2xvYWRlZH0vI3t0b3RhbH1dXCJcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxub25NZXNzYWdlID0gKG1lc3NhZ2UpIC0+XG5cdGluZGV4ID0gdGFza3MuaW5kZXhPZiggQCApXG5cdCRlbG0gPSAkKFwiI3Rhc2stI3tpbmRleH1cIilcblxuXHQkZWxtLmNoaWxkcmVuKCdwJykuYXBwZW5kKCBtZXNzYWdlICsgXCI8YnI+XCIgKVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5vblBhbm9yYW1hTG9hZCA9IChpZHgsIHBhbm8sIGRhdGEpIC0+XG5cdGluZGV4ID0gdGFza3MuaW5kZXhPZiggQCApXG5cdCRlbG0gPSAkKFwiI3Rhc2stI3tpbmRleH1cIilcblxuXHRjYW52YXMud2lkdGggPSBwYW5vLndpZHRoXG5cdGNhbnZhcy5oZWlnaHQgPSBwYW5vLmhlaWdodCAqIFZfU0NBTEVcblxuXHRjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXHRjdHguZmlsbFN0eWxlID0gJyMwMDAwMDAnXG5cdGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cdGN0eC5kcmF3SW1hZ2UocGFubywgMCwgMClcblxuXHR0YWcgPVxuXHRcdHVpZDogQHVpZFxuXHRcdGlkOiBkYXRhLmlkXG5cdFx0aGVhZGluZzogZGF0YS5oZWFkaW5nXG5cdFx0cm90YXRpb246IGRhdGEucm90YXRpb25cblx0XHRwaXRjaDogZGF0YS5waXRjaFxuXHRcdGRhdGU6IGRhdGEuZGF0ZVxuXHRcdGxhdExuZzogZGF0YS5sYXRMbmcudG9TdHJpbmcoKVxuXG5cdENhbnZhc01hdHJpeENvZGUuZHJhdyhjYW52YXMsIHRhZywgMCwgcGFuby5oZWlnaHQgKyAxMCwgY2FudmFzLndpZHRoLCBUQUdfSEVJR0hUIC0gMTApXG5cblx0JGVsbS5hcHBlbmQoY2FudmFzKVxuXG5cdCMgc2F2ZSBpbWFnZVxuXHRwYXJhbXMgPVxuXHRcdG5hbWU6IEBuYW1lXG5cdFx0ZGlyZWN0b3J5OiBzZXR0aW5ncy5kaXJcblx0XHRudW1iZXI6IGlkeFxuXHRcdGltYWdlOiBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKVxuXG5cdCQuYWpheCBcblx0XHR0eXBlOiBcIlBPU1RcIlxuXHRcdHVybDogJy4vc2F2ZS5waHAnXG5cdFx0ZGF0YTogcGFyYW1zXG5cdFx0c3VjY2VzczogKGpzb24pID0+XG5cdFx0XHRyZXN1bHQgPSAkLnBhcnNlSlNPTigganNvbiApXG5cdFx0XHRpZiByZXN1bHQuc3RhdHVzICE9IFwic3VjY2Vzc1wiXG5cdFx0XHRcdEBjYW5jZWwoKVxuXHRcdFx0XHQkZWxtLmNoaWxkcmVuKCdwJykuYXBwZW5kKFwiYW4gZXJyb3Igb2NjdXJlZFwiICsgXCI8YnI+XCIpXG4iXX0=