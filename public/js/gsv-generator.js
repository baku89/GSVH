var API_KEY, DIST_BETWEEN_PTS, MAX_PTS, VERSION, canvas, create, dirService, loader, onAnalyzeComplete, onCancel, onMessage, onPanoramaLoad, onProgress, panoIds, rawPts, res, restoreSettings, settings, storage, tasks, totalDist, updateSettings;

MAX_PTS = 100;

DIST_BETWEEN_PTS = 5;

API_KEY = "AIzaSyBQ2dzDfyF8Y0Dwe-Q6Jzx4_G62ANrTotQ";

VERSION = '0.3';

loader = null;

dirService = new google.maps.DirectionsService({});

res = null;

rawPts = [];

panoIds = [];

totalDist = 0;

canvas = null;

tasks = [];

settings = {};

storage = localStorage;

restoreSettings = function() {
  var $elm;
  $elm = $('nav');
  if (storage.version === VERSION) {
    $('#name').val(storage.name);
    $('#dir').val(storage.dir);
    $("input[value=" + storage.method + "]").prop('checked', true);
    $('#url').val(storage.url);
    $('#panoid').val(storage.panoid);
    $("input[value=" + storage.travelMode + "]").prop('checked', true);
    $("input[value=" + storage.heading + "]").prop('checked', true);
    $('#lookat').val(storage.lookat);
    $('#zoom').val(storage.zoom);
    $('#step').val(storage.step);
    $('#search-radius').val(storage.searchRadius);
  }
  return $elm.find('[data-parent]').each(function() {
    var $parent, $this, name;
    $this = $(this);
    $parent = $($this.attr('data-parent'));
    name = $parent.attr('name');
    return $("[name=" + name).on('change', (function(_this) {
      return function() {
        return $(_this).toggle($parent.prop('checked'));
      };
    })(this)).trigger('change');
  });
};

updateSettings = function() {
  settings.name = $('#name').val();
  settings.dir = $('#dir').val();
  settings.method = $('input[name=method]:checked').val();
  settings.url = $('#url').val();
  settings.panoid = $('#panoid').val();
  settings.travelMode = $('input[name=travel]:checked').val();
  settings.heading = $('input[name=heading]:checked').val();
  settings.lookat = $('#lookat').val();
  settings.zoom = $('#zoom').val();
  settings.step = $('#step').val();
  settings.searchRadius = $('#search-radius').val();
  settings.version = VERSION;
  return $.extend(storage, settings);
};

$(function() {
  canvas = $('#panorama')[0];
  $('#create').on('click', create);
  GSVHyperlapse.onMessage = onMessage;
  GSVHyperlapse.onPanoramaLoad = onPanoramaLoad;
  GSVHyperlapse.onProgress = onProgress;
  GSVHyperlapse.onAnalyzeComplete = onAnalyzeComplete;
  GSVHyperlapse.onCancel = onCancel;
  restoreSettings();
  return $('input').on('change', updateSettings);
});

create = function() {
  var hyperlapse, index, list;
  updateSettings();
  index = tasks.length;
  $('.tasks').append("<li id='task-" + index + "'> <h1><input type='text' name='name' value='" + settings.name + "'></h1> <button class='cancel action' data-index='" + index + "'>Cancel</button> <p>mode: " + settings.method + "<br></p> <div id='map-" + index + "' style='width: 48%; height: 0; padding-top: 26%; background:gray; display: inline-block;'></div> </li>");
  hyperlapse = new GSVHyperlapse(settings.name, $("#map-" + index)[0]);
  if (settings.method === 'direction') {
    hyperlapse.createFromDirection(settings.url, settings);
  } else if (settings.method === 'panoid') {
    list = $.parseJSON($('#panoid').val());
    hyperlapse.createFromPanoId(list);
  }
  $("#task-" + index + " .cancel").on('click', function() {
    index = $(this).attr('data-index');
    return tasks[index].cancel();
  });
  return tasks.push(hyperlapse);
};

onCancel = function() {
  var $btn, $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $btn = $('<button>delete</button><br>');
  $btn.on('click', function() {
    return $elm.remove();
  });
  return $elm.children('p').append('canceled<br>').append($btn);
};

onAnalyzeComplete = function() {
  var $btnGen, $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  console.log($elm.children("p"));
  $btnGen = $('<button>generate hyperlapse</button><br>');
  $elm.children('p').append($btnGen);
  return $btnGen.on('click', function() {
    $elm.children('.control').remove();
    this.name = $elm.find('[name=name]').prop('disabled', true).val();
    tasks[index].compose(settings.zoom);
    return $elm.children('p').append($btnGen);
  });
};

onProgress = function(loaded, total) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  if (loaded < 1) {
    $elm.children('p').append($('<progress></progress>'));
  }
  return $elm.find("progress").last().attr({
    value: loaded,
    max: total,
    'data-label': "[" + loaded + "/" + total + "]"
  });
};

onMessage = function(message) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  return $elm.children('p').append(message + "<br>");
};

onPanoramaLoad = function(idx, canvas) {
  var $elm, index, params;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $elm.append(canvas);
  FILE.saveFrame(canvas, settings.dir + "/" + this.name + "/" + this.name + "_####.png", function() {});
  params = {
    name: this.name,
    directory: settings.dir,
    number: idx,
    image: canvas.toDataURL('image/png')
  };
  return $.ajax({
    type: "POST",
    url: './save.php',
    data: params,
    success: (function(_this) {
      return function(json) {
        var result;
        result = $.parseJSON(json);
        if (result.status !== "success") {
          _this.cancel();
          return $elm.children('p').append("an error occured" + "<br>");
        }
      };
    })(this)
  });
};

//# sourceMappingURL=data:application/json;base64,