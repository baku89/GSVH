var $ul, apiKey, getSrc, load, loader, locations, makeCard, mapReg, onLoadCSV;

locations = [];

$ul = null;

apiKey = "AIzaSyB7BjJ9FNKGq5HRB9VeA73cJPFCXk6RIa8";

mapReg = /@(.*),(.*),(.*)a,(.*)y,(.*)h,(.*)t\//;

loader = new GSVPANO.PanoLoader();

$(function() {
  $ul = $('#cards');
  return load();
});

load = function() {
  return $.get('assets/locations.csv', onLoadCSV);
};

getSrc = function(url) {
  return "";
};

onLoadCSV = function(data) {
  var csv, i, line, match, nl, param, prevTitle, url;
  csv = $.csv.toArrays(data);
  prevTitle = "";
  for (i in csv) {
    line = csv[i];
    url = line[1];
    match = mapReg.exec(url);
    if (match === null) {
      console.log("error", i, line[0]);
      continue;
    }
    nl = {
      number: Number(i) + 1,
      title: line[0],
      url: line[1],
      lat: match[1],
      lng: match[2],
      fov: match[4],
      heading: match[5],
      pitch: match[6]
    };
    if (nl.title === "") {
      nl.title = prevTitle;
    }
    param = {
      size: "640x400",
      sensor: false,
      location: nl.lat + "," + nl.lng,
      heading: nl.heading,
      pitch: nl.pitch - 90,
      fov: nl.fov,
      key: apiKey
    };
    prevTitle = nl.title;
    nl.latlng = new google.maps.LatLng(nl.lat, nl.lng);
    nl.place = url.indexOf("lace") !== -1 ? "[place]" : "";
    locations.push(nl);
  }
  return makeCard();
};

makeCard = function() {
  var append, index;
  index = 0;
  append = function() {
    var $newElm, l;
    if (index >= locations.length) {
      return;
    }
    l = locations[index];
    $newElm = $("<li id='location-" + l.number + "' class='card'> <a href='" + l.url + "'><img class='thumb'></a> <h1>" + l.number + "." + l.title + " " + l.place + " </h1> </li>");
    $ul.append($newElm);
    loader.load(index, l.latlng, function(result) {
      var $img, param, src;
      console.log(result.index, result);
      l = locations[result.index];
      $("#location-" + l.number).append("<div class='description'> " + result.location.description + " (" + result.imageDate + ") </div>");
      $img = param = {
        size: "640x400",
        sensor: false,
        pano: result.location.pano,
        heading: l.heading,
        pitch: l.pitch - 90,
        fov: 180,
        key: apiKey
      };
      src = "http://maps.googleapis.com/maps/api/streetview?" + $.param(param);
      if (src === "" || src === void 0) {
        console.log(result, param);
      }
      return $("#location-" + l.number + " img").attr('src', src);
    });
    index += 1;
    return setTimeout(append, 200);
  };
  return append();
};

//# sourceMappingURL=data:application/json;base64,