var DIST_BETWEEN_PTS, MAX_PTS, canvas, create, dirService, loader, onAnalyzeComplete, onCancel, onComposeComplete, onMessage, onPanoramaLoad, onProgress, panoIds, rawPts, res, settings, sisyphus, storage, tasks, totalDist, updateSettings;

MAX_PTS = 100;

DIST_BETWEEN_PTS = 5;

loader = null;

dirService = new google.maps.DirectionsService({});

res = null;

rawPts = [];

panoIds = [];

totalDist = 0;

canvas = null;

tasks = [];

settings = {};

storage = localStorage;

updateSettings = function() {
  $('#gsv-generator').find('input, textarea').each(function() {
    var type;
    type = $(this).attr('type');
    if (type === 'checkbox') {
      settings[this.name] = $(this).is(':checked');
    } else if (type === 'radio') {
      if ($(this).is(':checked')) {
        settings[this.name] = $(this).val();
      }
    } else {
      settings[this.name] = $(this).val();
    }
    return true;
  });
};

sisyphus = null;

$(function() {
  canvas = document.createElement('canvas');
  $('#create').on('click', create);
  GSVHyperlapse.onMessage = onMessage;
  GSVHyperlapse.onPanoramaLoad = onPanoramaLoad;
  GSVHyperlapse.onProgress = onProgress;
  GSVHyperlapse.onAnalyzeComplete = onAnalyzeComplete;
  GSVHyperlapse.onComposeComplete = onComposeComplete;
  GSVHyperlapse.onCancel = onCancel;
  sisyphus = $('#gsv-generator').sisyphus();
  $('[name=dirFile]').on('change', function() {
    $('[name=dir]').val($('[name=dirFile]').val());
    return sisyphus.saveAllData();
  });
  return $('#gsv-generator').find('[data-parent]').each(function() {
    var $parent, $this, name;
    $this = $(this);
    $parent = $($this.attr('data-parent'));
    name = $parent.attr('name');
    return $("[name=" + name).on('change', (function(_this) {
      return function() {
        return $(_this).toggle($parent.prop('checked'));
      };
    })(this)).trigger('change');
  });
});

create = function(e) {
  var hyperlapse, index, list;
  e.preventDefault();
  updateSettings();
  if (fs.existsSync(settings.dir + "/" + settings.name)) {
    alert('destination folder is already exists.');
    return;
  }
  index = tasks.length;
  $('.tasks').append("<li id='task-" + index + "'> <h1><input type='text' name='name' value='" + settings.name + "'></h1> <button class='cancel action' data-index='" + index + "'>Cancel</button> <p>mode: " + settings.method + "<br></p> <div id='map-" + index + "' style='width: 48%; height: 0; padding-top: 26%; background:gray; display: inline-block;'></div> </li>");
  hyperlapse = new GSVHyperlapse(settings.name, $("#map-" + index)[0]);
  hyperlapse.setParameters(settings);
  if (settings.method === 'direction') {
    hyperlapse.createFromDirection(settings.url);
  } else if (settings.method === 'panoid') {
    list = $.parseJSON(settings.panoid);
    hyperlapse.createFromPanoId(list);
  }
  $("#task-" + index + " .cancel").on('click', function() {
    index = $(this).attr('data-index');
    return tasks[index].cancel();
  });
  return tasks.push(hyperlapse);
};

onCancel = function() {
  var $btn, $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $btn = $('<button>delete</button><br>');
  $btn.on('click', function() {
    return $elm.remove();
  });
  return $elm.children('p').append('canceled<br>').append($btn);
};

onAnalyzeComplete = function() {
  var $btnGen, $elm, $p, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $p = $elm.children('p');
  $btnGen = $('<button>generate hyperlapse</button><br>');
  $elm.children('p').append($btnGen);
  return $btnGen.on('click', (function(_this) {
    return function() {
      var dir, pano, txtPanoIds, txtReport;
      $elm.children('.control').remove();
      _this.compose();
      index = tasks.indexOf(_this);
      $elm = $("#task-" + index);
      $p = $elm.children('p');
      _this.name = $elm.find('[name=name]').prop('disabled', true).val();
      dir = settings.dir + "/" + _this.name;
      if (_this.method === GSVHyperlapseMethod.DIRECTION) {
        txtReport = "method: direction\nurl: " + _this.sourceUrl + "\nstep: " + _this.step + "\nsearchRadius: " + _this.searchRadius;
      } else if (_this.method = GSVHyperlapseMethod.PANOID) {
        txtReport = "method: panoid";
      }
      txtPanoIds = JSON.stringify((function() {
        var i, len, ref, results;
        ref = this.panoList;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          pano = ref[i];
          results.push(pano.id);
        }
        return results;
      }).call(_this));
      return mkdirp(dir, function() {
        fs.writeFile(dir + "/_report.txt", txtReport, function() {
          return $p.append('report saved<br>');
        });
        return fs.writeFile(dir + "/_pano-ids.json", txtPanoIds, function() {
          return $p.append('pano-ids.json saved<br>');
        });
      });
    };
  })(this));
};

onComposeComplete = function() {
  var $elm, $p, dir, index, txtPanoList;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  $p = $elm.children('p');
  dir = settings.dir + "/" + this.name;
  txtPanoList = JSON.stringify(this.panoList);
  return fs.writeFile(dir + "/_pano-data.json", txtPanoList, function() {
    $p.append('pano-data.json saved<br>');
    return notifier.notify({
      title: "GSV Generator",
      message: "All done!",
      sound: true
    });
  });
};

onProgress = function(loaded, total) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  if (loaded < 1) {
    $elm.children('p').append($('<progress></progress>'));
  }
  return $elm.find("progress").last().attr({
    value: loaded,
    max: total,
    'data-label': "[" + loaded + "/" + total + "]"
  });
};

onMessage = function(message) {
  var $elm, index;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  return $elm.children('p').append(message + "<br>");
};

onPanoramaLoad = function(idx, pano, data) {
  var $elm, ctx, index, path, tag;
  index = tasks.indexOf(this);
  $elm = $("#task-" + index);
  canvas.width = pano.width;
  canvas.height = pano.height * V_SCALE;
  ctx = canvas.getContext('2d');
  ctx.fillStyle = '#000000';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(pano, 0, 0);
  tag = {
    uid: this.uid,
    id: data.id,
    heading: data.heading,
    latLng: data.latLng.toString()
  };
  CanvasMatrixCode.draw(canvas, tag, 0, pano.height + 10, canvas.width, TAG_HEIGHT - 10);
  $elm.append(canvas);
  path = settings.dir + "/" + this.name + "/" + this.name + "_" + (('000000' + idx).substr(-6, 6)) + ".png";
  return saveCanvas(canvas, path);
};

//# sourceMappingURL=data:application/json;base64,